import type * as InputTypes from "./input-types.js";

import type * as BaseTypes from "./base-types.js";

/**
 * A checkout that was abandoned by the customer.
 */
export type AbandonedCheckout = {
/**
 * The URL for the buyer to recover their checkout.
 */
abandonedCheckoutUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID.
 */
defaultCursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the line items in this checkout.
 */
lineItems: { baseType: AbandonedCheckoutLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of products in the checkout.
 */
lineItemsQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of all items in the checkout, including discounts, shipping, taxes, and tips.
 */
totalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AbandonedCheckout", returnType: "AbandonedCheckout", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Navigable & Node

/**
 * A single line item in an abandoned checkout.
 */
export type AbandonedCheckoutLineItem = {
/**
 * A list of extra information that has been added to the line item.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Final total price for the entire quantity of this line item, including discounts.
 */
discountedTotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price for the entire quantity of this line item, after all discounts are applied, at both the line item and code-based line item level.
 */
discountedTotalPriceWithCodeDiscount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price of a single variant unit after discounts are applied at the line item level, in shop and presentment currencies.
 */
discountedUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price of a single variant unit after all discounts are applied, at both the line item and code-based line item level.
 */
discountedUnitPriceWithCodeDiscount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The image associated with the line item's variant or product.
 * NULL if the line item has no product, or if neither the variant nor the product have an image.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Original total price for the entire quantity of this line item, before discounts.
 */
originalTotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Original price for a single unit of this line item, before discounts.
 */
originalUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Product for this line item.
 * NULL for custom line items and products that were deleted after checkout began.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The quantity of the line item.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * SKU for the inventory item associated with the variant, if any.
 */
sku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Title of the line item. Defaults to the product's title.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Product variant for this line item.
 * NULL for custom line items and variants that were deleted after checkout began.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Title of the variant for this line item.
 * NULL for custom line items and products that don't have distinct variants.
 */
variantTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "AbandonedCheckoutLineItem", returnType: "AbandonedCheckoutLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple AbandonedCheckoutLineItems.
 */
export type AbandonedCheckoutLineItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: AbandonedCheckoutLineItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in AbandonedCheckoutLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: AbandonedCheckoutLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AbandonedCheckoutLineItemConnection", returnType: "AbandonedCheckoutLineItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one AbandonedCheckoutLineItem and a cursor during pagination.
 */
export type AbandonedCheckoutLineItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of AbandonedCheckoutLineItemEdge.
 */
node: { baseType: AbandonedCheckoutLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AbandonedCheckoutLineItemEdge", returnType: "AbandonedCheckoutLineItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A browse, cart, or checkout that was abandoned by a customer.
 */
export type Abandonment = {
/**
 * The abandonment payload for the abandoned checkout.
 */
abandonedCheckoutPayload: { baseType: AbandonedCheckout, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The abandonment type.
 */
abandonmentType: { baseType: BaseTypes.AbandonmentAbandonmentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The app associated with an abandoned checkout.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Permalink to the cart page.
 */
cartUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the abandonment was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer who abandoned this event.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the customer has a draft order since this abandonment has been abandoned.
 */
customerHasNoDraftOrderSinceAbandonment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the customer has completed an order since this checkout has been abandoned.
 */
customerHasNoOrderSinceAbandonment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of days since the last abandonment email was sent to the customer.
 */
daysSinceLastAbandonmentEmail: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * When the email was sent, if that's the case.
 */
emailSentAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The email state (e.g., sent or not sent).
 */
emailState: { baseType: BaseTypes.AbandonmentEmailState, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of hours since the customer has last abandoned a checkout.
 */
hoursSinceLastAbandonedCheckout: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the products in abandonment are available.
 */
inventoryAvailable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the abandonment event comes from a custom storefront channel.
 */
isFromCustomStorefront: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the abandonment event comes from the Online Store sales channel.
 */
isFromOnlineStore: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the abandonment event comes from the Shop app sales channel.
 */
isFromShopApp: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the abandonment event comes from Shop Pay.
 */
isFromShopPay: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the customer didn't complete another most significant step since this abandonment.
 */
isMostSignificantAbandonment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date for the latest browse abandonment.
 */
lastBrowseAbandonmentDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date for the latest cart abandonment.
 */
lastCartAbandonmentDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date for the latest checkout abandonment.
 */
lastCheckoutAbandonmentDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The most recent step type.
 */
mostRecentStep: { baseType: BaseTypes.AbandonmentAbandonmentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The products added to the cart during the customer abandoned visit.
 */
productsAddedToCart: { baseType: CustomerVisitProductInfoConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The products viewed during the customer abandoned visit.
 */
productsViewed: { baseType: CustomerVisitProductInfoConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the visit started.
 */
visitStartedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "Abandonment", returnType: "Abandonment", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `abandonmentEmailStateUpdate` mutation.
 */
export type AbandonmentEmailStateUpdatePayload = {
/**
 * The updated abandonment.
 */
abandonment: { baseType: Abandonment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: AbandonmentEmailStateUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "AbandonmentEmailStateUpdatePayload", returnType: "AbandonmentEmailStateUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `AbandonmentEmailStateUpdate`.
 */
export type AbandonmentEmailStateUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.AbandonmentEmailStateUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AbandonmentEmailStateUpdateUserError", returnType: "AbandonmentEmailStateUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `abandonmentUpdateActivitiesDeliveryStatuses` mutation.
 */
export type AbandonmentUpdateActivitiesDeliveryStatusesPayload = {
/**
 * The updated abandonment.
 */
abandonment: { baseType: Abandonment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: AbandonmentUpdateActivitiesDeliveryStatusesUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "AbandonmentUpdateActivitiesDeliveryStatusesPayload", returnType: "AbandonmentUpdateActivitiesDeliveryStatusesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `AbandonmentUpdateActivitiesDeliveryStatuses`.
 */
export type AbandonmentUpdateActivitiesDeliveryStatusesUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AbandonmentUpdateActivitiesDeliveryStatusesUserError", returnType: "AbandonmentUpdateActivitiesDeliveryStatusesUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications.
 */
export type AccessScope = {
/**
 * A description of the actions that the access scope allows an app to perform.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A readable string that represents the access scope. The string usually follows the format `{action}_{resource}`. `{action}` is `read` or `write`, and `{resource}` is the resource that the action can be performed on. `{action}` and `{resource}` are separated by an underscore. For example, `read_orders` or `write_products`.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AccessScope", returnType: "AccessScope", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an operation publishing all products to a publication.
 */
export type AddAllProductsOperation = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The count of processed rows, summing imported, failed, and skipped rows.
 */
processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Represents a rows objects within this background operation.
 */
rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of this operation.
 */
status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AddAllProductsOperation", returnType: "AddAllProductsOperation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node & ResourceOperation

/**
 * The additional fees that have been applied to the order.
 */
export type AdditionalFee = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the additional fee.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price of the additional fee.
 */
price: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of taxes charged on the additional fee.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "AdditionalFee", returnType: "AdditionalFee", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A sale associated with an additional fee charge.
 */
export type AdditionalFeeSale = {
/**
 * The type of order action that the sale represents.
 */
actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The additional fees for the associated sale.
 */
additionalFee: { baseType: SaleAdditionalFee, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the sale.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line type assocated with the sale.
 */
lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units either ordered or intended to be returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All individual taxes associated with the sale.
 */
taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total sale amount after taxes and discounts.
 */
totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale after taxes.
 */
totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale before taxes.
 */
totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of taxes for the sale.
 */
totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AdditionalFeeSale", returnType: "AdditionalFeeSale", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Sale

/**
 * A sale associated with an order price adjustment.
 */
export type AdjustmentSale = {
/**
 * The type of order action that the sale represents.
 */
actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the sale.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line type assocated with the sale.
 */
lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units either ordered or intended to be returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All individual taxes associated with the sale.
 */
taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total sale amount after taxes and discounts.
 */
totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale after taxes.
 */
totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale before taxes.
 */
totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of taxes for the sale.
 */
totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AdjustmentSale", returnType: "AdjustmentSale", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Sale

/**
 * Targets all items the cart for a specified discount.
 */
export type AllDiscountItems = {
/**
 * Whether all items are eligible for the discount. This value always returns `true`.
 */
allItems: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AllDiscountItems", returnType: "AllDiscountItems", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The Android mobile platform application.
 */
export type AndroidApplication = {
/**
 * Whether Android App Links are supported by this app.
 */
appLinksEnabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Android application ID.
 */
applicationId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The SHA256 fingerprints of the app's signing certificate.
 */
sha256CertFingerprints: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "AndroidApplication", returnType: "AndroidApplication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).
 * Versions are commonly referred to by their handle (for example, `2021-10`).
 */
export type ApiVersion = {
/**
 * The human-readable name of the version.
 */
displayName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that are marked as unsupported. For more information, refer to [Versioning](https://shopify.dev/api/usage/versioning).
 */
supported: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ApiVersion", returnType: "ApiVersion", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A Shopify application.
 */
export type App = {
/**
 * A unique application API identifier.
 */
apiKey: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * App store page URL of the app.
 */
appStoreAppUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * App store page URL of the developer who created the app.
 */
appStoreDeveloperUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All requestable access scopes available to the app.
 */
availableAccessScopes: { baseType: AccessScope, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Banner image for the app.
 */
banner: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Description of the app.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the app developer.
 */
developerName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The type of app developer.
 */
developerType: { baseType: BaseTypes.AppDeveloperType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Website of the developer who created the app.
 */
developerUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the app uses the Embedded App SDK.
 */
embedded: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Requirements that must be met before the app can be installed.
 */
failedRequirements: { baseType: FailedRequirement, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of app features that are shown in the Shopify App Store listing.
 */
features: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Feedback from this app about the store.
 */
feedback: { baseType: AppFeedback, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Handle of the app.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Icon that represents the app.
 */
icon: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Webpage where you can install the app.
 */
installUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Corresponding AppInstallation for this shop and App.
 * Returns null if the App is not installed.
 */
installation: { baseType: AppInstallation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use.
 */
isPostPurchaseAppInUse: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Webpage that the app starts in.
 */
launchUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
 */
navigationItems: { baseType: NavigationItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the app was previously installed on the current shop.
 */
previouslyInstalled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Detailed information about the app pricing.
 */
pricingDetails: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Summary of the app pricing details.
 */
pricingDetailsSummary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Link to app privacy policy.
 */
privacyPolicyUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The public category for the app.
 */
publicCategory: { baseType: BaseTypes.AppPublicCategory, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the app is published to the Shopify App Store.
 */
published: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The access scopes requested by the app. Lists the access scopes the app has declared in its configuration. Merchant must grant approval to these scopes for the app to be installed.
 */
requestedAccessScopes: { baseType: AccessScope, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Screenshots of the app.
 */
screenshots: { baseType: Image, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the app was developed by Shopify.
 */
shopifyDeveloped: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Name of the app.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Message that appears when the app is uninstalled. For example:
 * By removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.
 */
uninstallMessage: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Webpage where you can uninstall the app.
 */
uninstallUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The webhook API version for the app.
 */
webhookApiVersion: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "App", returnType: "App", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A catalog that defines the publication associated with an app.
 */
export type AppCatalog = {
/**
 * The apps associated with the catalog.
 */
apps: { baseType: AppConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Most recent catalog operations.
 */
operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The price list associated with the catalog.
 */
priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A group of products and collections that's published to a catalog.
 */
publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of the catalog.
 */
status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the catalog.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppCatalog", returnType: "AppCatalog", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Catalog & Node

/**
 * An auto-generated type for paginating through multiple Apps.
 */
export type AppConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: AppEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in AppEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: App, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppConnection", returnType: "AppConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
 */
export type AppCredit = {
/**
 * The amount that can be used towards future app purchases in Shopify.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the app credit was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of the app credit.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the app credit is a test transaction.
 */
test: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppCredit", returnType: "AppCredit", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple AppCredits.
 */
export type AppCreditConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: AppCreditEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in AppCreditEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: AppCredit, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppCreditConnection", returnType: "AppCreditConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one AppCredit and a cursor during pagination.
 */
export type AppCreditEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of AppCreditEdge.
 */
node: { baseType: AppCredit, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppCreditEdge", returnType: "AppCreditEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The details about the app extension that's providing the
 * [discount type](https://help.shopify.com/manual/discounts/discount-types).
 * This information includes the app extension's name and
 * [client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets),
 * [App Bridge configuration](https://shopify.dev/docs/api/app-bridge),
 * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations),
 * [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries),
 * and other metadata about the discount type, including the discount type's name and description.
 */
export type AppDiscountType = {
/**
 * The name of the app extension that's providing the
 * [discount type](https://help.shopify.com/manual/discounts/discount-types).
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [App Bridge configuration](https://shopify.dev/docs/api/app-bridge)
 * for the [discount type](https://help.shopify.com/manual/discounts/discount-types).
 */
appBridge: { baseType: FunctionsAppBridge, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets)
 * of the app extension that's providing the [discount type](https://help.shopify.com/manual/discounts/discount-types).
 */
appKey: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A description of the
 * [discount type](https://help.shopify.com/manual/discounts/discount-types)
 * provided by the app extension.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
discountClass: { baseType: BaseTypes.DiscountClass, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The
 * [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries)
 * associated with the app extension providing the
 * [discount type](https://help.shopify.com/manual/discounts/discount-types).
 */
functionId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of line item on an order that the
 * [discount type](https://help.shopify.com/manual/discounts/discount-types) applies to.
 * Valid values: `SHIPPING_LINE` and `LINE_ITEM`.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the [discount type](https://help.shopify.com/manual/discounts/discount-types)
 * that the app extension is providing.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppDiscountType", returnType: "AppDiscountType", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one App and a cursor during pagination.
 */
export type AppEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of AppEdge.
 */
node: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppEdge", returnType: "AppEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Reports the status of shops and their resources and displays this information
 * within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
 * to set up an app on their store.
 */
export type AppFeedback = {
/**
 * The application associated to the feedback.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A link to where merchants can resolve errors.
 */
link: { baseType: Link, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The feedback message presented to the merchant.
 */
messages: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "AppFeedback", returnType: "AppFeedback", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an installed application on a shop.
 */
export type AppInstallation = {
/**
 * The access scopes granted to the application by a merchant during installation.
 */
accessScopes: { baseType: AccessScope, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The active application subscriptions billed to the shop on a recurring basis.
 */
activeSubscriptions: { baseType: AppSubscription, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * All subscriptions created for a shop.
 */
allSubscriptions: { baseType: AppSubscriptionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.AppSubscriptionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Application which is installed.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Channel associated with the installed application.
 */
channel: { baseType: Channel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Credits that can be used towards future app purchases.
 */
credits: { baseType: AppCreditConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.AppTransactionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL to launch the application.
 */
launchUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * One-time purchases to a shop.
 */
oneTimePurchases: { baseType: AppPurchaseOneTimeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.AppTransactionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The publication associated with the installed application.
 */
publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes.
 */
revenueAttributionRecords: { baseType: AppRevenueAttributionRecordConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.AppRevenueAttributionRecordSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Subscriptions charge to a shop on a recurring basis.
 */
subscriptions: { baseType: AppSubscription, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The URL to uninstall the application.
 */
uninstallUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "AppInstallation", returnType: "AppInstallation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafields & Node

/**
 * An auto-generated type for paginating through multiple AppInstallations.
 */
export type AppInstallationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: AppInstallationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in AppInstallationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: AppInstallation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppInstallationConnection", returnType: "AppInstallationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one AppInstallation and a cursor during pagination.
 */
export type AppInstallationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of AppInstallationEdge.
 */
node: { baseType: AppInstallation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppInstallationEdge", returnType: "AppInstallationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The app plan that the merchant is subscribed to.
 */
export type AppPlanV2 = {
/**
 * The plan billed to a shop on a recurring basis.
 */
pricingDetails: { members: { AppRecurringPricing: AppRecurringPricing; AppUsagePricing: AppUsagePricing }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppPlanV2", returnType: "AppPlanV2", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The information about the price that's charged to a shop every plan period.
 * The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
 */
export type AppPricingDetails = AppRecurringPricing | AppUsagePricing

/**
 * Services and features purchased once by the store.
 */
export type AppPurchase = {
/**
 * The date and time when the app purchase occurred.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the app purchase.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount to be charged to the store for the app purchase.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the app purchase.
 */
status: { baseType: BaseTypes.AppPurchaseStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the app purchase is a test transaction.
 */
test: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Services and features purchased once by a store.
 */
export type AppPurchaseOneTime = {
/**
 * The date and time when the app purchase occurred.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the app purchase.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount to be charged to the store for the app purchase.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the app purchase.
 */
status: { baseType: BaseTypes.AppPurchaseStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the app purchase is a test transaction.
 */
test: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppPurchaseOneTime", returnType: "AppPurchaseOneTime", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & AppPurchase & Node

/**
 * An auto-generated type for paginating through multiple AppPurchaseOneTimes.
 */
export type AppPurchaseOneTimeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: AppPurchaseOneTimeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in AppPurchaseOneTimeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: AppPurchaseOneTime, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppPurchaseOneTimeConnection", returnType: "AppPurchaseOneTimeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `appPurchaseOneTimeCreate` mutation.
 */
export type AppPurchaseOneTimeCreatePayload = {
/**
 * The newly created app one-time purchase.
 */
appPurchaseOneTime: { baseType: AppPurchaseOneTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL that the merchant can access to approve or decline the newly created app one-time purchase.
 *
 * If the merchant declines, then the merchant is redirected to the app and receives a notification message stating that the charge was declined.
 * If the merchant approves and they're successfully invoiced, then the state of the charge changes from `pending` to `active`.
 *
 * You get paid after the charge is activated.
 */
confirmationUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "AppPurchaseOneTimeCreatePayload", returnType: "AppPurchaseOneTimeCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.
 */
export type AppPurchaseOneTimeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of AppPurchaseOneTimeEdge.
 */
node: { baseType: AppPurchaseOneTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppPurchaseOneTimeEdge", returnType: "AppPurchaseOneTimeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The pricing information about a subscription app.
 * The object contains an interval (the frequency at which the shop is billed for an app subscription) and
 * a price (the amount to be charged to the subscribing shop at each interval).
 */
export type AppRecurringPricing = {
/**
 * The discount applied to the subscription for a given number of billing intervals.
 */
discount: { baseType: AppSubscriptionDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The frequency at which the subscribing shop is billed for an app subscription.
 */
interval: { baseType: BaseTypes.AppPricingInterval, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount and currency to be charged to the subscribing shop every billing interval.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppRecurringPricing", returnType: "AppRecurringPricing", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents app revenue that was captured externally by the partner.
 */
export type AppRevenueAttributionRecord = {
/**
 * The financial amount captured in this attribution.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The timestamp when the financial amount was captured.
 */
capturedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The timestamp at which this revenue attribution was issued.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique value submitted during the creation of the app revenue attribution record.
 * For more information, refer to
 * [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
 */
idempotencyKey: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Indicates whether this is a test submission.
 */
test: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of revenue attribution.
 */
type: { baseType: BaseTypes.AppRevenueAttributionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppRevenueAttributionRecord", returnType: "AppRevenueAttributionRecord", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple AppRevenueAttributionRecords.
 */
export type AppRevenueAttributionRecordConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: AppRevenueAttributionRecordEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in AppRevenueAttributionRecordEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: AppRevenueAttributionRecord, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppRevenueAttributionRecordConnection", returnType: "AppRevenueAttributionRecordConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.
 */
export type AppRevenueAttributionRecordEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of AppRevenueAttributionRecordEdge.
 */
node: { baseType: AppRevenueAttributionRecord, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppRevenueAttributionRecordEdge", returnType: "AppRevenueAttributionRecordEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Provides users access to services and/or features for a duration of time.
 */
export type AppSubscription = {
/**
 * The date and time when the app subscription was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the current app subscription period ends. Returns `null` if the subscription isn't active.
 */
currentPeriodEnd: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The plans attached to the app subscription.
 */
lineItems: { baseType: AppSubscriptionLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The name of the app subscription.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL that the merchant is redirected to after approving the app subscription.
 */
returnUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the app subscription.
 */
status: { baseType: BaseTypes.AppSubscriptionStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Specifies whether the app subscription is a test transaction.
 */
test: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of free trial days, starting at the subscription's creation date, by which billing is delayed.
 */
trialDays: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppSubscription", returnType: "AppSubscription", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `appSubscriptionCancel` mutation.
 */
export type AppSubscriptionCancelPayload = {
/**
 * The cancelled app subscription.
 */
appSubscription: { baseType: AppSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "AppSubscriptionCancelPayload", returnType: "AppSubscriptionCancelPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple AppSubscriptions.
 */
export type AppSubscriptionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: AppSubscriptionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in AppSubscriptionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: AppSubscription, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppSubscriptionConnection", returnType: "AppSubscriptionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `appSubscriptionCreate` mutation.
 */
export type AppSubscriptionCreatePayload = {
/**
 * The newly-created app subscription.
 */
appSubscription: { baseType: AppSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL pointing to the page where the merchant approves or declines the charges for an app subscription.
 */
confirmationUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "AppSubscriptionCreatePayload", returnType: "AppSubscriptionCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Discount applied to the recurring pricing portion of a subscription.
 */
export type AppSubscriptionDiscount = {
/**
 * The total number of billing intervals to which the discount will be applied.
 * The discount will be applied to an indefinite number of billing intervals if this value is blank.
 */
durationLimitInIntervals: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The price of the subscription after the discount is applied.
 */
priceAfterDiscount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The remaining number of billing intervals to which the discount will be applied.
 */
remainingDurationInIntervals: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The value of the discount applied every billing interval.
 */
value: { members: { AppSubscriptionDiscountAmount: AppSubscriptionDiscountAmount; AppSubscriptionDiscountPercentage: AppSubscriptionDiscountPercentage }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppSubscriptionDiscount", returnType: "AppSubscriptionDiscount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The fixed amount value of a discount.
 */
export type AppSubscriptionDiscountAmount = {
/**
 * The fixed amount value of a discount.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppSubscriptionDiscountAmount", returnType: "AppSubscriptionDiscountAmount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The percentage value of a discount.
 */
export type AppSubscriptionDiscountPercentage = {
/**
 * The percentage value of a discount.
 */
percentage: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppSubscriptionDiscountPercentage", returnType: "AppSubscriptionDiscountPercentage", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The value of the discount.
 */
export type AppSubscriptionDiscountValue = AppSubscriptionDiscountAmount | AppSubscriptionDiscountPercentage

/**
 * An auto-generated type which holds one AppSubscription and a cursor during pagination.
 */
export type AppSubscriptionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of AppSubscriptionEdge.
 */
node: { baseType: AppSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppSubscriptionEdge", returnType: "AppSubscriptionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The plan attached to an app subscription.
 */
export type AppSubscriptionLineItem = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The pricing model for the app subscription.
 */
plan: { baseType: AppPlanV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the store's usage records for a usage pricing plan.
 */
usageRecords: { baseType: AppUsageRecordConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.AppUsageRecordSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppSubscriptionLineItem", returnType: "AppSubscriptionLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `appSubscriptionLineItemUpdate` mutation.
 */
export type AppSubscriptionLineItemUpdatePayload = {
/**
 * The updated app subscription.
 */
appSubscription: { baseType: AppSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL where the merchant approves or declines the updated app subscription line item.
 */
confirmationUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "AppSubscriptionLineItemUpdatePayload", returnType: "AppSubscriptionLineItemUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `appSubscriptionTrialExtend` mutation.
 */
export type AppSubscriptionTrialExtendPayload = {
/**
 * The app subscription that had its trial extended.
 */
appSubscription: { baseType: AppSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: AppSubscriptionTrialExtendUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "AppSubscriptionTrialExtendPayload", returnType: "AppSubscriptionTrialExtendPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `AppSubscriptionTrialExtend`.
 */
export type AppSubscriptionTrialExtendUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.AppSubscriptionTrialExtendUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppSubscriptionTrialExtendUserError", returnType: "AppSubscriptionTrialExtendUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Defines a usage pricing model for the app subscription.
 * These charges are variable based on how much the merchant uses the app.
 */
export type AppUsagePricing = {
/**
 * The total usage records for interval.
 */
balanceUsed: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
 * This prevents billing from exceeding a maximum threshold over the duration of the billing period.
 * For the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.
 */
cappedAmount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The frequency with which the app usage records are billed.
 */
interval: { baseType: BaseTypes.AppPricingInterval, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The terms and conditions for app usage pricing.
 * Must be present in order to create usage charges.
 * The terms are presented to the merchant when they approve an app's usage charges.
 */
terms: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppUsagePricing", returnType: "AppUsagePricing", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Store usage for app subscriptions with usage pricing.
 */
export type AppUsageRecord = {
/**
 * The date and time when the usage record was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of the app usage record.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A unique key generated by the client to avoid duplicate charges.
 */
idempotencyKey: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The price of the usage record.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Defines the usage pricing plan the merchant is subscribed to.
 */
subscriptionLineItem: { baseType: AppSubscriptionLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppUsageRecord", returnType: "AppUsageRecord", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple AppUsageRecords.
 */
export type AppUsageRecordConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: AppUsageRecordEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in AppUsageRecordEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: AppUsageRecord, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppUsageRecordConnection", returnType: "AppUsageRecordConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `appUsageRecordCreate` mutation.
 */
export type AppUsageRecordCreatePayload = {
/**
 * The newly created app usage record.
 */
appUsageRecord: { baseType: AppUsageRecord, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "AppUsageRecordCreatePayload", returnType: "AppUsageRecordCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one AppUsageRecord and a cursor during pagination.
 */
export type AppUsageRecordEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of AppUsageRecordEdge.
 */
node: { baseType: AppUsageRecord, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppUsageRecordEdge", returnType: "AppUsageRecordEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The Apple mobile platform application.
 */
export type AppleApplication = {
/**
 * The iOS App Clip application ID.
 */
appClipApplicationId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether iOS App Clips are enabled for this app.
 */
appClipsEnabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The iOS App ID.
 */
appId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether iOS shared web credentials are enabled for this app.
 */
sharedWebCredentialsEnabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether iOS Universal Links are supported by this app.
 */
universalLinksEnabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AppleApplication", returnType: "AppleApplication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a generic custom attribute, such as whether an order is a customer's first.
 */
export type Attribute = {
/**
 * The key or name of the attribute. For example, `"customersFirstOrder"`.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the attribute. For example, `"true"`.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "Attribute", returnType: "Attribute", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Automatic discount applications capture the intentions of a discount that was automatically applied.
 */
export type AutomaticDiscountApplication = {
/**
 * The method by which the discount's value is applied to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * An ordered index that can be used to identify the discount application and indicate the precedence
 * of the discount application for calculations.
 */
index: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How the discount amount is distributed on the discounted lines.
 */
targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is applied on line items or shipping lines.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the discount application.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the discount application.
 */
value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AutomaticDiscountApplication", returnType: "AutomaticDiscountApplication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DiscountApplication

/**
 * Represents an object containing all information for channels available to a shop.
 */
export type AvailableChannelDefinitionsByChannel = {
/**
 * The channel definitions for channels installed on a shop.
 */
channelDefinitions: { baseType: ChannelDefinition, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The name of the channel.
 */
channelName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "AvailableChannelDefinitionsByChannel", returnType: "AvailableChannelDefinitionsByChannel", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Generic payment details that are related to a transaction.
 */
export type BasePaymentDetails = {
/**
 * The name of payment method used by the buyer.
 */
paymentMethodName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }
}

/**
 * Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
 * the addition of a product.
 *
 * ### General events
 *
 * | Action | Description  |
 * |---|---|
 * | `create` | The item was created. |
 * | `destroy` | The item was destroyed. |
 * | `published` | The item was published. |
 * | `unpublished` | The item was unpublished. |
 * | `update` | The item was updated.  |
 *
 * ### Order events
 *
 * Order events can be divided into the following categories:
 *
 * - *Authorization*: Includes whether the authorization succeeded, failed, or is pending.
 * - *Capture*: Includes whether the capture succeeded, failed, or is pending.
 * - *Email*: Includes confirmation or cancellation of the order, as well as shipping.
 * - *Fulfillment*: Includes whether the fulfillment succeeded, failed, or is pending. Also includes cancellation, restocking, and fulfillment updates.
 * - *Order*: Includess the placement, confirmation, closing, re-opening, and cancellation of the order.
 * - *Refund*: Includes whether the refund succeeded, failed, or is pending.
 * - *Sale*: Includes whether the sale succeeded, failed, or is pending.
 * - *Void*: Includes whether the void succeeded, failed, or is pending.
 *
 * | Action  | Message  | Description  |
 * |---|---|---|
 * | `authorization_failure` | The customer, unsuccessfully, tried to authorize: `{money_amount}`. | Authorization failed. The funds cannot be captured. |
 * | `authorization_pending` | Authorization for `{money_amount}` is pending. | Authorization pending. |
 * | `authorization_success` | The customer successfully authorized us to capture: `{money_amount}`. | Authorization was successful and the funds are available for capture. |
 * | `cancelled` | Order was cancelled by `{shop_staff_name}`. | The order was cancelled. |
 * | `capture_failure` | We failed to capture: `{money_amount}`. | The capture failed. The funds cannot be transferred to the shop. |
 * | `capture_pending` | Capture for `{money_amount}` is pending. | The capture is in process. The funds are not yet available to the shop. |
 * | `capture_success` | We successfully captured: `{money_amount}` | The capture was successful and the funds are now available to the shop. |
 * | `closed` | Order was closed. | The order was closed. |
 * | `confirmed` | Received a new order: `{order_number}` by `{customer_name}`. | The order was confirmed. |
 * | `fulfillment_cancelled` | We cancelled `{number_of_line_items}` from being fulfilled by the third party fulfillment service. | Fulfillment for one or more of the line_items failed. |
 * | `fulfillment_pending` | We submitted `{number_of_line_items}` to the third party service. | One or more of the line_items has been assigned to a third party service for fulfillment. |
 * | `fulfillment_success` | We successfully fulfilled line_items. | Fulfillment was successful for one or more line_items. |
 * | `mail_sent` | `{message_type}` email was sent to the customer. | An email was sent to the customer. |
 * | `placed` | Order was placed. | An order was placed by the customer. |
 * | `re_opened` | Order was re-opened. | An order was re-opened. |
 * | `refund_failure` | We failed to refund `{money_amount}`. | The refund failed. The funds are still with the shop. |
 * | `refund_pending` | Refund of `{money_amount}` is still pending. | The refund is in process. The funds are still with shop. |
 * | `refund_success` | We successfully refunded `{money_amount}`. | The refund was successful. The funds have been transferred to the customer. |
 * | `restock_line_items` | We restocked `{number_of_line_items}`. |	One or more of the order's line items have been restocked. |
 * | `sale_failure` | The customer failed to pay `{money_amount}`. | The sale failed. The funds are not available to the shop. |
 * | `sale_pending` | The `{money_amount}` is pending. | The sale is in process. The funds are not yet available to the shop. |
 * | `sale_success` | We successfully captured `{money_amount}`. | The sale was successful. The funds are now with the shop. |
 * | `update` | `{order_number}` was updated. | The order was updated. |
 * | `void_failure` | We failed to void the authorization. | Voiding the authorization failed. The authorization is still valid. |
 * | `void_pending` | Authorization void is pending. | Voiding the authorization is in process. The authorization is still valid. |
 * | `void_success` | We successfully voided the authorization. | Voiding the authorization was successful. The authorization is no longer valid. |
 */
export type BasicEvent = {
/**
 * The name of the app that created the event.
 */
appTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the event was created by an app.
 */
attributeToApp: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the event was caused by an admin user.
 */
attributeToUser: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the event was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the event is critical.
 */
criticalAlert: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Human readable text that describes the event.
 */
message: { baseType: BaseTypes.FormattedString, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "BasicEvent", returnType: "BasicEvent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Event & Node

/**
 * Represents an error that happens during the execution of a billing attempt mutation.
 */
export type BillingAttemptUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.BillingAttemptUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "BillingAttemptUserError", returnType: "BillingAttemptUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents an error that happens during execution of a bulk mutation.
 */
export type BulkMutationUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.BulkMutationErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "BulkMutationUserError", returnType: "BulkMutationUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An asynchronous long-running operation to fetch data in bulk or to bulk import data.
 *
 * Bulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After
 * they are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
 * a link to the data in [JSONL](http://jsonlines.org/) format.
 *
 * Refer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
 */
export type BulkOperation = {
/**
 * When the bulk operation was successfully completed.
 */
completedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * When the bulk operation was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Error code for failed operations.
 */
errorCode: { baseType: BaseTypes.BulkOperationErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * File size in bytes of the file in the `url` field.
 */
fileSize: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A running count of all the objects processed.
 * For example, when fetching all the products and their variants, this field counts both products and variants.
 * This field can be used to track operation progress.
 */
objectCount: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL that points to the partial or incomplete response data (in [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.
 * The URL expires 7 days after the operation fails. Returns `null` when there's no data available.
 */
partialDataUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * GraphQL query document specified in `bulkOperationRunQuery`.
 */
query: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A running count of all the objects that are processed at the root of the query.
 * For example, when fetching all the products and their variants, this field only counts products.
 * This field can be used to track operation progress.
 */
rootObjectCount: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Status of the bulk operation.
 */
status: { baseType: BaseTypes.BulkOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The bulk operation's type.
 */
type: { baseType: BaseTypes.BulkOperationType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL that points to the response data in [JSONL](http://jsonlines.org/) format.
 * The URL expires 7 days after the operation completes.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "BulkOperation", returnType: "BulkOperation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `bulkOperationCancel` mutation.
 */
export type BulkOperationCancelPayload = {
/**
 * The bulk operation to be canceled.
 */
bulkOperation: { baseType: BulkOperation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "BulkOperationCancelPayload", returnType: "BulkOperationCancelPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `bulkOperationRunMutation` mutation.
 */
export type BulkOperationRunMutationPayload = {
/**
 * The newly created bulk operation.
 */
bulkOperation: { baseType: BulkOperation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BulkMutationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "BulkOperationRunMutationPayload", returnType: "BulkOperationRunMutationPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `bulkOperationRunQuery` mutation.
 */
export type BulkOperationRunQueryPayload = {
/**
 * The newly created bulk operation.
 */
bulkOperation: { baseType: BulkOperation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "BulkOperationRunQueryPayload", returnType: "BulkOperationRunQueryPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `bulkProductResourceFeedbackCreate` mutation.
 */
export type BulkProductResourceFeedbackCreatePayload = {
/**
 * The feedback that's created.
 */
feedback: { baseType: ProductResourceFeedback, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BulkProductResourceFeedbackCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "BulkProductResourceFeedbackCreatePayload", returnType: "BulkProductResourceFeedbackCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `BulkProductResourceFeedbackCreate`.
 */
export type BulkProductResourceFeedbackCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.BulkProductResourceFeedbackCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "BulkProductResourceFeedbackCreateUserError", returnType: "BulkProductResourceFeedbackCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents the Bundles feature configuration for the shop.
 */
export type BundlesFeature = {
/**
 * Whether a shop is configured properly to sell bundles.
 */
eligibleForBundles: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason why a shop is not eligible for bundles.
 */
ineligibilityReason: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether a shop has any fixed bundle products or has a cartTransform function installed.
 */
sellsBundles: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "BundlesFeature", returnType: "BundlesFeature", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that happens during the execution of a business customer mutation.
 */
export type BusinessCustomerUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.BusinessCustomerErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "BusinessCustomerUserError", returnType: "BusinessCustomerUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Settings describing the behavior of checkout for a B2B buyer.
 */
export type BuyerExperienceConfiguration = {
/**
 * Whether to checkout to draft order for merchant review.
 */
checkoutToDraft: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether to allow customers to use editable shipping addresses.
 */
editableShippingAddress: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a buyer must pay at checkout or they can also choose to pay
 * later using net terms.
 */
payNowOnly: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Represents the merchant configured payment terms.
 */
paymentTermsTemplate: { baseType: PaymentTermsTemplate, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "BuyerExperienceConfiguration", returnType: "BuyerExperienceConfiguration", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A discount that is automatically applied to an order that is being edited.
 */
export type CalculatedAutomaticDiscountApplication = {
/**
 * The method by which the discount's value is allocated to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The level at which the discount was applied.
 */
appliedTo: { baseType: BaseTypes.DiscountApplicationLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of discount application. Indicates the reason why the discount was applied.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How the discount amount is distributed on the discounted lines.
 */
targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is applied on line items or shipping lines.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the discount application.
 */
value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedAutomaticDiscountApplication", returnType: "CalculatedAutomaticDiscountApplication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CalculatedDiscountApplication

/**
 * An amount discounting the line that has been allocated by an associated discount application.
 */
export type CalculatedDiscountAllocation = {
/**
 * The money amount that's allocated by the discount application in shop and presentment currencies.
 */
allocatedAmountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount that the allocated amount originated from.
 */
discountApplication: { members: { CalculatedAutomaticDiscountApplication: CalculatedAutomaticDiscountApplication; CalculatedDiscountCodeApplication: CalculatedDiscountCodeApplication; CalculatedManualDiscountApplication: CalculatedManualDiscountApplication; CalculatedScriptDiscountApplication: CalculatedScriptDiscountApplication }, fields: { allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; appliedTo: { baseType: BaseTypes.DiscountApplicationLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedDiscountAllocation", returnType: "CalculatedDiscountAllocation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied.
 */
export type CalculatedDiscountApplication = {
/**
 * The method by which the discount's value is allocated to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The level at which the discount was applied.
 */
appliedTo: { baseType: BaseTypes.DiscountApplicationLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of discount application. Indicates the reason why the discount was applied.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How the discount amount is distributed on the discounted lines.
 */
targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is applied on line items or shipping lines.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the discount application.
 */
value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple CalculatedDiscountApplications.
 */
export type CalculatedDiscountApplicationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CalculatedDiscountApplicationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CalculatedDiscountApplicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { CalculatedAutomaticDiscountApplication: CalculatedAutomaticDiscountApplication; CalculatedDiscountCodeApplication: CalculatedDiscountCodeApplication; CalculatedManualDiscountApplication: CalculatedManualDiscountApplication; CalculatedScriptDiscountApplication: CalculatedScriptDiscountApplication }, fields: { allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; appliedTo: { baseType: BaseTypes.DiscountApplicationLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedDiscountApplicationConnection", returnType: "CalculatedDiscountApplicationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.
 */
export type CalculatedDiscountApplicationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CalculatedDiscountApplicationEdge.
 */
node: { members: { CalculatedAutomaticDiscountApplication: CalculatedAutomaticDiscountApplication; CalculatedDiscountCodeApplication: CalculatedDiscountCodeApplication; CalculatedManualDiscountApplication: CalculatedManualDiscountApplication; CalculatedScriptDiscountApplication: CalculatedScriptDiscountApplication }, fields: { allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; appliedTo: { baseType: BaseTypes.DiscountApplicationLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedDiscountApplicationEdge", returnType: "CalculatedDiscountApplicationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A discount code that is applied to an order that is being edited.
 */
export type CalculatedDiscountCodeApplication = {
/**
 * The method by which the discount's value is allocated to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The level at which the discount was applied.
 */
appliedTo: { baseType: BaseTypes.DiscountApplicationLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The string identifying the discount code that was used at the time of application.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of discount application. Indicates the reason why the discount was applied.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How the discount amount is distributed on the discounted lines.
 */
targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is applied on line items or shipping lines.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the discount application.
 */
value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedDiscountCodeApplication", returnType: "CalculatedDiscountCodeApplication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CalculatedDiscountApplication

/**
 * The calculated fields for a draft order.
 */
export type CalculatedDraftOrder = {
/**
 * Whether or not to accept automatic discounts on the draft order during calculation.
 * If false, only discount codes and custom draft order discounts (see `appliedDiscount`) will be applied.
 * If true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.
 */
acceptAutomaticDiscounts: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of alerts raised while calculating.
 */
alerts: { baseType: ResourceAlert, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The custom order-level discount applied.
 */
appliedDiscount: { baseType: DraftOrderAppliedDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The available shipping rates.
 * Requires a customer with a valid shipping address and at least one line item.
 */
availableShippingRates: { baseType: ShippingRate, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the billing address matches the shipping address.
 */
billingAddressMatchesShippingAddress: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop currency used for calculation.
 */
currencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer who will be sent an invoice.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All discount codes applied.
 */
discountCodes: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of the line items in the calculated draft order.
 */
lineItems: { baseType: CalculatedDraftOrderLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A subtotal of the line items and corresponding discounts,
 * excluding include shipping charges, shipping discounts, taxes, or order discounts.
 */
lineItemsSubtotalPrice: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the selected market.
 */
marketName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The selected country code that determines the pricing.
 */
marketRegionCountryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The assigned phone number.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of platform discounts applied.
 */
platformDiscounts: { baseType: DraftOrderPlatformDiscount, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The payment currency used for calculation.
 */
presentmentCurrencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The purchasing entity.
 */
purchasingEntity: { members: { Customer: Customer; PurchasingCompany: PurchasingCompany }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The line item containing the shipping information and costs.
 */
shippingLine: { baseType: ShippingLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The subtotal, in shop currency, of the line items and their discounts, excluding shipping charges, shipping discounts, and taxes.
 */
subtotalPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subtotal, of the line items and their discounts, excluding shipping charges, shipping discounts, and taxes.
 */
subtotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of of taxes lines charged for each line item and shipping line.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the line item prices include taxes.
 */
taxesIncluded: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total discounts.
 */
totalDiscountsSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total price of line items.
 */
totalLineItemsPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price, in shop currency, includes taxes, shipping charges, and discounts.
 */
totalPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price, includes taxes, shipping charges, and discounts.
 */
totalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of individual line item quantities.
 * If the draft order has bundle items, this is the sum containing the quantities of individual items in the bundle.
 */
totalQuantityOfLineItems: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total shipping price in shop currency.
 */
totalShippingPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total shipping price.
 */
totalShippingPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total tax in shop currency.
 */
totalTax: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total tax.
 */
totalTaxSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Fingerprint of the current cart.
 * In order to have bundles work, the fingerprint must be passed to
 * each request as it was previously returned, unmodified.
 */
transformerFingerprint: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of warnings raised while calculating.
 */
warnings: { members: { DraftOrderBundleAddedWarning: DraftOrderBundleAddedWarning; DraftOrderDiscountNotAppliedWarning: DraftOrderDiscountNotAppliedWarning }, fields: { errorCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; field: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CalculatedDraftOrder", returnType: "CalculatedDraftOrder", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The calculated line item for a draft order.
 */
export type CalculatedDraftOrderLineItem = {
/**
 * The custom applied discount.
 */
appliedDiscount: { baseType: DraftOrderAppliedDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The `discountedTotal` divided by `quantity`,
 * equal to the average value of the line item price per unit after discounts are applied.
 * This value doesn't include discounts applied to the entire draft order.
 */
approximateDiscountedUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The bundle components of the draft order line item.
 */
bundleComponents: { baseType: CalculatedDraftOrderLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the line item is custom (`true`) or contains a product variant (`false`).
 */
custom: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of attributes that represent custom features or special requests.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of additional information (metafields) with the associated types.
 */
customAttributesV2: { baseType: TypedAttribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total price with discounts applied.
 */
discountedTotal: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price with discounts applied.
 */
discountedTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unit price with discounts applied.
 */
discountedUnitPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unit price with discounts applied.
 */
discountedUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Name of the service provider who fulfilled the order.
 *
 * Valid values are either **manual** or the name of the provider.
 * For example, **amazon**, **shipwire**.
 *
 * Deleted fulfillment services will return null.
 */
fulfillmentService: { baseType: FulfillmentService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The image associated with the draft order line item.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the line item represents the purchase of a gift card.
 */
isGiftCard: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the product.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price, excluding discounts, equal to the original unit price multiplied by quantity.
 */
originalTotal: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price excluding discounts, equal to the original unit price multiplied by quantity.
 */
originalTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line item price without any discounts applied.
 */
originalUnitPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price without any discounts applied.
 */
originalUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The original custom line item input price.
 */
originalUnitPriceWithCurrency: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product for the line item.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The quantity of items. For a bundle item, this is the quantity of bundles,
 * not the quantity of items contained in the bundles themselves.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether physical shipping is required for the variant.
 */
requiresShipping: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The SKU number of the product variant.
 */
sku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the variant is taxable.
 */
taxable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the product or variant. This field only applies to custom line items.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total value of the discount.
 */
totalDiscount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discount amount.
 */
totalDiscountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The UUID of the draft order line item. Must be unique and consistent across requests.
 * This field is mandatory in order to manipulate drafts with bundles.
 */
uuid: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant for the line item.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the variant.
 */
variantTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the vendor who created the product variant.
 */
vendor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The weight unit and value.
 */
weight: { baseType: Weight, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CalculatedDraftOrderLineItem", returnType: "CalculatedDraftOrderLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A calculated exchange line item.
 */
export type CalculatedExchangeLineItem = {
/**
 * The discounts that have been allocated onto the line item by discount applications.
 */
calculatedDiscountAllocations: { baseType: CalculatedDiscountAllocation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The unit price of the exchange line item after discounts.
 */
discountedUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The original unit price of the exchange line item before discounts.
 */
originalUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity being exchanged.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The calculated subtotal set of the exchange line item, including discounts.
 */
subtotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total tax of the exchange line item.
 */
totalTaxSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The variant being exchanged.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedExchangeLineItem", returnType: "CalculatedExchangeLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A line item involved in order editing that may be newly added or have new changes applied.
 */
export type CalculatedLineItem = {
/**
 * The discounts that have been allocated onto the line item by discount applications.
 */
calculatedDiscountAllocations: { baseType: CalculatedDiscountAllocation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of attributes that represent custom features or special requests.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The discounts that have been allocated onto the line item by discount applications.
 */
discountAllocations: { baseType: DiscountAllocation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The price of a single quantity of the line item with line item discounts applied, in shop and presentment currencies. Discounts applied to the entire order aren't included in this price.
 */
discountedUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of items that can be edited.
 */
editableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The editable quantity prior to any changes made in the current edit.
 */
editableQuantityBeforeChanges: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price of editable lines in shop and presentment currencies.
 */
editableSubtotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the calculated line item has a staged discount.
 */
hasStagedLineItemDiscount: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The image object associated to the line item's variant.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The variant unit price in shop and presentment currencies, without any discounts applied.
 */
originalUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of items.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the line item can be restocked or not.
 */
restockable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the changes on the line item will result in a restock.
 */
restocking: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The variant SKU number.
 */
sku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of changes that affect this line item.
 */
stagedChanges: { members: { OrderStagedChangeAddCustomItem: OrderStagedChangeAddCustomItem; OrderStagedChangeAddLineItemDiscount: OrderStagedChangeAddLineItemDiscount; OrderStagedChangeAddShippingLine: OrderStagedChangeAddShippingLine; OrderStagedChangeAddVariant: OrderStagedChangeAddVariant; OrderStagedChangeDecrementItem: OrderStagedChangeDecrementItem; OrderStagedChangeIncrementItem: OrderStagedChangeIncrementItem; OrderStagedChangeRemoveShippingLine: OrderStagedChangeRemoveShippingLine }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The title of the product.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price of uneditable lines in shop and presentment currencies.
 */
uneditableSubtotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant associated with this line item. The value is null for custom line items and items where
 * the variant has been deleted.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The title of the variant.
 */
variantTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CalculatedLineItem", returnType: "CalculatedLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple CalculatedLineItems.
 */
export type CalculatedLineItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CalculatedLineItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CalculatedLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CalculatedLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedLineItemConnection", returnType: "CalculatedLineItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.
 */
export type CalculatedLineItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CalculatedLineItemEdge.
 */
node: { baseType: CalculatedLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedLineItemEdge", returnType: "CalculatedLineItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a discount that was manually created for an order that is being edited.
 */
export type CalculatedManualDiscountApplication = {
/**
 * The method by which the discount's value is allocated to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The level at which the discount was applied.
 */
appliedTo: { baseType: BaseTypes.DiscountApplicationLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of discount application. Indicates the reason why the discount was applied.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How the discount amount is distributed on the discounted lines.
 */
targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is applied on line items or shipping lines.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the discount application.
 */
value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedManualDiscountApplication", returnType: "CalculatedManualDiscountApplication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CalculatedDiscountApplication

/**
 * An order with edits applied but not saved.
 */
export type CalculatedOrder = {
/**
 * Returns only the new discount applications being added to the order in the current edit.
 */
addedDiscountApplications: { baseType: CalculatedDiscountApplicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns only the new line items being added to the order during the current edit.
 */
addedLineItems: { baseType: CalculatedLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Amount of the order-level discount (doesn't contain any line item discounts) in shop and presentment currencies.
 */
cartDiscountAmountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the changes have been applied and saved to the order.
 */
committed: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns all items on the order that existed before starting the edit.
 * Will include any changes that have been made.
 * Will not include line items added during the current edit.
 */
lineItems: { baseType: CalculatedLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The HTML of the customer notification for the order edit.
 */
notificationPreviewHtml: { baseType: BaseTypes.HTML, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer notification title.
 */
notificationPreviewTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order without any changes applied.
 */
originalOrder: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns the shipping lines on the order that existed before starting the edit.
 * Will include any changes that have been made as well as shipping lines added during the current edit.
 * Returns only the first 250 shipping lines.
 */
shippingLines: { baseType: CalculatedShippingLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * List of changes made to the order during the current edit.
 */
stagedChanges: { baseType: OrderStagedChangeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of the quantities for the line items that contribute to the order's subtotal.
 */
subtotalLineItemsQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subtotal of the line items, in shop and presentment currencies, after all the discounts are applied.  The subtotal doesn't include shipping.  The subtotal includes taxes for taxes-included orders and excludes taxes for taxes-excluded orders.
 */
subtotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Taxes charged for the line item.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Total price of the order less the total amount received from the customer in shop and presentment currencies.
 */
totalOutstandingSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
 */
totalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedOrder", returnType: "CalculatedOrder", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The calculated costs of handling a return line item.
 * Typically, this would cover the costs of inspecting, repackaging, and restocking the item.
 */
export type CalculatedRestockingFee = {
/**
 * The calculated amount of the return fee, in shop and presentment currencies.
 */
amountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the fee as a percentage.
 */
percentage: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedRestockingFee", returnType: "CalculatedRestockingFee", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CalculatedReturnFee

/**
 * A calculated return.
 */
export type CalculatedReturn = {
/**
 * A list of calculated exchange line items.
 */
exchangeLineItems: { baseType: CalculatedExchangeLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of calculated return line items.
 */
returnLineItems: { baseType: CalculatedReturnLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The calulated return shipping fee.
 */
returnShippingFee: { baseType: CalculatedReturnShippingFee, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CalculatedReturn", returnType: "CalculatedReturn", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A calculated return fee.
 */
export type CalculatedReturnFee = {
/**
 * The calculated amount of the return fee, in shop and presentment currencies.
 */
amountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A calculated return line item.
 */
export type CalculatedReturnLineItem = {
/**
 * The fulfillment line item from which items are returned.
 */
fulfillmentLineItem: { baseType: FulfillmentLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The quantity being returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The restocking fee of the return line item.
 */
restockingFee: { baseType: CalculatedRestockingFee, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The subtotal of the return line item before order discounts.
 */
subtotalBeforeOrderDiscountsSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subtotal of the return line item.
 */
subtotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total tax of the return line item.
 */
totalTaxSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedReturnLineItem", returnType: "CalculatedReturnLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The calculated cost of the return shipping.
 */
export type CalculatedReturnShippingFee = {
/**
 * The calculated amount of the return fee, in shop and presentment currencies.
 */
amountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedReturnShippingFee", returnType: "CalculatedReturnShippingFee", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CalculatedReturnFee

/**
 * A discount created by a Shopify script for an order that is being edited.
 */
export type CalculatedScriptDiscountApplication = {
/**
 * The method by which the discount's value is allocated to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The level at which the discount was applied.
 */
appliedTo: { baseType: BaseTypes.DiscountApplicationLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of discount application. Indicates the reason why the discount was applied.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How the discount amount is distributed on the discounted lines.
 */
targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is applied on line items or shipping lines.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the discount application.
 */
value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedScriptDiscountApplication", returnType: "CalculatedScriptDiscountApplication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CalculatedDiscountApplication

/**
 * A shipping line item involved in order editing that may be newly added or have new changes applied.
 */
export type CalculatedShippingLine = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The price of the shipping line when sold and before applying discounts. This field includes taxes if `Order.taxesIncluded` is true. Otherwise, this field doesn't include taxes for the shipping line.
 */
price: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staged status of the shipping line.
 */
stagedStatus: { baseType: BaseTypes.CalculatedShippingLineStagedStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the shipping line.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CalculatedShippingLine", returnType: "CalculatedShippingLine", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Card payment details related to a transaction.
 */
export type CardPaymentDetails = {
/**
 * The response code from the address verification system (AVS). The code is always a single letter.
 */
avsResultCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card. This is made up of the first few digits of the credit card number.
 */
bin: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the company that issued the customer's credit card.
 */
company: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly. The code is a single letter or empty string.
 */
cvvResultCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The month in which the used credit card expires.
 */
expirationMonth: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The year in which the used credit card expires.
 */
expirationYear: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The holder of the credit card.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer's credit card number, with most of the leading digits redacted.
 */
number: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of payment method used by the buyer.
 */
paymentMethodName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Digital wallet used for the payment.
 */
wallet: { baseType: BaseTypes.DigitalWallet, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CardPaymentDetails", returnType: "CardPaymentDetails", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & BasePaymentDetails

/**
 * Return type for `carrierServiceCreate` mutation.
 */
export type CarrierServiceCreatePayload = {
/**
 * The created carrier service.
 */
carrierService: { baseType: DeliveryCarrierService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CarrierServiceCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CarrierServiceCreatePayload", returnType: "CarrierServiceCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CarrierServiceCreate`.
 */
export type CarrierServiceCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CarrierServiceCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CarrierServiceCreateUserError", returnType: "CarrierServiceCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `carrierServiceDelete` mutation.
 */
export type CarrierServiceDeletePayload = {
/**
 * The ID of the deleted carrier service.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CarrierServiceDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CarrierServiceDeletePayload", returnType: "CarrierServiceDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CarrierServiceDelete`.
 */
export type CarrierServiceDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CarrierServiceDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CarrierServiceDeleteUserError", returnType: "CarrierServiceDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `carrierServiceUpdate` mutation.
 */
export type CarrierServiceUpdatePayload = {
/**
 * The updated carrier service.
 */
carrierService: { baseType: DeliveryCarrierService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CarrierServiceUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CarrierServiceUpdatePayload", returnType: "CarrierServiceUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CarrierServiceUpdate`.
 */
export type CarrierServiceUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CarrierServiceUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CarrierServiceUpdateUserError", returnType: "CarrierServiceUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle).
 */
export type CartTransform = {
/**
 * Whether a run failure will block cart and checkout operations.
 */
blockOnFailure: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID for the Cart Transform function.
 */
functionId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CartTransform", returnType: "CartTransform", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafields & Node

/**
 * An auto-generated type for paginating through multiple CartTransforms.
 */
export type CartTransformConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CartTransformEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CartTransformEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CartTransform, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CartTransformConnection", returnType: "CartTransformConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `cartTransformCreate` mutation.
 */
export type CartTransformCreatePayload = {
/**
 * The newly created cart transform function.
 */
cartTransform: { baseType: CartTransform, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CartTransformCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CartTransformCreatePayload", returnType: "CartTransformCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CartTransformCreate`.
 */
export type CartTransformCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CartTransformCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CartTransformCreateUserError", returnType: "CartTransformCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `cartTransformDelete` mutation.
 */
export type CartTransformDeletePayload = {
/**
 * The globally-unique ID for the deleted cart transform.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CartTransformDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CartTransformDeletePayload", returnType: "CartTransformDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CartTransformDelete`.
 */
export type CartTransformDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CartTransformDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CartTransformDeleteUserError", returnType: "CartTransformDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An auto-generated type which holds one CartTransform and a cursor during pagination.
 */
export type CartTransformEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CartTransformEdge.
 */
node: { baseType: CartTransform, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CartTransformEdge", returnType: "CartTransformEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the cart transform feature configuration for the shop.
 */
export type CartTransformEligibleOperations = {
/**
 * The shop is eligible for expand operations.
 */
expandOperation: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop is eligible for merge operations.
 */
mergeOperation: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop is eligible for update operations.
 */
updateOperation: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CartTransformEligibleOperations", returnType: "CartTransformEligibleOperations", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the cart transform feature configuration for the shop.
 */
export type CartTransformFeature = {
/**
 * The cart transform operations eligible for the shop.
 */
eligibleOperations: { baseType: CartTransformEligibleOperations, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CartTransformFeature", returnType: "CartTransformFeature", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Tracks an adjustment to the cash in a cash tracking session for a point of sale device over the course of a shift.
 */
export type CashTrackingAdjustment = {
/**
 * The amount of cash being added or removed.
 */
cash: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The note entered when the adjustment was made.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The staff member who made the adjustment.
 */
staffMember: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The time when the adjustment was made.
 */
time: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CashTrackingAdjustment", returnType: "CashTrackingAdjustment", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple CashTrackingAdjustments.
 */
export type CashTrackingAdjustmentConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CashTrackingAdjustmentEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CashTrackingAdjustmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CashTrackingAdjustment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CashTrackingAdjustmentConnection", returnType: "CashTrackingAdjustmentConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CashTrackingAdjustment and a cursor during pagination.
 */
export type CashTrackingAdjustmentEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CashTrackingAdjustmentEdge.
 */
node: { baseType: CashTrackingAdjustment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CashTrackingAdjustmentEdge", returnType: "CashTrackingAdjustmentEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Tracks the balance in a cash drawer for a point of sale device over the course of a shift.
 */
export type CashTrackingSession = {
/**
 * The adjustments made to the cash drawer during this session.
 */
adjustments: { baseType: CashTrackingAdjustmentConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.AdjustmentsSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether this session is tracking cash payments.
 */
cashTrackingEnabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The cash transactions made during this session.
 */
cashTransactions: { baseType: OrderTransactionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CashTrackingSessionTransactionsSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The counted cash balance when the session was closed.
 */
closingBalance: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The note entered when the session was closed.
 */
closingNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The user who closed the session.
 */
closingStaffMember: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * When the session was closed.
 */
closingTime: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The expected balance at the end of the session or the expected current balance for sessions that are still open.
 */
expectedBalance: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount that was expected to be in the cash drawer at the end of the session, calculated after the session was closed.
 */
expectedClosingBalance: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The amount expected to be in the cash drawer based on the previous session.
 */
expectedOpeningBalance: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location of the point of sale device during this session.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The net cash sales made for the duration of this cash tracking session.
 */
netCashSales: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The counted cash balance when the session was opened.
 */
openingBalance: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The note entered when the session was opened.
 */
openingNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The user who opened the session.
 */
openingStaffMember: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * When the session was opened.
 */
openingTime: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The register name for the point of sale device that this session is tracking cash for.
 */
registerName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of all adjustments made during the session, excluding the final adjustment.
 */
totalAdjustments: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The sum of all cash refunds for the duration of this cash tracking session.
 */
totalCashRefunds: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of all cash sales for the duration of this cash tracking session.
 */
totalCashSales: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discrepancy for the session including starting and ending.
 */
totalDiscrepancy: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CashTrackingSession", returnType: "CashTrackingSession", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple CashTrackingSessions.
 */
export type CashTrackingSessionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CashTrackingSessionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CashTrackingSessionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CashTrackingSession, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CashTrackingSessionConnection", returnType: "CashTrackingSessionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CashTrackingSession and a cursor during pagination.
 */
export type CashTrackingSessionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CashTrackingSessionEdge.
 */
node: { baseType: CashTrackingSession, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CashTrackingSessionEdge", returnType: "CashTrackingSessionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A list of products with publishing and pricing information.
 * A catalog can be associated with a specific context, such as a [`Market`](https://shopify.dev/api/admin-graphql/current/objects/market), [`CompanyLocation`](https://shopify.dev/api/admin-graphql/current/objects/companylocation), or [`App`](https://shopify.dev/api/admin-graphql/current/objects/app).
 */
export type Catalog = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Most recent catalog operations.
 */
operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The price list associated with the catalog.
 */
priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A group of products and collections that's published to a catalog.
 */
publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of the catalog.
 */
status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the catalog.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple Catalogs.
 */
export type CatalogConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CatalogEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CatalogEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { AppCatalog: AppCatalog; CompanyLocationCatalog: CompanyLocationCatalog; MarketCatalog: MarketCatalog }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CatalogConnection", returnType: "CatalogConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `catalogContextUpdate` mutation.
 */
export type CatalogContextUpdatePayload = {
/**
 * The updated catalog.
 */
catalog: { members: { AppCatalog: AppCatalog; CompanyLocationCatalog: CompanyLocationCatalog; MarketCatalog: MarketCatalog }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CatalogUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CatalogContextUpdatePayload", returnType: "CatalogContextUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `catalogCreate` mutation.
 */
export type CatalogCreatePayload = {
/**
 * The newly created catalog.
 */
catalog: { members: { AppCatalog: AppCatalog; CompanyLocationCatalog: CompanyLocationCatalog; MarketCatalog: MarketCatalog }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CatalogUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CatalogCreatePayload", returnType: "CatalogCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A catalog csv operation represents a CSV file import.
 */
export type CatalogCsvOperation = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The count of processed rows, summing imported, failed, and skipped rows.
 */
processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Represents a rows objects within this background operation.
 */
rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of this operation.
 */
status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CatalogCsvOperation", returnType: "CatalogCsvOperation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node & ResourceOperation

/**
 * Return type for `catalogDelete` mutation.
 */
export type CatalogDeletePayload = {
/**
 * The ID of the deleted catalog.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CatalogUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CatalogDeletePayload", returnType: "CatalogDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Catalog and a cursor during pagination.
 */
export type CatalogEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CatalogEdge.
 */
node: { members: { AppCatalog: AppCatalog; CompanyLocationCatalog: CompanyLocationCatalog; MarketCatalog: MarketCatalog }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CatalogEdge", returnType: "CatalogEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `catalogUpdate` mutation.
 */
export type CatalogUpdatePayload = {
/**
 * The updated catalog.
 */
catalog: { members: { AppCatalog: AppCatalog; CompanyLocationCatalog: CompanyLocationCatalog; MarketCatalog: MarketCatalog }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CatalogUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CatalogUpdatePayload", returnType: "CatalogUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Defines errors encountered while managing a catalog.
 */
export type CatalogUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CatalogUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CatalogUserError", returnType: "CatalogUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Channel = {
/**
 * The underlying app used by the channel.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The collection publications for the list of collections published to the channel.
 */
collectionPublicationsV3: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of collections published to the channel.
 */
collections: { baseType: CollectionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique identifier for the channel.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the collection is available to the channel.
 */
hasCollection: { baseType: BaseTypes.Boolean, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the channel.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The menu items for the channel, which also appear as submenu items in the left navigation sidebar in the Shopify admin.
 */
navigationItems: { baseType: NavigationItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Home page for the channel.
 */
overviewPath: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product publications for the products published to the channel.
 */
productPublications: { baseType: ProductPublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product publications for the list of products published to the channel.
 */
productPublicationsV3: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of products published to the channel.
 */
products: { baseType: ProductConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The count of products published to the channel. Limited to a maximum of 10000.
 */
productsCount: { baseType: Count, arguments: { query?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the channel supports future publishing.
 */
supportsFuturePublishing: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Channel", returnType: "Channel", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple Channels.
 */
export type ChannelConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ChannelEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ChannelEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Channel, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ChannelConnection", returnType: "ChannelConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A channel definition represents channels surfaces on the platform.
 * A channel definition can be a platform or a subsegment of it such as Facebook Home, Instagram Live, Instagram Shops, or WhatsApp chat.
 */
export type ChannelDefinition = {
/**
 * Name of the channel that this sub channel belongs to.
 */
channelName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Unique string used as a public identifier for the channel definition.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the channel definition.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether this channel definition represents a marketplace.
 */
isMarketplace: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Name of the sub channel (e.g. Online Store, Instagram Shopping, TikTok Live).
 */
subChannelName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Icon displayed when showing the channel in admin.
 */
svgIcon: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ChannelDefinition", returnType: "ChannelDefinition", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type which holds one Channel and a cursor during pagination.
 */
export type ChannelEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ChannelEdge.
 */
node: { baseType: Channel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ChannelEdge", returnType: "ChannelEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Contains the information for a given sales channel.
 */
export type ChannelInformation = {
/**
 * The app associated with the channel.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The channel definition associated with the channel.
 */
channelDefinition: { baseType: ChannelDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The unique ID for the channel.
 */
channelId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ChannelInformation", returnType: "ChannelInformation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The settings of checkout visual customizations.
 *
 * To learn more about updating checkout branding settings, refer to the
 * [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert) mutation.
 */
export type CheckoutBranding = {
/**
 * The customizations that apply to specific components or areas of the user interface.
 */
customizations: { baseType: CheckoutBrandingCustomizations, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The design system allows you to set values that represent specific attributes
 * of your brand like color and font. These attributes are used throughout the user
 * interface. This brings consistency and allows you to easily make broad design changes.
 */
designSystem: { baseType: CheckoutBrandingDesignSystem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBranding", returnType: "CheckoutBranding", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The buttons customizations.
 */
export type CheckoutBrandingButton = {
/**
 * The background style used for buttons.
 */
background: { baseType: BaseTypes.CheckoutBrandingBackgroundStyle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The block padding used for buttons.
 */
blockPadding: { baseType: BaseTypes.CheckoutBrandingSpacing, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The border used for buttons.
 */
border: { baseType: BaseTypes.CheckoutBrandingSimpleBorder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The corner radius used for buttons.
 */
cornerRadius: { baseType: BaseTypes.CheckoutBrandingCornerRadius, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The inline padding used for buttons.
 */
inlinePadding: { baseType: BaseTypes.CheckoutBrandingSpacing, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The typography used for buttons.
 */
typography: { baseType: CheckoutBrandingTypographyStyle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingButton", returnType: "CheckoutBrandingButton", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Colors for buttons.
 */
export type CheckoutBrandingButtonColorRoles = {
/**
 * The color of accented objects (links and focused state).
 */
accent: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of the background.
 */
background: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of borders.
 */
border: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The decorative color for highlighting specific parts of the user interface.
 */
decorative: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The colors of the button on hover.
 */
hover: { baseType: CheckoutBrandingColorRoles, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of icons.
 */
icon: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of text.
 */
text: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingButtonColorRoles", returnType: "CheckoutBrandingButtonColorRoles", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The customizations for the breadcrumbs that represent a buyer's journey to the checkout.
 */
export type CheckoutBrandingBuyerJourney = {
/**
 * An option to display or hide the breadcrumbs that represent the buyer's journey on 3-page checkout.
 */
visibility: { baseType: BaseTypes.CheckoutBrandingVisibility, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingBuyerJourney", returnType: "CheckoutBrandingBuyerJourney", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The customizations that you can make to cart links at checkout.
 */
export type CheckoutBrandingCartLink = {
/**
 * Whether the cart link is visible at checkout.
 */
visibility: { baseType: BaseTypes.CheckoutBrandingVisibility, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingCartLink", returnType: "CheckoutBrandingCartLink", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The checkboxes customizations.
 */
export type CheckoutBrandingCheckbox = {
/**
 * The corner radius used for checkboxes.
 */
cornerRadius: { baseType: BaseTypes.CheckoutBrandingCornerRadius, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingCheckbox", returnType: "CheckoutBrandingCheckbox", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The choice list customizations.
 */
export type CheckoutBrandingChoiceList = {
/**
 * The settings that apply to the 'group' variant of ChoiceList.
 */
group: { baseType: CheckoutBrandingChoiceListGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingChoiceList", returnType: "CheckoutBrandingChoiceList", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The settings that apply to the 'group' variant of ChoiceList.
 */
export type CheckoutBrandingChoiceListGroup = {
/**
 * The spacing between UI elements in the list.
 */
spacing: { baseType: BaseTypes.CheckoutBrandingSpacingKeyword, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingChoiceListGroup", returnType: "CheckoutBrandingChoiceListGroup", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A set of colors for customizing the overall look and feel of the checkout.
 */
export type CheckoutBrandingColorGlobal = {
/**
 * A color used for interaction, like links and focus states.
 */
accent: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A color that's strongly associated with the merchant. Currently used for
 * primary buttons, for example **Pay now**, and secondary buttons, for example **Buy again**.
 */
brand: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A semantic color used for components that communicate critical content. For example, a blocking error such as the requirement to enter a valid credit card number.
 */
critical: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A color used to highlight certain areas of the user interface. For example, the [`Text`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/titles-and-text/text#textprops-propertydetail-appearance) component.
 */
decorative: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A semantic color used for components that communicate general, informative content.
 */
info: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A semantic color used for components that communicate successful actions or a positive state.
 */
success: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A semantic color used for components that display content that requires attention. For example, something that might be wrong, but not blocking.
 */
warning: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingColorGlobal", returnType: "CheckoutBrandingColorGlobal", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A group of colors used together on a surface.
 */
export type CheckoutBrandingColorRoles = {
/**
 * The color of accented objects (links and focused state).
 */
accent: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of the background.
 */
background: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of borders.
 */
border: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The decorative color for highlighting specific parts of the user interface.
 */
decorative: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of icons.
 */
icon: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of text.
 */
text: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingColorRoles", returnType: "CheckoutBrandingColorRoles", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A base set of color customizations that's applied to an area of Checkout, from which every component
 * pulls its colors.
 */
export type CheckoutBrandingColorScheme = {
/**
 * The main colors of a scheme. Used for the surface background, text, links, and more.
 */
base: { baseType: CheckoutBrandingColorRoles, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The colors of form controls, such as the [`TextField`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/forms/textfield) and [`ChoiceList`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/forms/choicelist) components.
 */
control: { baseType: CheckoutBrandingControlColorRoles, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The colors of the primary button. For example, the main payment, or **Pay now** button.
 */
primaryButton: { baseType: CheckoutBrandingButtonColorRoles, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The colors of the secondary button, which is used for secondary actions. For example, **Buy again**.
 */
secondaryButton: { baseType: CheckoutBrandingButtonColorRoles, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingColorScheme", returnType: "CheckoutBrandingColorScheme", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The color schemes.
 */
export type CheckoutBrandingColorSchemes = {
/**
 * The primary scheme. By default, it’s used for the main area of the interface.
 */
scheme1: { baseType: CheckoutBrandingColorScheme, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The secondary scheme. By default, it’s used for secondary areas, like Checkout’s Order Summary.
 */
scheme2: { baseType: CheckoutBrandingColorScheme, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * An extra scheme available to customize more surfaces, components or specific states of the user interface.
 */
scheme3: { baseType: CheckoutBrandingColorScheme, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * An extra scheme available to customize more surfaces, components or specific states of the user interface.
 */
scheme4: { baseType: CheckoutBrandingColorScheme, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingColorSchemes", returnType: "CheckoutBrandingColorSchemes", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The color settings for global colors and color schemes.
 */
export type CheckoutBrandingColors = {
/**
 * A group of global colors for customizing the overall look and feel of the user interface.
 */
global: { baseType: CheckoutBrandingColorGlobal, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A set of color schemes which apply to different areas of the user interface.
 */
schemes: { baseType: CheckoutBrandingColorSchemes, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingColors", returnType: "CheckoutBrandingColors", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The container's divider customizations.
 */
export type CheckoutBrandingContainerDivider = {
/**
 * The divider style.
 */
borderStyle: { baseType: BaseTypes.CheckoutBrandingBorderStyle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The divider width.
 */
borderWidth: { baseType: BaseTypes.CheckoutBrandingBorderWidth, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The divider visibility.
 */
visibility: { baseType: BaseTypes.CheckoutBrandingVisibility, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingContainerDivider", returnType: "CheckoutBrandingContainerDivider", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The content container customizations.
 */
export type CheckoutBrandingContent = {
/**
 * The content container's divider style and visibility.
 */
divider: { baseType: CheckoutBrandingContainerDivider, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingContent", returnType: "CheckoutBrandingContent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The form controls customizations.
 */
export type CheckoutBrandingControl = {
/**
 * The border used for form controls.
 */
border: { baseType: BaseTypes.CheckoutBrandingSimpleBorder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Set to TRANSPARENT to define transparent form controls. If null, form controls inherit colors from their scheme settings (for example, the main section inherits from `design_system.colors.schemes.scheme1.control` by default). Note that usage of the `customizations.control.color` setting to customize the form control color is deprecated.
 */
color: { baseType: BaseTypes.CheckoutBrandingColorSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The corner radius used for form controls.
 */
cornerRadius: { baseType: BaseTypes.CheckoutBrandingCornerRadius, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The label position used for form controls.
 */
labelPosition: { baseType: BaseTypes.CheckoutBrandingLabelPosition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingControl", returnType: "CheckoutBrandingControl", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Colors for form controls.
 */
export type CheckoutBrandingControlColorRoles = {
/**
 * The color of accented objects (links and focused state).
 */
accent: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of the background.
 */
background: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of borders.
 */
border: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The decorative color for highlighting specific parts of the user interface.
 */
decorative: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of icons.
 */
icon: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The colors of selected controls.
 */
selected: { baseType: CheckoutBrandingColorRoles, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The color of text.
 */
text: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingControlColorRoles", returnType: "CheckoutBrandingControlColorRoles", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Define the pixel size of corner radius options.
 */
export type CheckoutBrandingCornerRadiusVariables = {
/**
 * The value in pixels for base corner radii. Example: 5.
 */
base: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The value in pixels for large corner radii. Example: 10.
 */
large: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The value in pixels for small corner radii. Example: 3.
 */
small: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingCornerRadiusVariables", returnType: "CheckoutBrandingCornerRadiusVariables", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A custom font.
 */
export type CheckoutBrandingCustomFont = {
/**
 * Globally unique ID reference to the custom font file.
 */
genericFileId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The font sources.
 */
sources: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The font weight.
 */
weight: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingCustomFont", returnType: "CheckoutBrandingCustomFont", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CheckoutBrandingFont

/**
 * The customizations that apply to specific components or areas of the user interface.
 */
export type CheckoutBrandingCustomizations = {
/**
 * The customizations for the breadcrumbs that represent a buyer's journey to the checkout.
 */
buyerJourney: { baseType: CheckoutBrandingBuyerJourney, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The checkout cart link customizations. For example, by setting the visibility field to `HIDDEN`, you can hide the cart icon in the header for one-page checkout, and the cart link in breadcrumbs in three-page checkout.
 */
cartLink: { baseType: CheckoutBrandingCartLink, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The checkboxes customizations.
 */
checkbox: { baseType: CheckoutBrandingCheckbox, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The choice list customizations.
 */
choiceList: { baseType: CheckoutBrandingChoiceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The content container customizations.
 */
content: { baseType: CheckoutBrandingContent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The form controls customizations.
 */
control: { baseType: CheckoutBrandingControl, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customizations for the page, content, main, and order summary dividers. For example, by setting the borderStyle to `DOTTED`, you can make these dividers render as dotted lines.
 */
divider: { baseType: CheckoutBrandingDividerStyle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The express checkout customizations.
 */
expressCheckout: { baseType: CheckoutBrandingExpressCheckout, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The favicon image.
 */
favicon: { baseType: CheckoutBrandingImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The footer customizations.
 */
footer: { baseType: CheckoutBrandingFooter, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The global customizations.
 */
global: { baseType: CheckoutBrandingGlobal, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The header customizations.
 */
header: { baseType: CheckoutBrandingHeader, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The Heading Level 1 customizations.
 */
headingLevel1: { baseType: CheckoutBrandingHeadingLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The Heading Level 2 customizations.
 */
headingLevel2: { baseType: CheckoutBrandingHeadingLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The Heading Level 3 customizations.
 */
headingLevel3: { baseType: CheckoutBrandingHeadingLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The main area customizations.
 */
main: { baseType: CheckoutBrandingMain, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The merchandise thumbnails customizations.
 */
merchandiseThumbnail: { baseType: CheckoutBrandingMerchandiseThumbnail, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The order summary customizations.
 */
orderSummary: { baseType: CheckoutBrandingOrderSummary, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The primary buttons customizations.
 */
primaryButton: { baseType: CheckoutBrandingButton, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The secondary buttons customizations.
 */
secondaryButton: { baseType: CheckoutBrandingButton, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The selects customizations.
 */
select: { baseType: CheckoutBrandingSelect, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The text fields customizations.
 */
textField: { baseType: CheckoutBrandingTextField, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingCustomizations", returnType: "CheckoutBrandingCustomizations", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The design system allows you to set values that represent specific attributes
 * of your brand like color and font. These attributes are used throughout the user
 * interface. This brings consistency and allows you to easily make broad design changes.
 */
export type CheckoutBrandingDesignSystem = {
/**
 * The color settings for global colors and color schemes.
 */
colors: { baseType: CheckoutBrandingColors, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The corner radius variables.
 */
cornerRadius: { baseType: CheckoutBrandingCornerRadiusVariables, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The typography.
 */
typography: { baseType: CheckoutBrandingTypography, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingDesignSystem", returnType: "CheckoutBrandingDesignSystem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The customizations for the page, content, main, and order summary dividers.
 */
export type CheckoutBrandingDividerStyle = {
/**
 * The border style for the divider.
 */
borderStyle: { baseType: BaseTypes.CheckoutBrandingBorderStyle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The border width for the divider.
 */
borderWidth: { baseType: BaseTypes.CheckoutBrandingBorderWidth, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingDividerStyle", returnType: "CheckoutBrandingDividerStyle", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The Express Checkout customizations.
 */
export type CheckoutBrandingExpressCheckout = {
/**
 * The Express Checkout buttons customizations.
 */
button: { baseType: CheckoutBrandingExpressCheckoutButton, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingExpressCheckout", returnType: "CheckoutBrandingExpressCheckout", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The Express Checkout button customizations.
 */
export type CheckoutBrandingExpressCheckoutButton = {
/**
 * The corner radius used for the Express Checkout buttons.
 */
cornerRadius: { baseType: BaseTypes.CheckoutBrandingCornerRadius, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingExpressCheckoutButton", returnType: "CheckoutBrandingExpressCheckoutButton", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A font.
 */
export type CheckoutBrandingFont = {
/**
 * The font sources.
 */
sources: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The font weight.
 */
weight: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }
}

/**
 * A font group. To learn more about updating fonts, refer to the
 * [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert)
 * mutation and the checkout branding [tutorial](https://shopify.dev/docs/apps/checkout/styling).
 */
export type CheckoutBrandingFontGroup = {
/**
 * The base font.
 */
base: { members: { CheckoutBrandingCustomFont: CheckoutBrandingCustomFont; CheckoutBrandingShopifyFont: CheckoutBrandingShopifyFont }, fields: { sources: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; weight: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The bold font.
 */
bold: { members: { CheckoutBrandingCustomFont: CheckoutBrandingCustomFont; CheckoutBrandingShopifyFont: CheckoutBrandingShopifyFont }, fields: { sources: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; weight: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The font loading strategy.
 */
loadingStrategy: { baseType: BaseTypes.CheckoutBrandingFontLoadingStrategy, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The font group name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingFontGroup", returnType: "CheckoutBrandingFontGroup", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The font size.
 */
export type CheckoutBrandingFontSize = {
/**
 * The base font size.
 */
base: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The scale ratio used to derive all font sizes such as small and large.
 */
ratio: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingFontSize", returnType: "CheckoutBrandingFontSize", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A container for the footer section customizations.
 */
export type CheckoutBrandingFooter = {
/**
 * The footer alignment.
 */
alignment: { baseType: BaseTypes.CheckoutBrandingFooterAlignment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The selected color scheme of the footer container.
 */
colorScheme: { baseType: BaseTypes.CheckoutBrandingColorSchemeSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The footer content settings.
 */
content: { baseType: CheckoutBrandingFooterContent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The divided setting.
 */
divided: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The padding of the footer container.
 */
padding: { baseType: BaseTypes.CheckoutBrandingSpacingKeyword, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The footer position.
 */
position: { baseType: BaseTypes.CheckoutBrandingFooterPosition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingFooter", returnType: "CheckoutBrandingFooter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The footer content customizations.
 */
export type CheckoutBrandingFooterContent = {
/**
 * The visibility settings for footer content.
 */
visibility: { baseType: BaseTypes.CheckoutBrandingVisibility, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingFooterContent", returnType: "CheckoutBrandingFooterContent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The global customizations.
 */
export type CheckoutBrandingGlobal = {
/**
 * The global corner radius setting that overrides all other [corner radius](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius)
 * customizations.
 */
cornerRadius: { baseType: BaseTypes.CheckoutBrandingGlobalCornerRadius, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The global typography customizations.
 */
typography: { baseType: CheckoutBrandingTypographyStyleGlobal, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingGlobal", returnType: "CheckoutBrandingGlobal", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The header customizations.
 */
export type CheckoutBrandingHeader = {
/**
 * The header alignment.
 */
alignment: { baseType: BaseTypes.CheckoutBrandingHeaderAlignment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The background image of the header.
 */
banner: { baseType: CheckoutBrandingImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The cart link customizations for 1-page checkout. This field allows to customize the cart icon that renders by default on 1-page checkout.
 */
cartLink: { baseType: CheckoutBrandingHeaderCartLink, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The selected color scheme of the header container.
 */
colorScheme: { baseType: BaseTypes.CheckoutBrandingColorSchemeSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The divided setting.
 */
divided: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The store logo.
 */
logo: { baseType: CheckoutBrandingLogo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The padding of the header container.
 */
padding: { baseType: BaseTypes.CheckoutBrandingSpacingKeyword, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The header position.
 */
position: { baseType: BaseTypes.CheckoutBrandingHeaderPosition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingHeader", returnType: "CheckoutBrandingHeader", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The header cart link customizations.
 */
export type CheckoutBrandingHeaderCartLink = {
/**
 * The content type for the header back to cart link in 1-page checkout. Setting this to image will render the custom image provided using the image field on the header cart_link object. If no image is provided, the default cart icon will be used.
 */
contentType: { baseType: BaseTypes.CheckoutBrandingCartLinkContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The image that's used for the header back to cart link in 1-page checkout when the content type is set to image.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingHeaderCartLink", returnType: "CheckoutBrandingHeaderCartLink", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The heading level customizations.
 */
export type CheckoutBrandingHeadingLevel = {
/**
 * The typography customizations used for headings.
 */
typography: { baseType: CheckoutBrandingTypographyStyle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingHeadingLevel", returnType: "CheckoutBrandingHeadingLevel", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A checkout branding image.
 */
export type CheckoutBrandingImage = {
/**
 * The image details.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingImage", returnType: "CheckoutBrandingImage", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The store logo customizations.
 */
export type CheckoutBrandingLogo = {
/**
 * The logo image.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The maximum width of the logo.
 */
maxWidth: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The visibility of the logo.
 */
visibility: { baseType: BaseTypes.CheckoutBrandingVisibility, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingLogo", returnType: "CheckoutBrandingLogo", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The main container customizations.
 */
export type CheckoutBrandingMain = {
/**
 * The background image of the main container.
 */
backgroundImage: { baseType: CheckoutBrandingImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The selected color scheme of the main container.
 */
colorScheme: { baseType: BaseTypes.CheckoutBrandingColorSchemeSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The main container's divider style and visibility.
 */
divider: { baseType: CheckoutBrandingContainerDivider, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The settings for the main sections.
 */
section: { baseType: CheckoutBrandingMainSection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingMain", returnType: "CheckoutBrandingMain", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The main sections customizations.
 */
export type CheckoutBrandingMainSection = {
/**
 * The background style of the main sections.
 */
background: { baseType: BaseTypes.CheckoutBrandingBackground, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The border for the main sections.
 */
border: { baseType: BaseTypes.CheckoutBrandingSimpleBorder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The border style of the main sections.
 */
borderStyle: { baseType: BaseTypes.CheckoutBrandingBorderStyle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The border width of the main sections.
 */
borderWidth: { baseType: BaseTypes.CheckoutBrandingBorderWidth, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The selected color scheme of the main sections.
 */
colorScheme: { baseType: BaseTypes.CheckoutBrandingColorSchemeSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The corner radius of the main sections.
 */
cornerRadius: { baseType: BaseTypes.CheckoutBrandingCornerRadius, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The padding of the main sections.
 */
padding: { baseType: BaseTypes.CheckoutBrandingSpacingKeyword, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shadow of the main sections.
 */
shadow: { baseType: BaseTypes.CheckoutBrandingShadow, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingMainSection", returnType: "CheckoutBrandingMainSection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The merchandise thumbnails customizations.
 */
export type CheckoutBrandingMerchandiseThumbnail = {
/**
 * The border used for merchandise thumbnails.
 */
border: { baseType: BaseTypes.CheckoutBrandingSimpleBorder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The corner radius used for merchandise thumbnails.
 */
cornerRadius: { baseType: BaseTypes.CheckoutBrandingCornerRadius, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingMerchandiseThumbnail", returnType: "CheckoutBrandingMerchandiseThumbnail", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The order summary customizations.
 */
export type CheckoutBrandingOrderSummary = {
/**
 * The background image of the order summary container.
 */
backgroundImage: { baseType: CheckoutBrandingImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The selected color scheme of the order summary container.
 */
colorScheme: { baseType: BaseTypes.CheckoutBrandingColorSchemeSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The order summary container's divider style and visibility.
 */
divider: { baseType: CheckoutBrandingContainerDivider, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The settings for the order summary sections.
 */
section: { baseType: CheckoutBrandingOrderSummarySection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingOrderSummary", returnType: "CheckoutBrandingOrderSummary", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The order summary sections customizations.
 */
export type CheckoutBrandingOrderSummarySection = {
/**
 * The background style of the order summary sections.
 */
background: { baseType: BaseTypes.CheckoutBrandingBackground, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The border for the order summary sections.
 */
border: { baseType: BaseTypes.CheckoutBrandingSimpleBorder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The border style of the order summary sections.
 */
borderStyle: { baseType: BaseTypes.CheckoutBrandingBorderStyle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The border width of the order summary sections.
 */
borderWidth: { baseType: BaseTypes.CheckoutBrandingBorderWidth, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The selected color scheme of the order summary sections.
 */
colorScheme: { baseType: BaseTypes.CheckoutBrandingColorSchemeSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The corner radius of the order summary sections.
 */
cornerRadius: { baseType: BaseTypes.CheckoutBrandingCornerRadius, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The padding of the order summary sections.
 */
padding: { baseType: BaseTypes.CheckoutBrandingSpacingKeyword, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shadow of the order summary sections.
 */
shadow: { baseType: BaseTypes.CheckoutBrandingShadow, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingOrderSummarySection", returnType: "CheckoutBrandingOrderSummarySection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The selects customizations.
 */
export type CheckoutBrandingSelect = {
/**
 * The border used for selects.
 */
border: { baseType: BaseTypes.CheckoutBrandingBorder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The typography customizations used for selects.
 */
typography: { baseType: CheckoutBrandingTypographyStyle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingSelect", returnType: "CheckoutBrandingSelect", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A Shopify font.
 */
export type CheckoutBrandingShopifyFont = {
/**
 * The font sources.
 */
sources: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The font weight.
 */
weight: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingShopifyFont", returnType: "CheckoutBrandingShopifyFont", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CheckoutBrandingFont

/**
 * The text fields customizations.
 */
export type CheckoutBrandingTextField = {
/**
 * The border used for text fields.
 */
border: { baseType: BaseTypes.CheckoutBrandingBorder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The typography customizations used for text fields.
 */
typography: { baseType: CheckoutBrandingTypographyStyle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingTextField", returnType: "CheckoutBrandingTextField", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The typography settings used for checkout-related text. Use these settings to customize the
 * font family and size for primary and secondary text elements.
 *
 * Refer to the [typography tutorial](https://shopify.dev/docs/apps/checkout/styling/customize-typography)
 * for further information on typography customization.
 */
export type CheckoutBrandingTypography = {
/**
 * A font group used for most components such as text, buttons and form controls.
 */
primary: { baseType: CheckoutBrandingFontGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A font group used for heading components by default.
 */
secondary: { baseType: CheckoutBrandingFontGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The font size design system (base size in pixels and scaling between different sizes).
 */
size: { baseType: CheckoutBrandingFontSize, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingTypography", returnType: "CheckoutBrandingTypography", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The typography customizations.
 */
export type CheckoutBrandingTypographyStyle = {
/**
 * The font.
 */
font: { baseType: BaseTypes.CheckoutBrandingTypographyFont, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The kerning.
 */
kerning: { baseType: BaseTypes.CheckoutBrandingTypographyKerning, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The letter case.
 */
letterCase: { baseType: BaseTypes.CheckoutBrandingTypographyLetterCase, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The font size.
 */
size: { baseType: BaseTypes.CheckoutBrandingTypographySize, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The font weight.
 */
weight: { baseType: BaseTypes.CheckoutBrandingTypographyWeight, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingTypographyStyle", returnType: "CheckoutBrandingTypographyStyle", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The global typography customizations.
 */
export type CheckoutBrandingTypographyStyleGlobal = {
/**
 * The kerning.
 */
kerning: { baseType: BaseTypes.CheckoutBrandingTypographyKerning, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The letter case.
 */
letterCase: { baseType: BaseTypes.CheckoutBrandingTypographyLetterCase, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CheckoutBrandingTypographyStyleGlobal", returnType: "CheckoutBrandingTypographyStyleGlobal", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `checkoutBrandingUpsert` mutation.
 */
export type CheckoutBrandingUpsertPayload = {
/**
 * Returns the new checkout branding settings.
 */
checkoutBranding: { baseType: CheckoutBranding, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CheckoutBrandingUpsertUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CheckoutBrandingUpsertPayload", returnType: "CheckoutBrandingUpsertPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CheckoutBrandingUpsert`.
 */
export type CheckoutBrandingUpsertUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CheckoutBrandingUpsertUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CheckoutBrandingUpsertUserError", returnType: "CheckoutBrandingUpsertUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A checkout profile defines the branding settings and the UI extensions for a store's checkout. A checkout profile could be published or draft. A store might have at most one published checkout profile, which is used to render their live checkout. The store could also have multiple draft profiles that were created, previewed, and published using the admin checkout editor.
 */
export type CheckoutProfile = {
/**
 * The date and time when the checkout profile was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the checkout profile was last edited.
 */
editedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the checkout profile is published or not.
 */
isPublished: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The profile name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the checkout profile Thank You Page and Order Status Page are actively using extensibility or not.
 */
typOspPagesActive: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the checkout profile was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CheckoutProfile", returnType: "CheckoutProfile", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple CheckoutProfiles.
 */
export type CheckoutProfileConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CheckoutProfileEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CheckoutProfileEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CheckoutProfile, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CheckoutProfileConnection", returnType: "CheckoutProfileConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CheckoutProfile and a cursor during pagination.
 */
export type CheckoutProfileEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CheckoutProfileEdge.
 */
node: { baseType: CheckoutProfile, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CheckoutProfileEdge", returnType: "CheckoutProfileEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Collection = {
/**
 * The number of
 * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that a resource is published to, without
 * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
 */
availablePublicationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A single-line, text-only description of the collection, stripped of any HTML tags and formatting that were included in the description.
 */
description: { baseType: BaseTypes.String, arguments: { truncateAt?: BaseTypes.Int | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of the collection, including any HTML tags and formatting. This content is typically displayed to customers, such as on an online store, depending on the theme.
 */
descriptionHtml: { baseType: BaseTypes.HTML, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Information about the collection that's provided through resource feedback.
 */
feedback: { baseType: ResourceFeedback, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A unique string that identifies the collection. If a handle isn't specified when a collection is created, it's automatically generated from the collection's original title, and typically includes words from the title separated by hyphens. For example, a collection that was created with the title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.
 *
 * If the title is changed, the handle doesn't automatically change.
 *
 * The handle can be used in themes by the Liquid templating language to refer to the collection, but using the ID is preferred because it never changes.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the collection includes the specified product.
 */
hasProduct: { baseType: BaseTypes.Boolean, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The image associated with the collection.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The products that are included in the collection.
 */
products: { baseType: ProductConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.ProductCollectionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of products in the collection.
 */
productsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of
 * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that a resource is published to, without
 * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
 */
publicationCount: { baseType: BaseTypes.Int, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The channels where the collection is published.
 */
publications: { baseType: CollectionPublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to a specific channel.
 */
publishedOnChannel: { baseType: BaseTypes.Boolean, arguments: { channelId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to a
 * [channel](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel).
 * For example, the resource might be published to the online store channel.
 */
publishedOnCurrentChannel: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to the app's
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 * For example, the resource might be published to the app's online store channel.
 */
publishedOnCurrentPublication: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to a specified
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 */
publishedOnPublication: { baseType: BaseTypes.Boolean, arguments: { publicationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of resources that are published to a
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 */
resourcePublications: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of
 * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that a resource is published to, without
 * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
 */
resourcePublicationsCount: { baseType: Count, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of resources that are either published or staged to be published to a
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 */
resourcePublicationsV2: { baseType: ResourcePublicationV2Connection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; catalogType?: BaseTypes.CatalogType | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * For a smart (automated) collection, specifies the rules that determine whether a product is included.
 */
ruleSet: { baseType: CollectionRuleSet, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * If the default SEO fields for page title and description have been modified, contains the modified information.
 */
seo: { baseType: SEO, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order in which the products in the collection are displayed by default in the Shopify admin and in sales channels, such as an online store.
 */
sortOrder: { baseType: BaseTypes.CollectionSortOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Storefront GraphQL API ID of the `Collection`.
 *
 * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
 */
storefrontId: { baseType: BaseTypes.StorefrontID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The suffix of the Liquid template being used to show the collection in an online store. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid` template.
 */
templateSuffix: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the collection. It's displayed in the Shopify admin and is typically displayed in sales channels, such as an online store.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of channels that the resource is not published to.
 */
unpublishedChannels: { baseType: ChannelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that the resource isn't published to.
 */
unpublishedPublications: { baseType: PublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Collection", returnType: "Collection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Node & Publishable

/**
 * Return type for `collectionAddProducts` mutation.
 */
export type CollectionAddProductsPayload = {
/**
 * The updated collection. Returns `null` if an error is raised.
 */
collection: { baseType: Collection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CollectionAddProductsPayload", returnType: "CollectionAddProductsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `collectionAddProductsV2` mutation.
 */
export type CollectionAddProductsV2Payload = {
/**
 * The asynchronous job adding the products.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CollectionAddProductsV2UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CollectionAddProductsV2Payload", returnType: "CollectionAddProductsV2Payload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CollectionAddProductsV2`.
 */
export type CollectionAddProductsV2UserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CollectionAddProductsV2UserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CollectionAddProductsV2UserError", returnType: "CollectionAddProductsV2UserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An auto-generated type for paginating through multiple Collections.
 */
export type CollectionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CollectionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CollectionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Collection, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CollectionConnection", returnType: "CollectionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `collectionCreate` mutation.
 */
export type CollectionCreatePayload = {
/**
 * The collection that has been created.
 */
collection: { baseType: Collection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CollectionCreatePayload", returnType: "CollectionCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `collectionDelete` mutation.
 */
export type CollectionDeletePayload = {
/**
 * The ID of the collection that was deleted. Returns `null` if the collection doesn't exist.
 */
deletedCollectionId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shop associated with the collection.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CollectionDeletePayload", returnType: "CollectionDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Collection and a cursor during pagination.
 */
export type CollectionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CollectionEdge.
 */
node: { baseType: Collection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CollectionEdge", returnType: "CollectionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the publications where a collection is published.
 */
export type CollectionPublication = {
/**
 * The channel where the collection will be published.
 */
channel: { baseType: Channel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The collection to be published on the publication.
 */
collection: { baseType: Collection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the publication is published or not.
 */
isPublished: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The publication where the collection will be published.
 */
publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date that the publication was or is going to be published.
 */
publishDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CollectionPublication", returnType: "CollectionPublication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple CollectionPublications.
 */
export type CollectionPublicationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CollectionPublicationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CollectionPublicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CollectionPublication, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CollectionPublicationConnection", returnType: "CollectionPublicationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CollectionPublication and a cursor during pagination.
 */
export type CollectionPublicationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CollectionPublicationEdge.
 */
node: { baseType: CollectionPublication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CollectionPublicationEdge", returnType: "CollectionPublicationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `collectionPublish` mutation.
 */
export type CollectionPublishPayload = {
/**
 * The published collection.
 */
collection: { baseType: Collection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The channels where the collection has been published.
 */
collectionPublications: { baseType: CollectionPublication, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The shop associated with the collection.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CollectionPublishPayload", returnType: "CollectionPublishPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `collectionRemoveProducts` mutation.
 */
export type CollectionRemoveProductsPayload = {
/**
 * The asynchronous job removing the products.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CollectionRemoveProductsPayload", returnType: "CollectionRemoveProductsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `collectionReorderProducts` mutation.
 */
export type CollectionReorderProductsPayload = {
/**
 * The asynchronous job reordering the products.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CollectionReorderProductsPayload", returnType: "CollectionReorderProductsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents at rule that's used to assign products to a collection.
 */
export type CollectionRule = {
/**
 * The attribute that the rule focuses on. For example, `title` or `product_type`.
 */
column: { baseType: BaseTypes.CollectionRuleColumn, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value that the operator is applied to. For example, `Hats`.
 */
condition: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value that the operator is applied to.
 */
conditionObject: { members: { CollectionRuleMetafieldCondition: CollectionRuleMetafieldCondition; CollectionRuleProductCategoryCondition: CollectionRuleProductCategoryCondition; CollectionRuleTextCondition: CollectionRuleTextCondition }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
 */
relation: { baseType: BaseTypes.CollectionRuleRelation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CollectionRule", returnType: "CollectionRule", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Specifies object for the condition of the rule.
 */
export type CollectionRuleConditionObject = CollectionRuleMetafieldCondition | CollectionRuleProductCategoryCondition | CollectionRuleTextCondition

/**
 * This object defines all columns and allowed relations that can be used in rules for smart collections to automatically include the matching products.
 */
export type CollectionRuleConditions = {
/**
 * Allowed relations of the rule.
 */
allowedRelations: { baseType: BaseTypes.CollectionRuleRelation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Most commonly used relation for this rule.
 */
defaultRelation: { baseType: BaseTypes.CollectionRuleRelation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Additional attributes defining the rule.
 */
ruleObject: { members: { CollectionRuleMetafieldCondition: CollectionRuleMetafieldCondition }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Type of the rule.
 */
ruleType: { baseType: BaseTypes.CollectionRuleColumn, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CollectionRuleConditions", returnType: "CollectionRuleConditions", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Specifies object with additional rule attributes.
 */
export type CollectionRuleConditionsRuleObject = CollectionRuleMetafieldCondition

/**
 * Identifies a metafield definition used as a rule for the smart collection.
 */
export type CollectionRuleMetafieldCondition = {
/**
 * The metafield definition associated with the condition.
 */
metafieldDefinition: { baseType: MetafieldDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CollectionRuleMetafieldCondition", returnType: "CollectionRuleMetafieldCondition", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Specifies the condition for a Product Category field.
 */
export type CollectionRuleProductCategoryCondition = {
/**
 * The value of the condition.
 */
value: { baseType: ProductTaxonomyNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CollectionRuleProductCategoryCondition", returnType: "CollectionRuleProductCategoryCondition", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The set of rules that are used to determine which products are included in the collection.
 */
export type CollectionRuleSet = {
/**
 * Whether products must match any or all of the rules to be included in the collection.
 * If true, then products must match at least one of the rules to be included in the collection.
 * If false, then products must match all of the rules to be included in the collection.
 */
appliedDisjunctively: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The rules used to assign products to the collection.
 */
rules: { baseType: CollectionRule, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CollectionRuleSet", returnType: "CollectionRuleSet", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Specifies the condition for a text field.
 */
export type CollectionRuleTextCondition = {
/**
 * The value of the condition.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CollectionRuleTextCondition", returnType: "CollectionRuleTextCondition", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `collectionUnpublish` mutation.
 */
export type CollectionUnpublishPayload = {
/**
 * The collection that has been unpublished.
 */
collection: { baseType: Collection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shop associated with the collection.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CollectionUnpublishPayload", returnType: "CollectionUnpublishPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `collectionUpdate` mutation.
 */
export type CollectionUpdatePayload = {
/**
 * The updated collection.
 */
collection: { baseType: Collection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The asynchronous job updating the products based on the new rule set.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CollectionUpdatePayload", returnType: "CollectionUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A combined listing of products.
 */
export type CombinedListing = {
/**
 * A list of child products in the combined listing.
 */
combinedListingChildren: { baseType: CombinedListingChildConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The parent product.
 */
parentProduct: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CombinedListing", returnType: "CombinedListing", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A child of a combined listing.
 */
export type CombinedListingChild = {
/**
 * The parent variant.
 */
parentVariant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The child product.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CombinedListingChild", returnType: "CombinedListingChild", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple CombinedListingChildren.
 */
export type CombinedListingChildConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CombinedListingChildEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CombinedListingChildEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CombinedListingChild, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CombinedListingChildConnection", returnType: "CombinedListingChildConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CombinedListingChild and a cursor during pagination.
 */
export type CombinedListingChildEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CombinedListingChildEdge.
 */
node: { baseType: CombinedListingChild, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CombinedListingChildEdge", returnType: "CombinedListingChildEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `combinedListingUpdate` mutation.
 */
export type CombinedListingUpdatePayload = {
/**
 * The parent product.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CombinedListingUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CombinedListingUpdatePayload", returnType: "CombinedListingUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CombinedListingUpdate`.
 */
export type CombinedListingUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CombinedListingUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CombinedListingUpdateUserError", returnType: "CombinedListingUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Comment events are generated by staff members of a shop.
 * They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
 */
export type CommentEvent = {
/**
 * The name of the app that created the event.
 */
appTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The attachments associated with the comment event.
 */
attachments: { baseType: CommentEventAttachment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the event was created by an app.
 */
attributeToApp: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the event was caused by an admin user.
 */
attributeToUser: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the user that authored the comment event.
 */
author: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the comment event can be deleted. If true, then the comment event can be deleted.
 */
canDelete: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the comment event can be edited. If true, then the comment event can be edited.
 */
canEdit: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the event was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the event is critical.
 */
criticalAlert: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the comment event has been edited. If true, then the comment event has been edited.
 */
edited: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The object reference associated with the comment event. For example, a product or discount).
 */
embed: { members: { Customer: Customer; DraftOrder: DraftOrder; Order: Order; Product: Product; ProductVariant: ProductVariant }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Human readable text that describes the event.
 */
message: { baseType: BaseTypes.FormattedString, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The raw body of the comment event.
 */
rawMessage: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The parent subject to which the comment event belongs.
 */
subject: { members: { Company: Company; CompanyLocation: CompanyLocation; Customer: Customer; DraftOrder: DraftOrder; Order: Order; PriceRule: PriceRule }, fields: { hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CommentEvent", returnType: "CommentEvent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Event & Node

/**
 * A file attachment associated to a comment event.
 */
export type CommentEventAttachment = {
/**
 * The file extension of the comment event attachment, indicating the file format.
 */
fileExtension: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The image attached to the comment event.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The filename of the comment event attachment.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The size of the attachment.
 */
size: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL of the attachment.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CommentEventAttachment", returnType: "CommentEventAttachment", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The main embed of a comment event.
 */
export type CommentEventEmbed = Customer | DraftOrder | Order | Product | ProductVariant

/**
 * The subject line of a comment event.
 */
export type CommentEventSubject = {
/**
 * Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companiesDelete` mutation.
 */
export type CompaniesDeletePayload = {
/**
 * A list of IDs of the deleted companies.
 */
deletedCompanyIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompaniesDeletePayload", returnType: "CompaniesDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents information about a company which is also a customer of the shop.
 */
export type Company = {
/**
 * The number of contacts that belong to the company.
 */
contactCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of roles for the company contacts.
 */
contactRoles: { baseType: CompanyContactRoleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CompanyContactRoleSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of contacts in the company.
 */
contacts: { baseType: CompanyContactConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CompanyContactSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of contacts that belong to the company.
 */
contactsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was created in Shopify.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company became the customer.
 */
customerSince: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID.
 */
defaultCursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The role proposed by default for a contact at the company.
 */
defaultRole: { baseType: CompanyContactRole, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of the company's draft orders.
 */
draftOrders: { baseType: DraftOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.DraftOrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The paginated list of events associated with the host subject.
 */
events: { baseType: EventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.EventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A unique externally-supplied ID for the company.
 */
externalId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the merchant added a timeline comment to the company.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The lifetime duration of the company, since it became a customer of the shop. Examples: `2 days`, `3 months`, `1 year`.
 */
lifetimeDuration: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of locations in the company.
 */
locations: { baseType: CompanyLocationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CompanyLocationSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of locations that belong to the company.
 */
locationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The main contact for the company.
 */
mainContact: { baseType: CompanyContact, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the company.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A note about the company.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of the company's orders.
 */
orders: { baseType: OrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.OrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of orders placed for this company, across all its locations.
 */
ordersCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount spent by this company, across all its locations.
 */
totalSpent: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was last modified.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Company", returnType: "Company", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CommentEventSubject & HasEvents & HasMetafieldDefinitions & HasMetafields & Navigable & Node

/**
 * Represents a billing or shipping address for a company location.
 */
export type CompanyAddress = {
/**
 * The first line of the address. Typically the street address or PO Box number.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The second line of the address. Typically the number of the apartment, suite, or unit.
 */
address2: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the city, district, village, or town.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the company.
 */
companyName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the country.
 */
country: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The two-letter code for the country of the address.
 * For example, US.
 */
countryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The first name of the recipient.
 */
firstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The formatted version of the address.
 */
formattedAddress: { baseType: BaseTypes.String, arguments: { withCompanyName?: BaseTypes.Boolean | null; withName?: BaseTypes.Boolean | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A comma-separated list of the values for city, province, and country.
 */
formattedArea: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The last name of the recipient.
 */
lastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A unique phone number for the customer.
 * Formatted using E.164 standard. For example, _+16135551111_.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The region of the address, such as the province, state, or district.
 */
province: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The identity of the recipient e.g. 'Receiving Department'.
 */
recipient: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The zip or postal code of the address.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The alphanumeric code for the region.
 * For example, ON.
 */
zoneCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CompanyAddress", returnType: "CompanyAddress", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `companyAddressDelete` mutation.
 */
export type CompanyAddressDeletePayload = {
/**
 * The ID of the deleted address.
 */
deletedAddressId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyAddressDeletePayload", returnType: "CompanyAddressDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyAssignCustomerAsContact` mutation.
 */
export type CompanyAssignCustomerAsContactPayload = {
/**
 * The created company contact.
 */
companyContact: { baseType: CompanyContact, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyAssignCustomerAsContactPayload", returnType: "CompanyAssignCustomerAsContactPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyAssignMainContact` mutation.
 */
export type CompanyAssignMainContactPayload = {
/**
 * The company for which the main contact is assigned.
 */
company: { baseType: Company, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyAssignMainContactPayload", returnType: "CompanyAssignMainContactPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Companies.
 */
export type CompanyConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CompanyEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CompanyEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Company, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyConnection", returnType: "CompanyConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer).
 */
export type CompanyContact = {
/**
 * The company to which the contact belongs.
 */
company: { baseType: Company, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was created at Shopify.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer associated to this contact.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of draft orders for the company contact.
 */
draftOrders: { baseType: DraftOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.DraftOrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the contact is the main contact of the company.
 */
isMainContact: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The lifetime duration of the company contact, since its creation date on Shopify. Examples: `1 year`, `2 months`, `3 days`.
 */
lifetimeDuration: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The company contact's locale (language).
 */
locale: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of orders for the company contact.
 */
orders: { baseType: OrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.OrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of roles assigned to this company contact.
 */
roleAssignments: { baseType: CompanyContactRoleAssignmentConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CompanyContactRoleAssignmentSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The company contact's job title.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyContact", returnType: "CompanyContact", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `companyContactAssignRole` mutation.
 */
export type CompanyContactAssignRolePayload = {
/**
 * The company contact role assignment.
 */
companyContactRoleAssignment: { baseType: CompanyContactRoleAssignment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyContactAssignRolePayload", returnType: "CompanyContactAssignRolePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyContactAssignRoles` mutation.
 */
export type CompanyContactAssignRolesPayload = {
/**
 * A list of newly created assignments of company contacts to a company location.
 */
roleAssignments: { baseType: CompanyContactRoleAssignment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyContactAssignRolesPayload", returnType: "CompanyContactAssignRolesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple CompanyContacts.
 */
export type CompanyContactConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CompanyContactEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CompanyContactEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CompanyContact, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyContactConnection", returnType: "CompanyContactConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyContactCreate` mutation.
 */
export type CompanyContactCreatePayload = {
/**
 * The created company contact.
 */
companyContact: { baseType: CompanyContact, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyContactCreatePayload", returnType: "CompanyContactCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyContactDelete` mutation.
 */
export type CompanyContactDeletePayload = {
/**
 * The ID of the deleted company contact.
 */
deletedCompanyContactId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyContactDeletePayload", returnType: "CompanyContactDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CompanyContact and a cursor during pagination.
 */
export type CompanyContactEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CompanyContactEdge.
 */
node: { baseType: CompanyContact, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyContactEdge", returnType: "CompanyContactEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyContactRemoveFromCompany` mutation.
 */
export type CompanyContactRemoveFromCompanyPayload = {
/**
 * The ID of the removed company contact.
 */
removedCompanyContactId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyContactRemoveFromCompanyPayload", returnType: "CompanyContactRemoveFromCompanyPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyContactRevokeRole` mutation.
 */
export type CompanyContactRevokeRolePayload = {
/**
 * The role assignment that was revoked.
 */
revokedCompanyContactRoleAssignmentId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyContactRevokeRolePayload", returnType: "CompanyContactRevokeRolePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyContactRevokeRoles` mutation.
 */
export type CompanyContactRevokeRolesPayload = {
/**
 * A list of role assignment IDs that were removed from the company contact.
 */
revokedRoleAssignmentIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyContactRevokeRolesPayload", returnType: "CompanyContactRevokeRolesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The role for a [company contact](https://shopify.dev/api/admin-graphql/latest/objects/companycontact).
 */
export type CompanyContactRole = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of a role.
 * For example, `admin` or `buyer`.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A note for the role.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CompanyContactRole", returnType: "CompanyContactRole", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The CompanyContactRoleAssignment describes the company and location associated to a company contact's role.
 */
export type CompanyContactRoleAssignment = {
/**
 * The company this role assignment belongs to.
 */
company: { baseType: Company, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The company contact for whom this role is assigned.
 */
companyContact: { baseType: CompanyContact, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The company location to which the role is assigned.
 */
companyLocation: { baseType: CompanyLocation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The role that's assigned to the company contact.
 */
role: { baseType: CompanyContactRole, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyContactRoleAssignment", returnType: "CompanyContactRoleAssignment", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple CompanyContactRoleAssignments.
 */
export type CompanyContactRoleAssignmentConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CompanyContactRoleAssignmentEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CompanyContactRoleAssignmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CompanyContactRoleAssignment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyContactRoleAssignmentConnection", returnType: "CompanyContactRoleAssignmentConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CompanyContactRoleAssignment and a cursor during pagination.
 */
export type CompanyContactRoleAssignmentEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CompanyContactRoleAssignmentEdge.
 */
node: { baseType: CompanyContactRoleAssignment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyContactRoleAssignmentEdge", returnType: "CompanyContactRoleAssignmentEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple CompanyContactRoles.
 */
export type CompanyContactRoleConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CompanyContactRoleEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CompanyContactRoleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CompanyContactRole, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyContactRoleConnection", returnType: "CompanyContactRoleConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CompanyContactRole and a cursor during pagination.
 */
export type CompanyContactRoleEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CompanyContactRoleEdge.
 */
node: { baseType: CompanyContactRole, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyContactRoleEdge", returnType: "CompanyContactRoleEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyContactSendWelcomeEmail` mutation.
 */
export type CompanyContactSendWelcomeEmailPayload = {
/**
 * The company contact to whom a welcome email was sent.
 */
companyContact: { baseType: CompanyContact, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyContactSendWelcomeEmailPayload", returnType: "CompanyContactSendWelcomeEmailPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyContactUpdate` mutation.
 */
export type CompanyContactUpdatePayload = {
/**
 * The updated company contact.
 */
companyContact: { baseType: CompanyContact, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyContactUpdatePayload", returnType: "CompanyContactUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyContactsDelete` mutation.
 */
export type CompanyContactsDeletePayload = {
/**
 * The list of IDs of the deleted company contacts.
 */
deletedCompanyContactIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyContactsDeletePayload", returnType: "CompanyContactsDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyCreate` mutation.
 */
export type CompanyCreatePayload = {
/**
 * The created company.
 */
company: { baseType: Company, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyCreatePayload", returnType: "CompanyCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyDelete` mutation.
 */
export type CompanyDeletePayload = {
/**
 * The ID of the deleted company.
 */
deletedCompanyId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyDeletePayload", returnType: "CompanyDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Company and a cursor during pagination.
 */
export type CompanyEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CompanyEdge.
 */
node: { baseType: Company, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyEdge", returnType: "CompanyEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location.
 */
export type CompanyLocation = {
/**
 * The address used as billing address for the location.
 */
billingAddress: { baseType: CompanyAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The configuration for the buyer's B2B checkout.
 */
buyerExperienceConfiguration: { baseType: BuyerExperienceConfiguration, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of catalogs associated with the company location.
 */
catalogs: { baseType: CatalogConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of catalogs associated with the company location. Limited to a maximum of 10000.
 */
catalogsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The company that the company location belongs to.
 */
company: { baseType: Company, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was created in Shopify.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location's currency based on the shipping address. If the shipping address is empty, then the value is the shop's primary market.
 */
currency: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID.
 */
defaultCursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of draft orders for the company location.
 */
draftOrders: { baseType: DraftOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.DraftOrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The paginated list of events associated with the host subject.
 */
events: { baseType: EventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.EventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A unique externally-supplied ID for the company location.
 */
externalId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the merchant added a timeline comment to the company location.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the company location is assigned a specific catalog.
 */
inCatalog: { baseType: BaseTypes.Boolean, arguments: { catalogId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The preferred locale of the company location.
 */
locale: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The market that includes the location's shipping address. If the shipping address is empty, then the value is the shop's primary market.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the company location.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A note about the company location.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of orders placed for the location.
 */
orderCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of orders for the company location.
 */
orders: { baseType: OrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.OrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of orders placed for the location.
 */
ordersCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The phone number of the company location.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of roles assigned to the company location.
 */
roleAssignments: { baseType: CompanyContactRoleAssignmentConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CompanyContactRoleAssignmentSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The address used as shipping address for the location.
 */
shippingAddress: { baseType: CompanyAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of tax exemptions applied to the location.
 */
taxExemptions: { baseType: BaseTypes.TaxExemption, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The tax registration ID for the company location.
 */
taxRegistrationId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total amount spent by the location.
 */
totalSpent: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was last modified.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyLocation", returnType: "CompanyLocation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CommentEventSubject & HasEvents & HasMetafieldDefinitions & HasMetafields & Navigable & Node

/**
 * Return type for `companyLocationAssignAddress` mutation.
 */
export type CompanyLocationAssignAddressPayload = {
/**
 * The list of updated addresses on the company location.
 */
addresses: { baseType: CompanyAddress, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyLocationAssignAddressPayload", returnType: "CompanyLocationAssignAddressPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyLocationAssignRoles` mutation.
 */
export type CompanyLocationAssignRolesPayload = {
/**
 * A list of newly created assignments of company contacts to a company location.
 */
roleAssignments: { baseType: CompanyContactRoleAssignment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyLocationAssignRolesPayload", returnType: "CompanyLocationAssignRolesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyLocationAssignTaxExemptions` mutation.
 */
export type CompanyLocationAssignTaxExemptionsPayload = {
/**
 * The updated company location.
 */
companyLocation: { baseType: CompanyLocation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyLocationAssignTaxExemptionsPayload", returnType: "CompanyLocationAssignTaxExemptionsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A list of products with publishing and pricing information associated with company locations.
 */
export type CompanyLocationCatalog = {
/**
 * The company locations associated with the catalog.
 */
companyLocations: { baseType: CompanyLocationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CompanyLocationSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of company locations associated with the catalog.
 */
companyLocationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Most recent catalog operations.
 */
operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The price list associated with the catalog.
 */
priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A group of products and collections that's published to a catalog.
 */
publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of the catalog.
 */
status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the catalog.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyLocationCatalog", returnType: "CompanyLocationCatalog", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Catalog & Node

/**
 * An auto-generated type for paginating through multiple CompanyLocations.
 */
export type CompanyLocationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CompanyLocationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CompanyLocationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CompanyLocation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyLocationConnection", returnType: "CompanyLocationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyLocationCreate` mutation.
 */
export type CompanyLocationCreatePayload = {
/**
 * The created company location.
 */
companyLocation: { baseType: CompanyLocation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyLocationCreatePayload", returnType: "CompanyLocationCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyLocationCreateTaxRegistration` mutation.
 */
export type CompanyLocationCreateTaxRegistrationPayload = {
/**
 * The company location with the created tax registration.
 */
companyLocation: { baseType: CompanyLocation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyLocationCreateTaxRegistrationPayload", returnType: "CompanyLocationCreateTaxRegistrationPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyLocationDelete` mutation.
 */
export type CompanyLocationDeletePayload = {
/**
 * The ID of the deleted company location.
 */
deletedCompanyLocationId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyLocationDeletePayload", returnType: "CompanyLocationDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CompanyLocation and a cursor during pagination.
 */
export type CompanyLocationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CompanyLocationEdge.
 */
node: { baseType: CompanyLocation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CompanyLocationEdge", returnType: "CompanyLocationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyLocationRevokeRoles` mutation.
 */
export type CompanyLocationRevokeRolesPayload = {
/**
 * A list of role assignment IDs that were removed from the company location.
 */
revokedRoleAssignmentIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyLocationRevokeRolesPayload", returnType: "CompanyLocationRevokeRolesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyLocationRevokeTaxExemptions` mutation.
 */
export type CompanyLocationRevokeTaxExemptionsPayload = {
/**
 * The updated company location.
 */
companyLocation: { baseType: CompanyLocation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyLocationRevokeTaxExemptionsPayload", returnType: "CompanyLocationRevokeTaxExemptionsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyLocationRevokeTaxRegistration` mutation.
 */
export type CompanyLocationRevokeTaxRegistrationPayload = {
/**
 * The updated company location.
 */
companyLocation: { baseType: CompanyLocation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyLocationRevokeTaxRegistrationPayload", returnType: "CompanyLocationRevokeTaxRegistrationPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyLocationUpdate` mutation.
 */
export type CompanyLocationUpdatePayload = {
/**
 * The updated company location.
 */
companyLocation: { baseType: CompanyLocation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyLocationUpdatePayload", returnType: "CompanyLocationUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyLocationsDelete` mutation.
 */
export type CompanyLocationsDeletePayload = {
/**
 * A list of IDs of the deleted company locations.
 */
deletedCompanyLocationIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyLocationsDeletePayload", returnType: "CompanyLocationsDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyRevokeMainContact` mutation.
 */
export type CompanyRevokeMainContactPayload = {
/**
 * The company from which the main contact is revoked.
 */
company: { baseType: Company, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyRevokeMainContactPayload", returnType: "CompanyRevokeMainContactPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `companyUpdate` mutation.
 */
export type CompanyUpdatePayload = {
/**
 * The updated company.
 */
company: { baseType: Company, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BusinessCustomerUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CompanyUpdatePayload", returnType: "CompanyUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Details for count of elements.
 */
export type Count = {
/**
 * The count of elements.
 */
count: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The count's precision, or the exactness of the value.
 */
precision: { baseType: BaseTypes.CountPrecision, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Count", returnType: "Count", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The list of all the countries from the combined shipping zones for the shop.
 */
export type CountriesInShippingZones = {
/**
 * The list of all the countries from all the combined shipping zones.
 */
countryCodes: { baseType: BaseTypes.CountryCode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether 'Rest of World' has been defined in any of the shipping zones.
 */
includeRestOfWorld: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CountriesInShippingZones", returnType: "CountriesInShippingZones", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The country-specific harmonized system code and ISO country code for an inventory item.
 */
export type CountryHarmonizedSystemCode = {
/**
 * The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
 */
countryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The country-specific harmonized system code. These are usually longer than 6 digits.
 */
harmonizedSystemCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CountryHarmonizedSystemCode", returnType: "CountryHarmonizedSystemCode", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.
 */
export type CountryHarmonizedSystemCodeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CountryHarmonizedSystemCodeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CountryHarmonizedSystemCodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CountryHarmonizedSystemCode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CountryHarmonizedSystemCodeConnection", returnType: "CountryHarmonizedSystemCodeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.
 */
export type CountryHarmonizedSystemCodeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CountryHarmonizedSystemCodeEdge.
 */
node: { baseType: CountryHarmonizedSystemCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CountryHarmonizedSystemCodeEdge", returnType: "CountryHarmonizedSystemCodeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Currency formats configured for the merchant. These formats are available to use within Liquid.
 */
export type CurrencyFormats = {
/**
 * Money without currency in HTML.
 */
moneyFormat: { baseType: BaseTypes.FormattedString, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Money without currency in emails.
 */
moneyInEmailsFormat: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Money with currency in HTML.
 */
moneyWithCurrencyFormat: { baseType: BaseTypes.FormattedString, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Money with currency in emails.
 */
moneyWithCurrencyInEmailsFormat: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CurrencyFormats", returnType: "CurrencyFormats", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A setting for a presentment currency.
 */
export type CurrencySetting = {
/**
 * The currency's ISO code.
 */
currencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The full name of the currency.
 */
currencyName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the currency is enabled or not. An enabled currency setting is visible to buyers and allows orders to be generated with that currency as presentment.
 */
enabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the active exchange rate for the currency was last modified. It can be the automatic rate's creation date, or the manual rate's last updated at date if active.
 */
rateUpdatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CurrencySetting", returnType: "CurrencySetting", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple CurrencySettings.
 */
export type CurrencySettingConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CurrencySettingEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CurrencySettingEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CurrencySetting, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CurrencySettingConnection", returnType: "CurrencySettingConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CurrencySetting and a cursor during pagination.
 */
export type CurrencySettingEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CurrencySettingEdge.
 */
node: { baseType: CurrencySetting, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CurrencySettingEdge", returnType: "CurrencySettingEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Customer = {
/**
 * A list of addresses associated with the customer.
 */
addresses: { baseType: MailingAddress, arguments: { first?: BaseTypes.Int | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total amount that the customer has spent on orders in their lifetime.
 */
amountSpent: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the merchant can delete the customer from their store.
 *
 * A customer can be deleted from a store only if they haven't yet made an order. After a customer makes an
 * order, they can't be deleted from a store.
 */
canDelete: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the customer's company contact profiles.
 */
companyContactProfiles: { baseType: CompanyContact, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The date and time when the customer was added to the store.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the customer has opted out of having their data sold.
 */
dataSaleOptOut: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The default address associated with the customer.
 */
defaultAddress: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The full name of the customer, based on the values for first_name and last_name. If the first_name and
 * last_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.
 */
displayName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer's email address.
 */
email: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The current email marketing state for the customer.
 * If the customer doesn't have an email address, then this property is `null`.
 */
emailMarketingConsent: { baseType: CustomerEmailMarketingConsentState, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of events associated with the customer.
 */
events: { baseType: EventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.EventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer's first name.
 */
firstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the merchant has added timeline comments about the customer on the customer's page.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The image associated with the customer.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer's last name.
 */
lastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer's last order.
 */
lastOrder: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of time since the customer was first added to the store.
 *
 * Example: 'about 12 years'.
 */
lifetimeDuration: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer's locale.
 */
locale: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The market that includes the customer’s default address.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the customer can be merged with another customer.
 */
mergeable: { baseType: CustomerMergeable, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A unique identifier for the customer that's used with Multipass login.
 */
multipassIdentifier: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A note about the customer.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of orders that the customer has made at the store in their lifetime.
 */
numberOfOrders: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the customer's orders.
 */
orders: { baseType: OrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.OrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the customer's payment methods.
 */
paymentMethods: { baseType: CustomerPaymentMethodConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; showRevoked?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer's phone number.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Possible subscriber states of a customer defined by their subscription contracts.
 */
productSubscriberStatus: { baseType: BaseTypes.CustomerProductSubscriberStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The current SMS marketing state for the customer's phone number.
 *
 * If the customer does not have a phone number, then this property is `null`.
 */
smsMarketingConsent: { baseType: CustomerSmsMarketingConsentState, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The state of the customer's account with the shop.
 *
 * Please note that this only meaningful when Classic Customer Accounts is active.
 */
state: { baseType: BaseTypes.CustomerState, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The statistics for a given customer.
 */
statistics: { baseType: CustomerStatistics, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a list of store credit accounts that belong to the owner resource.
 * A store credit account owner can hold multiple accounts each with a different currency.
 */
storeCreditAccounts: { baseType: StoreCreditAccountConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the customer's subscription contracts.
 */
subscriptionContracts: { baseType: SubscriptionContractConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A comma separated list of tags that have been added to the customer.
 */
tags: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the customer is exempt from being charged taxes on their orders.
 */
taxExempt: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of tax exemptions applied to the customer.
 */
taxExemptions: { baseType: BaseTypes.TaxExemption, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The URL to unsubscribe the customer from the mailing list.
 */
unsubscribeUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the customer was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the email address is formatted correctly.
 *
 * Returns `true` when the email is formatted correctly and
 * belongs to an existing domain. This doesn't guarantee that
 * the email address actually exists.
 */
validEmailAddress: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API.
 */
verifiedEmail: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Customer", returnType: "Customer", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CommentEventSubject & HasEvents & HasMetafieldDefinitions & HasMetafields & HasStoreCreditAccounts & LegacyInteroperability & Node

/**
 * Information about the shop's customer accounts.
 */
export type CustomerAccountsV2 = {
/**
 * Indicates which version of customer accounts the merchant is using in online store and checkout.
 */
customerAccountsVersion: { baseType: BaseTypes.CustomerAccountsVersion, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Login links are shown in online store and checkout.
 */
loginLinksVisibleOnStorefrontAndCheckout: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Customers are required to log in to their account before checkout.
 */
loginRequiredAtCheckout: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The root url for the customer accounts pages.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CustomerAccountsV2", returnType: "CustomerAccountsV2", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerAddTaxExemptions` mutation.
 */
export type CustomerAddTaxExemptionsPayload = {
/**
 * The updated customer.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerAddTaxExemptionsPayload", returnType: "CustomerAddTaxExemptionsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerCancelDataErasure` mutation.
 */
export type CustomerCancelDataErasurePayload = {
/**
 * The ID of the customer whose pending data erasure has been cancelled.
 */
customerId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerCancelDataErasureUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerCancelDataErasurePayload", returnType: "CustomerCancelDataErasurePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs when cancelling a customer data erasure request.
 */
export type CustomerCancelDataErasureUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CustomerCancelDataErasureErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerCancelDataErasureUserError", returnType: "CustomerCancelDataErasureUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An auto-generated type for paginating through multiple Customers.
 */
export type CustomerConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CustomerEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CustomerEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Customer, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerConnection", returnType: "CustomerConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerCreate` mutation.
 */
export type CustomerCreatePayload = {
/**
 * The created customer.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerCreatePayload", returnType: "CustomerCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a card instrument for customer payment method.
 */
export type CustomerCreditCard = {
/**
 * The billing address of the card.
 */
billingAddress: { baseType: CustomerCreditCardBillingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The brand of the card.
 */
brand: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the card is about to expire.
 */
expiresSoon: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The expiry month of the card.
 */
expiryMonth: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The expiry year of the card.
 */
expiryYear: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The card's BIN number.
 */
firstDigits: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The payment method can be revoked if there are no active subscription contracts.
 */
isRevocable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The last 4 digits of the card.
 */
lastDigits: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The masked card number with only the last 4 digits displayed.
 */
maskedNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the card holder.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The source of the card if coming from a wallet such as Apple Pay.
 */
source: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The last 4 digits of the Device Account Number.
 */
virtualLastDigits: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CustomerCreditCard", returnType: "CustomerCreditCard", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The billing address of a credit card payment instrument.
 */
export type CustomerCreditCardBillingAddress = {
/**
 * The first line of the address. Typically the street address or PO Box number.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the city, district, village, or town.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the country.
 */
country: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The two-letter code for the country of the address.
 * For example, US.
 */
countryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The first name in the billing address.
 */
firstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The last name in the billing address.
 */
lastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The region of the address, such as the province, state, or district.
 */
province: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The alphanumeric code for the region.
 * For example, ON.
 */
provinceCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The zip or postal code of the address.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CustomerCreditCardBillingAddress", returnType: "CustomerCreditCardBillingAddress", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerDelete` mutation.
 */
export type CustomerDeletePayload = {
/**
 * The ID of the deleted customer.
 */
deletedCustomerId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shop of the deleted customer.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerDeletePayload", returnType: "CustomerDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Customer and a cursor during pagination.
 */
export type CustomerEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CustomerEdge.
 */
node: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerEdge", returnType: "CustomerEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an email address.
 */
export type CustomerEmailAddress = {
/**
 * The customer's default email address.
 */
emailAddress: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the customer has subscribed to email marketing.
 */
marketingState: { baseType: BaseTypes.CustomerEmailAddressMarketingState, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL to unsubscribe a member from all mailing lists.
 */
marketingUnsubscribeUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the customer has opted in to having their opened emails tracked.
 */
openTrackingLevel: { baseType: BaseTypes.CustomerEmailAddressOpenTrackingLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL that can be used to opt a customer in or out of email open tracking.
 */
openTrackingUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerEmailAddress", returnType: "CustomerEmailAddress", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The record of when a customer consented to receive marketing material by email.
 */
export type CustomerEmailMarketingConsentState = {
/**
 * The date and time at which the customer consented to receive marketing material by email.
 * The customer's consent state reflects the consent record with the most recent `consent_updated_at` date.
 * If no date is provided, then the date and time at which the consent information was sent is used.
 */
consentUpdatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
 * that the customer gave when they consented to receive marketing material by email.
 */
marketingOptInLevel: { baseType: BaseTypes.CustomerMarketingOptInLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The current email marketing state for the customer.
 */
marketingState: { baseType: BaseTypes.CustomerEmailMarketingState, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerEmailMarketingConsentState", returnType: "CustomerEmailMarketingConsentState", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerEmailMarketingConsentUpdate` mutation.
 */
export type CustomerEmailMarketingConsentUpdatePayload = {
/**
 * The updated customer.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerEmailMarketingConsentUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerEmailMarketingConsentUpdatePayload", returnType: "CustomerEmailMarketingConsentUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CustomerEmailMarketingConsentUpdate`.
 */
export type CustomerEmailMarketingConsentUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CustomerEmailMarketingConsentUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerEmailMarketingConsentUpdateUserError", returnType: "CustomerEmailMarketingConsentUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `customerGenerateAccountActivationUrl` mutation.
 */
export type CustomerGenerateAccountActivationUrlPayload = {
/**
 * The generated account activation URL.
 */
accountActivationUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerGenerateAccountActivationUrlPayload", returnType: "CustomerGenerateAccountActivationUrlPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a customer's visiting activities on a shop's online store.
 */
export type CustomerJourney = {
/**
 * The position of the current order within the customer's order history.
 */
customerOrderIndex: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order.
 */
daysToConversion: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer's first session going into the shop.
 */
firstVisit: { baseType: CustomerVisit, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The last session before an order is made.
 */
lastVisit: { baseType: CustomerVisit, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Events preceding a customer order, such as shop sessions.
 */
moments: { members: { CustomerVisit: CustomerVisit }, fields: { occurredAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerJourney", returnType: "CustomerJourney", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a customer's visiting activities on a shop's online store.
 */
export type CustomerJourneySummary = {
/**
 * The position of the current order within the customer's order history. Test orders aren't included.
 */
customerOrderIndex: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order.
 */
daysToConversion: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer's first session going into the shop.
 */
firstVisit: { baseType: CustomerVisit, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The last session before an order is made.
 */
lastVisit: { baseType: CustomerVisit, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The events preceding a customer's order, such as shop sessions.
 */
moments: { baseType: CustomerMomentConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed.
 */
momentsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the attributed sessions for the order have been created yet.
 */
ready: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerJourneySummary", returnType: "CustomerJourneySummary", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The error blocking a customer merge.
 */
export type CustomerMergeError = {
/**
 * The list of fields preventing the customer from being merged.
 */
errorFields: { baseType: BaseTypes.CustomerMergeErrorFieldType, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The customer merge error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerMergeError", returnType: "CustomerMergeError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerMerge` mutation.
 */
export type CustomerMergePayload = {
/**
 * The asynchronous job for merging the customers.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the customer resulting from the merge.
 */
resultingCustomerId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerMergeUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerMergePayload", returnType: "CustomerMergePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A preview of the results of a customer merge request.
 */
export type CustomerMergePreview = {
/**
 * The fields that can be used to override the default fields.
 */
alternateFields: { baseType: CustomerMergePreviewAlternateFields, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The fields that will block the merge if the two customers are merged.
 */
blockingFields: { baseType: CustomerMergePreviewBlockingFields, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The errors blocking the customer merge.
 */
customerMergeErrors: { baseType: CustomerMergeError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The fields that will be kept if the two customers are merged.
 */
defaultFields: { baseType: CustomerMergePreviewDefaultFields, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The resulting customer ID if the two customers are merged.
 */
resultingCustomerId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CustomerMergePreview", returnType: "CustomerMergePreview", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The fields that can be used to override the default fields.
 */
export type CustomerMergePreviewAlternateFields = {
/**
 * The default address of a customer.
 */
defaultAddress: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The email state of a customer.
 */
email: { baseType: CustomerEmailAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The first name of a customer.
 */
firstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The last name of a customer.
 */
lastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The phone number state of a customer.
 */
phoneNumber: { baseType: CustomerPhoneNumber, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CustomerMergePreviewAlternateFields", returnType: "CustomerMergePreviewAlternateFields", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The blocking fields of a customer merge preview. These fields will block customer merge unless edited.
 */
export type CustomerMergePreviewBlockingFields = {
/**
 * The merged note resulting from a customer merge. The merged note is over the 5000 character limit and will block customer merge.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The merged tags resulting from a customer merge. The merged tags are over the 250 limit and will block customer merge.
 */
tags: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerMergePreviewBlockingFields", returnType: "CustomerMergePreviewBlockingFields", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The fields that will be kept as part of a customer merge preview.
 */
export type CustomerMergePreviewDefaultFields = {
/**
 * The merged addresses resulting from a customer merge.
 */
addresses: { baseType: MailingAddressConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The default address resulting from a customer merge.
 */
defaultAddress: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of customer-specific discounts resulting from a customer merge.
 */
discountNodeCount: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The merged customer-specific discounts resulting from a customer merge.
 */
discountNodes: { baseType: DiscountNodeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.DiscountSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The full name of the customer, based on the values for `first_name` and `last_name`. If `first_name` and `last_name` aren't available, then this field falls back to the customer's email address. If the customer's email isn't available, then this field falls back to the customer's phone number.
 */
displayName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of merged draft orders.
 */
draftOrderCount: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The merged draft orders resulting from a customer merge.
 */
draftOrders: { baseType: DraftOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.DraftOrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The email state of a customer.
 */
email: { baseType: CustomerEmailAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The first name resulting from a customer merge.
 */
firstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of merged gift cards.
 */
giftCardCount: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The merged gift cards resulting from a customer merge.
 */
giftCards: { baseType: GiftCardConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.GiftCardSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The last name resulting from a customer merge.
 */
lastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of merged metafields.
 */
metafieldCount: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The merged note resulting from a customer merge.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of merged orders.
 */
orderCount: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The merged orders resulting from a customer merge.
 */
orders: { baseType: OrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.OrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The phone number state of a customer.
 */
phoneNumber: { baseType: CustomerPhoneNumber, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The merged tags resulting from a customer merge.
 */
tags: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerMergePreviewDefaultFields", returnType: "CustomerMergePreviewDefaultFields", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A merge request for merging two customers.
 */
export type CustomerMergeRequest = {
/**
 * The merge errors that occurred during the customer merge request.
 */
customerMergeErrors: { baseType: CustomerMergeError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The UUID of the merge job.
 */
jobId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the customer resulting from the merge.
 */
resultingCustomerId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the customer merge request.
 */
status: { baseType: BaseTypes.CustomerMergeRequestStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerMergeRequest", returnType: "CustomerMergeRequest", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs while merging two customers.
 */
export type CustomerMergeUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CustomerMergeErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerMergeUserError", returnType: "CustomerMergeUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An object that represents whether a customer can be merged with another customer.
 */
export type CustomerMergeable = {
/**
 * The list of fields preventing the customer from being merged.
 */
errorFields: { baseType: BaseTypes.CustomerMergeErrorFieldType, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the customer can be merged with another customer.
 */
isMergeable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The merge request if one is currently in progress.
 */
mergeInProgress: { baseType: CustomerMergeRequest, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The reason why the customer can't be merged with another customer.
 */
reason: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CustomerMergeable", returnType: "CustomerMergeable", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a session preceding an order, often used for building a timeline of events leading to an order.
 */
export type CustomerMoment = {
/**
 * The date and time when the customer's session occurred.
 */
occurredAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple CustomerMoments.
 */
export type CustomerMomentConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CustomerMomentEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CustomerMomentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { CustomerVisit: CustomerVisit }, fields: { occurredAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerMomentConnection", returnType: "CustomerMomentConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CustomerMoment and a cursor during pagination.
 */
export type CustomerMomentEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CustomerMomentEdge.
 */
node: { members: { CustomerVisit: CustomerVisit }, fields: { occurredAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerMomentEdge", returnType: "CustomerMomentEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * All possible instruments for CustomerPaymentMethods.
 */
export type CustomerPaymentInstrument = CustomerCreditCard | CustomerPaypalBillingAgreement | CustomerShopPayAgreement

/**
 * The billing address of a payment instrument.
 */
export type CustomerPaymentInstrumentBillingAddress = {
/**
 * The first line of the address. Typically the street address or PO Box number.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the city, district, village, or town.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the country.
 */
country: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The two-letter code for the country of the address.
 * For example, US.
 */
countryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the buyer of the address.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The region of the address, such as the province, state, or district.
 */
province: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The alphanumeric code for the region.
 * For example, ON.
 */
provinceCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The zip or postal code of the address.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CustomerPaymentInstrumentBillingAddress", returnType: "CustomerPaymentInstrumentBillingAddress", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A customer's payment method.
 */
export type CustomerPaymentMethod = {
/**
 * The customer to whom the payment method belongs.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of this payment method.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The instrument for this payment method.
 */
instrument: { members: { CustomerCreditCard: CustomerCreditCard; CustomerPaypalBillingAgreement: CustomerPaypalBillingAgreement; CustomerShopPayAgreement: CustomerShopPayAgreement }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The time that the payment method was revoked.
 */
revokedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The revocation reason for this payment method.
 */
revokedReason: { baseType: BaseTypes.CustomerPaymentMethodRevocationReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List Subscription Contracts.
 */
subscriptionContracts: { baseType: SubscriptionContractConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerPaymentMethod", returnType: "CustomerPaymentMethod", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple CustomerPaymentMethods.
 */
export type CustomerPaymentMethodConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CustomerPaymentMethodEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CustomerPaymentMethodEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CustomerPaymentMethod, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodConnection", returnType: "CustomerPaymentMethodConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerPaymentMethodCreateFromDuplicationData` mutation.
 */
export type CustomerPaymentMethodCreateFromDuplicationDataPayload = {
/**
 * The customer payment method.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerPaymentMethodCreateFromDuplicationDataUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodCreateFromDuplicationDataPayload", returnType: "CustomerPaymentMethodCreateFromDuplicationDataPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CustomerPaymentMethodCreateFromDuplicationData`.
 */
export type CustomerPaymentMethodCreateFromDuplicationDataUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodCreateFromDuplicationDataUserError", returnType: "CustomerPaymentMethodCreateFromDuplicationDataUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `customerPaymentMethodCreditCardCreate` mutation.
 */
export type CustomerPaymentMethodCreditCardCreatePayload = {
/**
 * The customer payment method.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * If the card verification result is processing. When this is true, customer_payment_method will be null.
 */
processing: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodCreditCardCreatePayload", returnType: "CustomerPaymentMethodCreditCardCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerPaymentMethodCreditCardUpdate` mutation.
 */
export type CustomerPaymentMethodCreditCardUpdatePayload = {
/**
 * The customer payment method.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * If the card verification result is processing. When this is true, customer_payment_method will be null.
 */
processing: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodCreditCardUpdatePayload", returnType: "CustomerPaymentMethodCreditCardUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.
 */
export type CustomerPaymentMethodEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CustomerPaymentMethodEdge.
 */
node: { baseType: CustomerPaymentMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodEdge", returnType: "CustomerPaymentMethodEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerPaymentMethodGetDuplicationData` mutation.
 */
export type CustomerPaymentMethodGetDuplicationDataPayload = {
/**
 * The encrypted data from the payment method to be duplicated.
 */
encryptedDuplicationData: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerPaymentMethodGetDuplicationDataUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodGetDuplicationDataPayload", returnType: "CustomerPaymentMethodGetDuplicationDataPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CustomerPaymentMethodGetDuplicationData`.
 */
export type CustomerPaymentMethodGetDuplicationDataUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CustomerPaymentMethodGetDuplicationDataUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodGetDuplicationDataUserError", returnType: "CustomerPaymentMethodGetDuplicationDataUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `customerPaymentMethodGetUpdateUrl` mutation.
 */
export type CustomerPaymentMethodGetUpdateUrlPayload = {
/**
 * The URL to redirect the customer to update the payment method.
 */
updatePaymentMethodUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerPaymentMethodGetUpdateUrlUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodGetUpdateUrlPayload", returnType: "CustomerPaymentMethodGetUpdateUrlPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `CustomerPaymentMethodGetUpdateUrl`.
 */
export type CustomerPaymentMethodGetUpdateUrlUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CustomerPaymentMethodGetUpdateUrlUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodGetUpdateUrlUserError", returnType: "CustomerPaymentMethodGetUpdateUrlUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `customerPaymentMethodPaypalBillingAgreementCreate` mutation.
 */
export type CustomerPaymentMethodPaypalBillingAgreementCreatePayload = {
/**
 * The customer payment method.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerPaymentMethodUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodPaypalBillingAgreementCreatePayload", returnType: "CustomerPaymentMethodPaypalBillingAgreementCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerPaymentMethodPaypalBillingAgreementUpdate` mutation.
 */
export type CustomerPaymentMethodPaypalBillingAgreementUpdatePayload = {
/**
 * The customer payment method.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerPaymentMethodUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodPaypalBillingAgreementUpdatePayload", returnType: "CustomerPaymentMethodPaypalBillingAgreementUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerPaymentMethodRemoteCreate` mutation.
 */
export type CustomerPaymentMethodRemoteCreatePayload = {
/**
 * The customer payment method. Note that the returned payment method may initially be in an incomplete state. Developers should poll this payment method using the customerPaymentMethod query until all required payment details have been processed.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerPaymentMethodRemoteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodRemoteCreatePayload", returnType: "CustomerPaymentMethodRemoteCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerPaymentMethodRemoteCreditCardCreate` mutation.
 */
export type CustomerPaymentMethodRemoteCreditCardCreatePayload = {
/**
 * The customer payment method.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerPaymentMethodUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodRemoteCreditCardCreatePayload", returnType: "CustomerPaymentMethodRemoteCreditCardCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an error in the input of a mutation.
 */
export type CustomerPaymentMethodRemoteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CustomerPaymentMethodRemoteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodRemoteUserError", returnType: "CustomerPaymentMethodRemoteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `customerPaymentMethodRevoke` mutation.
 */
export type CustomerPaymentMethodRevokePayload = {
/**
 * The ID of the revoked customer payment method.
 */
revokedCustomerPaymentMethodId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodRevokePayload", returnType: "CustomerPaymentMethodRevokePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerPaymentMethodSendUpdateEmail` mutation.
 */
export type CustomerPaymentMethodSendUpdateEmailPayload = {
/**
 * The customer to whom an update payment method email was sent.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodSendUpdateEmailPayload", returnType: "CustomerPaymentMethodSendUpdateEmailPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an error in the input of a mutation.
 */
export type CustomerPaymentMethodUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CustomerPaymentMethodUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerPaymentMethodUserError", returnType: "CustomerPaymentMethodUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a PayPal instrument for customer payment method.
 */
export type CustomerPaypalBillingAgreement = {
/**
 * The billing address of this payment method.
 */
billingAddress: { baseType: CustomerPaymentInstrumentBillingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the PayPal billing agreement is inactive.
 */
inactive: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.
 */
isRevocable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customers's PayPal account email address.
 */
paypalAccountEmail: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CustomerPaypalBillingAgreement", returnType: "CustomerPaypalBillingAgreement", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A phone number.
 */
export type CustomerPhoneNumber = {
/**
 * Whether the customer has subscribed to SMS marketing material.
 */
marketingState: { baseType: BaseTypes.CustomerSmsMarketingState, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A customer's phone number.
 */
phoneNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerPhoneNumber", returnType: "CustomerPhoneNumber", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerRemoveTaxExemptions` mutation.
 */
export type CustomerRemoveTaxExemptionsPayload = {
/**
 * The updated customer.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerRemoveTaxExemptionsPayload", returnType: "CustomerRemoveTaxExemptionsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerReplaceTaxExemptions` mutation.
 */
export type CustomerReplaceTaxExemptionsPayload = {
/**
 * The updated customer.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerReplaceTaxExemptionsPayload", returnType: "CustomerReplaceTaxExemptionsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerRequestDataErasure` mutation.
 */
export type CustomerRequestDataErasurePayload = {
/**
 * The ID of the customer that will be erased.
 */
customerId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerRequestDataErasureUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerRequestDataErasurePayload", returnType: "CustomerRequestDataErasurePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs when requesting a customer data erasure.
 */
export type CustomerRequestDataErasureUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CustomerRequestDataErasureErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerRequestDataErasureUserError", returnType: "CustomerRequestDataErasureUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The member of a segment.
 */
export type CustomerSegmentMember = {
/**
 * The total amount of money that the member has spent on orders.
 */
amountSpent: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The member's default address.
 */
defaultAddress: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The member's default email address.
 */
defaultEmailAddress: { baseType: CustomerEmailAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The member's default phone number.
 */
defaultPhoneNumber: { baseType: CustomerPhoneNumber, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The full name of the member, which is based on the values of the `first_name` and `last_name` fields. If the member's first name and last name aren't available, then the customer's email address is used. If the customer's email address isn't available, then the customer's phone number is used.
 */
displayName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The member's first name.
 */
firstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The member’s ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The member's last name.
 */
lastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the member's most recent order.
 */
lastOrderId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the customer can be merged with another customer.
 */
mergeable: { baseType: CustomerMergeable, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A note about the member.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of orders that the member has made.
 */
numberOfOrders: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerSegmentMember", returnType: "CustomerSegmentMember", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafields

/**
 * The connection type for the `CustomerSegmentMembers` object.
 */
export type CustomerSegmentMemberConnection = {
/**
 * A list of edges.
 */
edges: { baseType: CustomerSegmentMemberEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The statistics for a given segment.
 */
statistics: { baseType: SegmentStatistics, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of members in a given segment.
 */
totalCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerSegmentMemberConnection", returnType: "CustomerSegmentMemberConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CustomerSegmentMember and a cursor during pagination.
 */
export type CustomerSegmentMemberEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CustomerSegmentMemberEdge.
 */
node: { baseType: CustomerSegmentMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerSegmentMemberEdge", returnType: "CustomerSegmentMemberEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A job to determine a list of members, such as customers, that are associated with an individual segment.
 */
export type CustomerSegmentMembersQuery = {
/**
 * The current total number of members in a given segment.
 */
currentCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * This indicates if the job is still queued or has been run.
 */
done: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID that's returned when running an asynchronous mutation.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerSegmentMembersQuery", returnType: "CustomerSegmentMembersQuery", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & JobResult & Node

/**
 * Return type for `customerSegmentMembersQueryCreate` mutation.
 */
export type CustomerSegmentMembersQueryCreatePayload = {
/**
 * The newly created customer segment members query.
 */
customerSegmentMembersQuery: { baseType: CustomerSegmentMembersQuery, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerSegmentMembersQueryUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerSegmentMembersQueryCreatePayload", returnType: "CustomerSegmentMembersQueryCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a customer segment members query custom error.
 */
export type CustomerSegmentMembersQueryUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CustomerSegmentMembersQueryUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerSegmentMembersQueryUserError", returnType: "CustomerSegmentMembersQueryUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a Shop Pay card instrument for customer payment method.
 */
export type CustomerShopPayAgreement = {
/**
 * The billing address of the card.
 */
billingAddress: { baseType: CustomerCreditCardBillingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the card is about to expire.
 */
expiresSoon: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The expiry month of the card.
 */
expiryMonth: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The expiry year of the card.
 */
expiryYear: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the Shop Pay billing agreement is inactive.
 */
inactive: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The payment method can be revoked if there are no active subscription contracts.
 */
isRevocable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The last 4 digits of the card.
 */
lastDigits: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The masked card number with only the last 4 digits displayed.
 */
maskedNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the card holder.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerShopPayAgreement", returnType: "CustomerShopPayAgreement", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during execution of an SMS marketing consent mutation.
 */
export type CustomerSmsMarketingConsentError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.CustomerSmsMarketingConsentErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerSmsMarketingConsentError", returnType: "CustomerSmsMarketingConsentError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The record of when a customer consented to receive marketing material by SMS.
 *
 * The customer's consent state reflects the record with the most recent date when consent was updated.
 */
export type CustomerSmsMarketingConsentState = {
/**
 * The source from which the SMS marketing information for the customer was collected.
 */
consentCollectedFrom: { baseType: BaseTypes.CustomerConsentCollectedFrom, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the customer consented to receive marketing material by SMS.
 * If no date is provided, then the date and time when the consent information was sent is used.
 */
consentUpdatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
 */
marketingOptInLevel: { baseType: BaseTypes.CustomerMarketingOptInLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The current SMS marketing state for the customer.
 */
marketingState: { baseType: BaseTypes.CustomerSmsMarketingState, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerSmsMarketingConsentState", returnType: "CustomerSmsMarketingConsentState", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerSmsMarketingConsentUpdate` mutation.
 */
export type CustomerSmsMarketingConsentUpdatePayload = {
/**
 * The updated customer.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: CustomerSmsMarketingConsentError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerSmsMarketingConsentUpdatePayload", returnType: "CustomerSmsMarketingConsentUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A customer's computed statistics.
 */
export type CustomerStatistics = {
/**
 * The predicted spend tier of a customer with a shop.
 */
predictedSpendTier: { baseType: BaseTypes.CustomerPredictedSpendTier, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CustomerStatistics", returnType: "CustomerStatistics", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerUpdateDefaultAddress` mutation.
 */
export type CustomerUpdateDefaultAddressPayload = {
/**
 * The customer whose address was updated.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerUpdateDefaultAddressPayload", returnType: "CustomerUpdateDefaultAddressPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `customerUpdate` mutation.
 */
export type CustomerUpdatePayload = {
/**
 * The updated customer.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "CustomerUpdatePayload", returnType: "CustomerUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session.
 */
export type CustomerVisit = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * URL of the first page the customer landed on for the session.
 */
landingPage: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1.
 */
landingPageHtml: { baseType: BaseTypes.HTML, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Represent actions taken by an app, on behalf of a merchant,
 * to market Shopify resources such as products, collections, and discounts.
 */
marketingEvent: { baseType: MarketingEvent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the customer's session occurred.
 */
occurredAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Marketing referral code from the link that the customer clicked to visit the store.
 * Supports the following URL attributes: _ref_, _source_, or _r_.
 * For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
 */
referralCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Referral information with URLs linked in HTML.
 */
referralInfoHtml: { baseType: BaseTypes.FormattedString, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Webpage where the customer clicked a link that sent them to the online store.
 * For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
 */
referrerUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
 * a website domain, QR code, or unknown.
 */
source: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Describes the source explicitly for first or last session.
 */
sourceDescription: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Type of marketing tactic.
 */
sourceType: { baseType: BaseTypes.MarketingTactic, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A set of UTM parameters gathered from the URL parameters of the referrer.
 */
utmParameters: { baseType: UTMParameters, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CustomerVisit", returnType: "CustomerVisit", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CustomerMoment & Node

/**
 * This type returns the information about the product and product variant from a customer visit.
 */
export type CustomerVisitProductInfo = {
/**
 * The product information. If `null`, then the product was deleted from the store.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The quantity of the product that the customer requested.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant information, if the product variant exists.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "CustomerVisitProductInfo", returnType: "CustomerVisitProductInfo", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple CustomerVisitProductInfos.
 */
export type CustomerVisitProductInfoConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: CustomerVisitProductInfoEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in CustomerVisitProductInfoEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: CustomerVisitProductInfo, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerVisitProductInfoConnection", returnType: "CustomerVisitProductInfoConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one CustomerVisitProductInfo and a cursor during pagination.
 */
export type CustomerVisitProductInfoEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of CustomerVisitProductInfoEdge.
 */
node: { baseType: CustomerVisitProductInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "CustomerVisitProductInfoEdge", returnType: "CustomerVisitProductInfoEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `dataSaleOptOut` mutation.
 */
export type DataSaleOptOutPayload = {
/**
 * The ID of the customer whose email address has been opted out of data sale.
 */
customerId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DataSaleOptOutUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DataSaleOptOutPayload", returnType: "DataSaleOptOutPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `DataSaleOptOut`.
 */
export type DataSaleOptOutUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.DataSaleOptOutUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DataSaleOptOutUserError", returnType: "DataSaleOptOutUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A token that delegates a set of scopes from the original permission.
 *
 * To learn more about creating delegate access tokens, refer to
 * [Delegate OAuth access tokens to subsystems](https://shopify.dev/docs/apps/build/authentication-authorization/access-tokens/use-delegate-tokens).
 */
export type DelegateAccessToken = {
/**
 * The list of permissions associated with the token.
 */
accessScopes: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The issued delegate access token.
 */
accessToken: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the delegate access token was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DelegateAccessToken", returnType: "DelegateAccessToken", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `delegateAccessTokenCreate` mutation.
 */
export type DelegateAccessTokenCreatePayload = {
/**
 * The delegate access token.
 */
delegateAccessToken: { baseType: DelegateAccessToken, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The user's shop.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DelegateAccessTokenCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DelegateAccessTokenCreatePayload", returnType: "DelegateAccessTokenCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `DelegateAccessTokenCreate`.
 */
export type DelegateAccessTokenCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.DelegateAccessTokenCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DelegateAccessTokenCreateUserError", returnType: "DelegateAccessTokenCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `delegateAccessTokenDestroy` mutation.
 */
export type DelegateAccessTokenDestroyPayload = {
/**
 * The user's shop.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the delegate access token destroy operation. Returns true if successful.
 */
status: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DelegateAccessTokenDestroyUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DelegateAccessTokenDestroyPayload", returnType: "DelegateAccessTokenDestroyPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `DelegateAccessTokenDestroy`.
 */
export type DelegateAccessTokenDestroyUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.DelegateAccessTokenDestroyUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DelegateAccessTokenDestroyUserError", returnType: "DelegateAccessTokenDestroyUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Deletion events chronicle the destruction of resources (e.g. products and collections).
 * Once deleted, the deletion event is the only trace of the original's existence,
 * as the resource itself has been removed and can no longer be accessed.
 */
export type DeletionEvent = {
/**
 * The date and time when the deletion event for the related resource was generated.
 */
occurredAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the resource that was deleted.
 */
subjectId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of resource that was deleted.
 */
subjectType: { baseType: BaseTypes.DeletionEventSubjectType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeletionEvent", returnType: "DeletionEvent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple DeletionEvents.
 */
export type DeletionEventConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DeletionEventEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DeletionEventEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DeletionEvent, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeletionEventConnection", returnType: "DeletionEventConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DeletionEvent and a cursor during pagination.
 */
export type DeletionEventEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DeletionEventEdge.
 */
node: { baseType: DeletionEvent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeletionEventEdge", returnType: "DeletionEventEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A shipping service and a list of countries that the service is available for.
 */
export type DeliveryAvailableService = {
/**
 * The countries the service provider ships to.
 */
countries: { baseType: DeliveryCountryCodesOrRestOfWorld, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the service.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryAvailableService", returnType: "DeliveryAvailableService", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a branded promise presented to buyers.
 */
export type DeliveryBrandedPromise = {
/**
 * The handle of the branded promise.  For example: `shop_promise`.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the branded promise.  For example: `Shop Promise`.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryBrandedPromise", returnType: "DeliveryBrandedPromise", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A carrier service (also known as a carrier calculated service or shipping service) provides real-time shipping rates to Shopify. Some common carrier services include Canada Post, FedEx, UPS, and USPS. The term **carrier** is often used interchangeably with the terms **shipping company** and **rate provider**.
 *
 * Using the CarrierService resource, you can add a carrier service to a shop and then provide a list of applicable shipping rates at checkout. You can even use the cart data to adjust shipping rates and offer shipping discounts based on what is in the customer's cart.
 *
 * ## Requirements for accessing the CarrierService resource
 * To access the CarrierService resource, add the `write_shipping` permission to your app's requested scopes. For more information, see [API access scopes](https://shopify.dev/docs/admin-api/access-scopes).
 *
 * Your app's request to create a carrier service will fail unless the store installing your carrier service meets one of the following requirements:
 * * It's on the Advanced Shopify plan or higher.
 * * It's on the Shopify plan with yearly billing, or the carrier service feature has been added to the store for a monthly fee. For more information, contact [Shopify Support](https://help.shopify.com/questions).
 * * It's a development store.
 *
 * > Note:
 * > If a store changes its Shopify plan, then the store's association with a carrier service is deactivated if the store no long meets one of the requirements above.
 *
 * ## Providing shipping rates to Shopify
 * When adding a carrier service to a store, you need to provide a POST endpoint rooted in the `callbackUrl` property where Shopify can retrieve applicable shipping rates. The callback URL should be a public endpoint that expects these requests from Shopify.
 *
 * ### Example shipping rate request sent to a carrier service
 *
 * ```json
 * {
 * "rate": {
 * "origin": {
 * "country": "CA",
 * "postal_code": "K2P1L4",
 * "province": "ON",
 * "city": "Ottawa",
 * "name": null,
 * "address1": "150 Elgin St.",
 * "address2": "",
 * "address3": null,
 * "phone": null,
 * "fax": null,
 * "email": null,
 * "address_type": null,
 * "company_name": "Jamie D's Emporium"
 * },
 * "destination": {
 * "country": "CA",
 * "postal_code": "K1M1M4",
 * "province": "ON",
 * "city": "Ottawa",
 * "name": "Bob Norman",
 * "address1": "24 Sussex Dr.",
 * "address2": "",
 * "address3": null,
 * "phone": null,
 * "fax": null,
 * "email": null,
 * "address_type": null,
 * "company_name": null
 * },
 * "items": [{
 * "name": "Short Sleeve T-Shirt",
 * "sku": "",
 * "quantity": 1,
 * "grams": 1000,
 * "price": 1999,
 * "vendor": "Jamie D's Emporium",
 * "requires_shipping": true,
 * "taxable": true,
 * "fulfillment_service": "manual",
 * "properties": null,
 * "product_id": 48447225880,
 * "variant_id": 258644705304
 * }],
 * "currency": "USD",
 * "locale": "en"
 * }
 * }
 * ```
 *
 * ### Example response
 * ```json
 * {
 * "rates": [
 * {
 * "service_name": "canadapost-overnight",
 * "service_code": "ON",
 * "total_price": "1295",
 * "description": "This is the fastest option by far",
 * "currency": "CAD",
 * "min_delivery_date": "2013-04-12 14:48:45 -0400",
 * "max_delivery_date": "2013-04-12 14:48:45 -0400"
 * },
 * {
 * "service_name": "fedex-2dayground",
 * "service_code": "2D",
 * "total_price": "2934",
 * "currency": "USD",
 * "min_delivery_date": "2013-04-12 14:48:45 -0400",
 * "max_delivery_date": "2013-04-12 14:48:45 -0400"
 * },
 * {
 * "service_name": "fedex-priorityovernight",
 * "service_code": "1D",
 * "total_price": "3587",
 * "currency": "USD",
 * "min_delivery_date": "2013-04-12 14:48:45 -0400",
 * "max_delivery_date": "2013-04-12 14:48:45 -0400"
 * }
 * ]
 * }
 * ```
 *
 * The `address3`, `fax`, `address_type`, and `company_name` fields are returned by specific [ActiveShipping](https://github.com/Shopify/active_shipping) providers. For API-created carrier services, you should use only the following shipping address fields:
 * * `address1`
 * * `address2`
 * * `city`
 * * `zip`
 * * `province`
 * * `country`
 *
 * Other values remain as `null` and are not sent to the callback URL.
 *
 * ### Response fields
 *
 * When Shopify requests shipping rates using your callback URL, the response object `rates` must be a JSON array of objects with the following fields.  Required fields must be included in the response for the carrier service integration to work properly.
 *
 * | Field                   | Required | Description                                                                                                                                                                                                  |
 * | ----------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `service_name`          | Yes      | The name of the rate, which customers see at checkout. For example: `Expedited Mail`.                                                                                                                        |
 * | `description`           | Yes      | A description of the rate, which customers see at checkout. For example: `Includes tracking and insurance`.                                                                                                  |
 * | `service_code`          | Yes      | A unique code associated with the rate. For example: `expedited_mail`.                                                                                                                                       |
 * | `currency`              | Yes      | The currency of the shipping rate.                                                                                                                                                                           |
 * | `total_price`           | Yes      | The total price expressed in subunits. If the currency doesn't use subunits, then the value must be multiplied by 100. For example: `"total_price": 500` for 5.00 CAD, `"total_price": 100000` for 1000 JPY. |
 * | `phone_required`        | No       | Whether the customer must provide a phone number at checkout.                                                                                                                                                |
 * | `min_delivery_date`     | No       | The earliest delivery date for the displayed rate.                                                                                                                                                           |
 * | `max_delivery_date`     | No       | The latest delivery date for the displayed rate to still be valid.                                                                                                                                           |
 *
 * ### Special conditions
 *
 * * To indicate that this carrier service cannot handle this shipping request, return an empty array and any successful (20x) HTTP code.
 * * To force backup rates instead, return a 40x or 50x HTTP code with any content. A good choice is the regular 404 Not Found code.
 * * Redirects (30x codes) will only be followed for the same domain as the original callback URL. Attempting to redirect to a different domain will trigger backup rates.
 * * There is no retry mechanism. The response must be successful on the first try, within the time budget listed below. Timeouts or errors will trigger backup rates.
 *
 * ## Response Timeouts
 *
 * The read timeout for rate requests are dynamic, based on the number of requests per minute (RPM). These limits are applied to each shop-app pair. The timeout values are as follows.
 *
 * | RPM Range     | Timeout    |
 * | ------------- | ---------- |
 * | Under 1500    | 10s        |
 * | 1500 to 3000  | 5s         |
 * | Over 3000     | 3s         |
 *
 * > Note:
 * > These values are upper limits and should not be interpretted as a goal to develop towards. Shopify is constantly evaluating the performance of the platform and working towards improving resilience as well as app capabilities. As such, these numbers may be adjusted outside of our normal versioning timelines.
 *
 * ## Server-side caching of requests
 * Shopify provides server-side caching to reduce the number of requests it makes. Any shipping rate request that identically matches the following fields will be retrieved from Shopify's cache of the initial response:
 * * variant IDs
 * * default shipping box weight and dimensions
 * * variant quantities
 * * carrier service ID
 * * origin address
 * * destination address
 * * item weights and signatures
 *
 * If any of these fields differ, or if the cache has expired since the original request, then new shipping rates are requested. The cache expires 15 minutes after rates are successfully returned. If an error occurs, then the cache expires after 30 seconds.
 */
export type DeliveryCarrierService = {
/**
 * Whether the carrier service is active.
 */
active: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of services offered for given destinations.
 */
availableServicesForCountries: { baseType: DeliveryAvailableService, arguments: { countryCodes?: Array<BaseTypes.CountryCode> | null; origins?: Array<BaseTypes.ID> | null; restOfWorld: BaseTypes.Boolean }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The URL endpoint that Shopify needs to retrieve shipping rates.
 */
callbackUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The properly formatted name of the shipping service provider, ready to display.
 */
formattedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The logo of the service provider.
 */
icon: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the shipping service provider.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether merchants are able to send dummy data to your service through the Shopify admin to see shipping rate examples.
 */
supportsServiceDiscovery: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCarrierService", returnType: "DeliveryCarrierService", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A carrier service and the associated list of shop locations.
 */
export type DeliveryCarrierServiceAndLocations = {
/**
 * The carrier service.
 */
carrierService: { baseType: DeliveryCarrierService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of locations that support this carrier service.
 */
locations: { baseType: Location, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DeliveryCarrierServiceAndLocations", returnType: "DeliveryCarrierServiceAndLocations", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple DeliveryCarrierServices.
 */
export type DeliveryCarrierServiceConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DeliveryCarrierServiceEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DeliveryCarrierServiceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DeliveryCarrierService, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCarrierServiceConnection", returnType: "DeliveryCarrierServiceConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DeliveryCarrierService and a cursor during pagination.
 */
export type DeliveryCarrierServiceEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DeliveryCarrierServiceEdge.
 */
node: { baseType: DeliveryCarrierService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCarrierServiceEdge", returnType: "DeliveryCarrierServiceEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A condition that must pass for a delivery method definition to be applied to an order.
 */
export type DeliveryCondition = {
/**
 * The value (weight or price) that the condition field is compared to.
 */
conditionCriteria: { members: { MoneyV2: MoneyV2; Weight: Weight }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The field to compare the criterion value against, using the operator.
 */
field: { baseType: BaseTypes.DeliveryConditionField, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The operator to compare the field and criterion value.
 */
operator: { baseType: BaseTypes.DeliveryConditionOperator, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCondition", returnType: "DeliveryCondition", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The value (weight or price) that the condition field is compared to.
 */
export type DeliveryConditionCriteria = MoneyV2 | Weight

/**
 * A country that is used to define a shipping zone.
 */
export type DeliveryCountry = {
/**
 * A two-letter country code in ISO 3166-1 alpha-2 standard.
 * It also includes a flag indicating whether the country should be
 * a part of the 'Rest Of World' shipping zone.
 */
code: { baseType: DeliveryCountryCodeOrRestOfWorld, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The full name of the country.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of regions associated with this country.
 */
provinces: { baseType: DeliveryProvince, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The translated name of the country. The translation returned is based on the system's locale.
 */
translatedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCountry", returnType: "DeliveryCountry", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The country details and the associated shipping zone.
 */
export type DeliveryCountryAndZone = {
/**
 * The country details.
 */
country: { baseType: DeliveryCountry, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the shipping zone.
 */
zone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCountryAndZone", returnType: "DeliveryCountryAndZone", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The country code and whether the country is a part of the 'Rest Of World' shipping zone.
 */
export type DeliveryCountryCodeOrRestOfWorld = {
/**
 * The country code in the ISO 3166-1 alpha-2 format.
 */
countryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the country is a part of the 'Rest of World' shipping zone.
 */
restOfWorld: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCountryCodeOrRestOfWorld", returnType: "DeliveryCountryCodeOrRestOfWorld", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The list of country codes and information whether the countries
 * are a part of the 'Rest Of World' shipping zone.
 */
export type DeliveryCountryCodesOrRestOfWorld = {
/**
 * List of applicable country codes in the ISO 3166-1 alpha-2 format.
 */
countryCodes: { baseType: BaseTypes.CountryCode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the countries are a part of the 'Rest of World' shipping zone.
 */
restOfWorld: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCountryCodesOrRestOfWorld", returnType: "DeliveryCountryCodesOrRestOfWorld", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A delivery customization.
 */
export type DeliveryCustomization = {
/**
 * The enabled status of the delivery customization.
 */
enabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The error history on the most recent version of the delivery customization.
 */
errorHistory: { baseType: FunctionsErrorHistory, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the Shopify Function implementing the delivery customization.
 */
functionId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Shopify Function implementing the delivery customization.
 */
shopifyFunction: { baseType: ShopifyFunction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the delivery customization.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCustomization", returnType: "DeliveryCustomization", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & Node

/**
 * Return type for `deliveryCustomizationActivation` mutation.
 */
export type DeliveryCustomizationActivationPayload = {
/**
 * The IDs of the updated delivery customizations.
 */
ids: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DeliveryCustomizationError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DeliveryCustomizationActivationPayload", returnType: "DeliveryCustomizationActivationPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple DeliveryCustomizations.
 */
export type DeliveryCustomizationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DeliveryCustomizationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DeliveryCustomizationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DeliveryCustomization, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCustomizationConnection", returnType: "DeliveryCustomizationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `deliveryCustomizationCreate` mutation.
 */
export type DeliveryCustomizationCreatePayload = {
/**
 * Returns the created delivery customization.
 */
deliveryCustomization: { baseType: DeliveryCustomization, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DeliveryCustomizationError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DeliveryCustomizationCreatePayload", returnType: "DeliveryCustomizationCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `deliveryCustomizationDelete` mutation.
 */
export type DeliveryCustomizationDeletePayload = {
/**
 * Returns the deleted delivery customization ID.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DeliveryCustomizationError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DeliveryCustomizationDeletePayload", returnType: "DeliveryCustomizationDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DeliveryCustomization and a cursor during pagination.
 */
export type DeliveryCustomizationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DeliveryCustomizationEdge.
 */
node: { baseType: DeliveryCustomization, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCustomizationEdge", returnType: "DeliveryCustomizationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of a delivery customization mutation.
 */
export type DeliveryCustomizationError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.DeliveryCustomizationErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryCustomizationError", returnType: "DeliveryCustomizationError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `deliveryCustomizationUpdate` mutation.
 */
export type DeliveryCustomizationUpdatePayload = {
/**
 * Returns the updated delivery customization.
 */
deliveryCustomization: { baseType: DeliveryCustomization, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DeliveryCustomizationError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DeliveryCustomizationUpdatePayload", returnType: "DeliveryCustomizationUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
 */
export type DeliveryLegacyModeBlocked = {
/**
 * Whether the shop can convert to full multi-location delivery profiles mode.
 */
blocked: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reasons why the shop is blocked from converting to full multi-location delivery profiles mode.
 */
reasons: { baseType: BaseTypes.DeliveryLegacyModeBlockedReason, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

__typename: { baseType: "DeliveryLegacyModeBlocked", returnType: "DeliveryLegacyModeBlocked", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Local pickup settings associated with a location.
 */
export type DeliveryLocalPickupSettings = {
/**
 * Additional instructions or information related to the local pickup.
 */
instructions: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The estimated pickup time to show customers at checkout.
 */
pickupTime: { baseType: BaseTypes.DeliveryLocalPickupTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryLocalPickupSettings", returnType: "DeliveryLocalPickupSettings", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A location group is a collection of locations. They share zones and delivery methods across delivery
 * profiles.
 */
export type DeliveryLocationGroup = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of all locations that are part of this location group.
 */
locations: { baseType: LocationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; includeInactive?: BaseTypes.Boolean | null; includeLegacy?: BaseTypes.Boolean | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.LocationSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A count of all locations that are part of this location group.
 */
locationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "DeliveryLocationGroup", returnType: "DeliveryLocationGroup", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Links a location group with a zone and the associated method definitions.
 */
export type DeliveryLocationGroupZone = {
/**
 * The number of method definitions for the zone.
 */
methodDefinitionCounts: { baseType: DeliveryMethodDefinitionCounts, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The method definitions associated to a zone and location group.
 */
methodDefinitions: { baseType: DeliveryMethodDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; eligible?: BaseTypes.Boolean | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MethodDefinitionSortKeys | null; type?: BaseTypes.DeliveryMethodDefinitionType | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The zone associated to a location group.
 */
zone: { baseType: DeliveryZone, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryLocationGroupZone", returnType: "DeliveryLocationGroupZone", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple DeliveryLocationGroupZones.
 */
export type DeliveryLocationGroupZoneConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DeliveryLocationGroupZoneEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DeliveryLocationGroupZoneEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DeliveryLocationGroupZone, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryLocationGroupZoneConnection", returnType: "DeliveryLocationGroupZoneConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.
 */
export type DeliveryLocationGroupZoneEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DeliveryLocationGroupZoneEdge.
 */
node: { baseType: DeliveryLocationGroupZone, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryLocationGroupZoneEdge", returnType: "DeliveryLocationGroupZoneEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an error that happened when changing local pickup settings for a location.
 */
export type DeliveryLocationLocalPickupSettingsError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.DeliveryLocationLocalPickupSettingsErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryLocationLocalPickupSettingsError", returnType: "DeliveryLocationLocalPickupSettingsError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The delivery method used by a fulfillment order.
 */
export type DeliveryMethod = {
/**
 * The Additional information to consider when performing the delivery.
 */
additionalInformation: { baseType: DeliveryMethodAdditionalInformation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The branded promise that was presented to the buyer during checkout.  For example: Shop Promise.
 */
brandedPromise: { baseType: DeliveryBrandedPromise, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The latest delivery date and time when the fulfillment is expected to arrive at the buyer's location.
 */
maxDeliveryDateTime: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The type of the delivery method.
 */
methodType: { baseType: BaseTypes.DeliveryMethodType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The earliest delivery date and time when the fulfillment is expected to arrive at the buyer's location.
 */
minDeliveryDateTime: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A reference to the shipping method.
 */
serviceCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Source reference is promise provider specific data associated with delivery promise.
 */
sourceReference: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "DeliveryMethod", returnType: "DeliveryMethod", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Additional information included on a delivery method that will help during the delivery process.
 */
export type DeliveryMethodAdditionalInformation = {
/**
 * The delivery instructions to follow when performing the delivery.
 */
instructions: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The phone number to contact when performing the delivery.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "DeliveryMethodAdditionalInformation", returnType: "DeliveryMethodAdditionalInformation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A method definition contains the delivery rate and the conditions that must be met for the method to be
 * applied.
 */
export type DeliveryMethodDefinition = {
/**
 * Whether this method definition is active.
 */
active: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of the method definition. Only available on shipping rates that are custom.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The method conditions that must pass for this method definition to be applied to an order.
 */
methodConditions: { baseType: DeliveryCondition, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The name of the method definition.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The provided rate for this method definition, from a rate definition or participant.
 */
rateProvider: { members: { DeliveryParticipant: DeliveryParticipant; DeliveryRateDefinition: DeliveryRateDefinition }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryMethodDefinition", returnType: "DeliveryMethodDefinition", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple DeliveryMethodDefinitions.
 */
export type DeliveryMethodDefinitionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DeliveryMethodDefinitionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DeliveryMethodDefinitionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DeliveryMethodDefinition, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryMethodDefinitionConnection", returnType: "DeliveryMethodDefinitionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The number of method definitions for a zone, separated into merchant-owned and participant definitions.
 */
export type DeliveryMethodDefinitionCounts = {
/**
 * The number of participant method definitions for the specified zone.
 */
participantDefinitionsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of merchant-defined method definitions for the specified zone.
 */
rateDefinitionsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryMethodDefinitionCounts", returnType: "DeliveryMethodDefinitionCounts", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.
 */
export type DeliveryMethodDefinitionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DeliveryMethodDefinitionEdge.
 */
node: { baseType: DeliveryMethodDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryMethodDefinitionEdge", returnType: "DeliveryMethodDefinitionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A participant defines carrier-calculated rates for shipping services
 * with a possible merchant-defined fixed fee or a percentage-of-rate fee.
 */
export type DeliveryParticipant = {
/**
 * Whether to display new shipping services automatically to the customer when the service becomes available.
 */
adaptToNewServicesFlag: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The carrier used for this participant.
 */
carrierService: { baseType: DeliveryCarrierService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The merchant-defined fixed fee for this participant.
 */
fixedFee: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The carrier-specific services offered by the participant, and whether each service is active.
 */
participantServices: { baseType: DeliveryParticipantService, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The merchant-defined percentage-of-rate fee for this participant.
 */
percentageOfRateFee: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryParticipant", returnType: "DeliveryParticipant", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A mail service provided by the participant.
 */
export type DeliveryParticipantService = {
/**
 * Whether the service is active.
 */
active: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the service.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryParticipantService", returnType: "DeliveryParticipantService", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * How many product variants are in a profile. This count is capped at 500.
 */
export type DeliveryProductVariantsCount = {
/**
 * Whether the count has reached the cap of 500.
 */
capped: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant count.
 */
count: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryProductVariantsCount", returnType: "DeliveryProductVariantsCount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. Learn more about [building with delivery profiles](https://shopify.dev/apps/build/purchase-options/deferred/delivery-and-deferment/build-delivery-profiles).
 */
export type DeliveryProfile = {
/**
 * The number of active shipping rates for the profile.
 */
activeMethodDefinitionsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether this is the default profile.
 */
default: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether this shop has enabled legacy compatibility mode for delivery profiles.
 */
legacyMode: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of locations without rates defined.
 */
locationsWithoutRatesCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the delivery profile.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of active origin locations for the profile.
 */
originLocationCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How many product variants are in this profile.
 */
productVariantsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * How many product variants are in this profile.
 */
productVariantsCountV2: { baseType: DeliveryProductVariantsCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The products and variants associated with this profile.
 */
profileItems: { baseType: DeliveryProfileItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location groups and associated zones using this profile.
 */
profileLocationGroups: { baseType: DeliveryProfileLocationGroup, arguments: { locationGroupId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Selling plan groups associated with the specified delivery profile.
 */
sellingPlanGroups: { baseType: SellingPlanGroupConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of locations that haven't been assigned to a location group for this profile.
 */
unassignedLocations: { baseType: Location, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * List of locations that have not been assigned to a location group for this profile.
 */
unassignedLocationsPaginated: { baseType: LocationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of countries with active rates to deliver to.
 */
zoneCountryCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryProfile", returnType: "DeliveryProfile", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple DeliveryProfiles.
 */
export type DeliveryProfileConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DeliveryProfileEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DeliveryProfileEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DeliveryProfile, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryProfileConnection", returnType: "DeliveryProfileConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `deliveryProfileCreate` mutation.
 */
export type DeliveryProfileCreatePayload = {
/**
 * The delivery profile that was created.
 */
profile: { baseType: DeliveryProfile, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DeliveryProfileCreatePayload", returnType: "DeliveryProfileCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DeliveryProfile and a cursor during pagination.
 */
export type DeliveryProfileEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DeliveryProfileEdge.
 */
node: { baseType: DeliveryProfile, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryProfileEdge", returnType: "DeliveryProfileEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A product and the subset of associated variants that are part of this delivery profile.
 */
export type DeliveryProfileItem = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A product associated with this profile.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variants associated with this delivery profile.
 */
variants: { baseType: ProductVariantConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryProfileItem", returnType: "DeliveryProfileItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple DeliveryProfileItems.
 */
export type DeliveryProfileItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DeliveryProfileItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DeliveryProfileItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DeliveryProfileItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryProfileItemConnection", returnType: "DeliveryProfileItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.
 */
export type DeliveryProfileItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DeliveryProfileItemEdge.
 */
node: { baseType: DeliveryProfileItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryProfileItemEdge", returnType: "DeliveryProfileItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Links a location group with zones. Both are associated to a delivery profile.
 */
export type DeliveryProfileLocationGroup = {
/**
 * The countries already selected in any zone for the specified location group.
 */
countriesInAnyZone: { baseType: DeliveryCountryAndZone, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The collection of locations that make up the specified location group.
 */
locationGroup: { baseType: DeliveryLocationGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The applicable zones associated to the specified location group.
 */
locationGroupZones: { baseType: DeliveryLocationGroupZoneConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryProfileLocationGroup", returnType: "DeliveryProfileLocationGroup", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `deliveryProfileRemove` mutation.
 */
export type DeliveryProfileRemovePayload = {
/**
 * The delivery profile deletion job triggered by the mutation.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DeliveryProfileRemovePayload", returnType: "DeliveryProfileRemovePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `deliveryProfileUpdate` mutation.
 */
export type DeliveryProfileUpdatePayload = {
/**
 * The delivery profile that was updated.
 */
profile: { baseType: DeliveryProfile, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DeliveryProfileUpdatePayload", returnType: "DeliveryProfileUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A delivery promise provider. Currently restricted to select approved delivery promise partners.
 */
export type DeliveryPromiseProvider = {
/**
 * Whether the delivery promise provider is active. Defaults to `true` when creating a provider.
 */
active: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of seconds to add to the current time as a buffer when looking up delivery promises. Represents how long the shop requires before releasing an order to the fulfillment provider.
 */
fulfillmentDelay: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location associated with this delivery promise provider.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The time zone to be used for interpreting day of week and cutoff times in delivery schedules when looking up delivery promises.
 */
timeZone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryPromiseProvider", returnType: "DeliveryPromiseProvider", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `deliveryPromiseProviderUpsert` mutation.
 */
export type DeliveryPromiseProviderUpsertPayload = {
/**
 * The created or updated delivery promise provider.
 */
deliveryPromiseProvider: { baseType: DeliveryPromiseProvider, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DeliveryPromiseProviderUpsertUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DeliveryPromiseProviderUpsertPayload", returnType: "DeliveryPromiseProviderUpsertPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `DeliveryPromiseProviderUpsert`.
 */
export type DeliveryPromiseProviderUpsertUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.DeliveryPromiseProviderUpsertUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryPromiseProviderUpsertUserError", returnType: "DeliveryPromiseProviderUpsertUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A region that is used to define a shipping zone.
 */
export type DeliveryProvince = {
/**
 * The code of the region.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The full name of the region.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The translated name of the region. The translation returned is based on the system's locale.
 */
translatedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryProvince", returnType: "DeliveryProvince", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition).
 */
export type DeliveryRateDefinition = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price of this rate.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryRateDefinition", returnType: "DeliveryRateDefinition", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A rate provided by a merchant-defined rate or a participant.
 */
export type DeliveryRateProvider = DeliveryParticipant | DeliveryRateDefinition

/**
 * The `DeliverySetting` object enables you to manage shop-wide shipping settings.
 * You can enable legacy compatibility mode for the multi-location delivery profiles feature
 * if the legacy mode isn't blocked.
 */
export type DeliverySetting = {
/**
 * Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
 */
legacyModeBlocked: { baseType: DeliveryLegacyModeBlocked, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Enables legacy compatability mode for the multi-location delivery profiles feature.
 */
legacyModeProfiles: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliverySetting", returnType: "DeliverySetting", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `deliverySettingUpdate` mutation.
 */
export type DeliverySettingUpdatePayload = {
/**
 * The updated delivery shop level settings.
 */
setting: { baseType: DeliverySetting, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DeliverySettingUpdatePayload", returnType: "DeliverySettingUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `deliveryShippingOriginAssign` mutation.
 */
export type DeliveryShippingOriginAssignPayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DeliveryShippingOriginAssignPayload", returnType: "DeliveryShippingOriginAssignPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones.
 */
export type DeliveryZone = {
/**
 * The list of countries within the zone.
 */
countries: { baseType: DeliveryCountry, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the zone.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DeliveryZone", returnType: "DeliveryZone", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A discount.
 */
export type Discount = DiscountAutomaticApp | DiscountAutomaticBasic | DiscountAutomaticBxgy | DiscountAutomaticFreeShipping | DiscountCodeApp | DiscountCodeBasic | DiscountCodeBxgy | DiscountCodeFreeShipping

/**
 * An amount that's allocated to a line based on an associated discount application.
 */
export type DiscountAllocation = {
/**
 * The money amount that's allocated to a line based on the associated discount application.
 */
allocatedAmount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies.
 */
allocatedAmountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount application that the allocated amount originated from.
 */
discountApplication: { members: { AutomaticDiscountApplication: AutomaticDiscountApplication; DiscountCodeApplication: DiscountCodeApplication; ManualDiscountApplication: ManualDiscountApplication; ScriptDiscountApplication: ScriptDiscountApplication }, fields: { allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; index: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountAllocation", returnType: "DiscountAllocation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The fixed amount value of a discount, and whether the amount is applied to each entitled item or spread evenly across the entitled items.
 */
export type DiscountAmount = {
/**
 * The value of the discount.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
 */
appliesOnEachItem: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountAmount", returnType: "DiscountAmount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Discount applications capture the intentions of a discount source at
 * the time of application on an order's line items or shipping lines.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export type DiscountApplication = {
/**
 * The method by which the discount's value is applied to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * An ordered index that can be used to identify the discount application and indicate the precedence
 * of the discount application for calculations.
 */
index: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How the discount amount is distributed on the discounted lines.
 */
targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is applied on line items or shipping lines.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the discount application.
 */
value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple DiscountApplications.
 */
export type DiscountApplicationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DiscountApplicationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DiscountApplicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { AutomaticDiscountApplication: AutomaticDiscountApplication; DiscountCodeApplication: DiscountCodeApplication; ManualDiscountApplication: ManualDiscountApplication; ScriptDiscountApplication: ScriptDiscountApplication }, fields: { allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; index: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountApplicationConnection", returnType: "DiscountApplicationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DiscountApplication and a cursor during pagination.
 */
export type DiscountApplicationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DiscountApplicationEdge.
 */
node: { members: { AutomaticDiscountApplication: AutomaticDiscountApplication; DiscountCodeApplication: DiscountCodeApplication; ManualDiscountApplication: ManualDiscountApplication; ScriptDiscountApplication: ScriptDiscountApplication }, fields: { allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; index: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountApplicationEdge", returnType: "DiscountApplicationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The type of discount associated to the automatic discount. For example, the automatic discount might offer a basic discount using a fixed percentage, or a fixed amount, on specific products from the order. The automatic discount may also be a BXGY discount, which offers customer discounts on select products if they add a specific product to their order.
 */
export type DiscountAutomatic = DiscountAutomaticApp | DiscountAutomaticBasic | DiscountAutomaticBxgy | DiscountAutomaticFreeShipping

/**
 * Return type for `discountAutomaticActivate` mutation.
 */
export type DiscountAutomaticActivatePayload = {
/**
 * The activated automatic discount.
 */
automaticDiscountNode: { baseType: DiscountAutomaticNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticActivatePayload", returnType: "DiscountAutomaticActivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountAutomaticApp` object stores information about automatic discounts
 * that are managed by an app using
 * [Shopify Functions](https://shopify.dev/docs/apps/build/functions).
 * Use `DiscountAutomaticApp`when you need advanced, custom, or
 * dynamic discount capabilities that aren't supported by
 * [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
 *
 * Learn more about creating
 * [custom discount functionality](https://shopify.dev/docs/apps/build/discounts/build-discount-function).
 *
 * > Note:
 * > The [`DiscountCodeApp`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeApp)
 * object has similar functionality to the `DiscountAutomaticApp` object, with the exception that `DiscountCodeApp`
 * stores information about discount codes that are managed by an app using Shopify Functions.
 */
export type DiscountAutomaticApp = {
/**
 * The details about the app extension that's providing the
 * [discount type](https://help.shopify.com/manual/discounts/discount-types).
 * This information includes the app extension's name and
 * [client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets),
 * [App Bridge configuration](https://shopify.dev/docs/api/app-bridge),
 * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations),
 * [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries),
 * and other metadata about the discount type, including the discount type's name and description.
 */
appDiscountType: { baseType: AppDiscountType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of times that the discount has been used.
 * For example, if a "Buy 3, Get 1 Free" t-shirt discount
 * is automatically applied in 200 transactions, then the
 * discount has been used 200 times.
 * This value is updated asynchronously. As a result,
 * it might be lower than the actual usage count until the
 * asynchronous process is completed.
 */
asyncUsageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The
 * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that you can use in combination with
 * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
combinesWith: { baseType: DiscountCombinesWith, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The
 * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
discountClass: { baseType: BaseTypes.DiscountClass, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [globally-unique ID](https://shopify.dev/docs/api/usage/gids)
 * for the discount.
 */
discountId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount expires and is no longer available to customers.
 * For discounts without a fixed expiration date, specify `null`.
 */
endsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The [error history](https://shopify.dev/docs/apps/build/functions/monitoring-and-errors)
 * for the latest version of the discount type that the app provides.
 */
errorHistory: { baseType: FunctionsErrorHistory, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the discount becomes active and is available to customers.
 */
startsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the discount that describes its availability,
 * expiration, or pending activation.
 */
status: { baseType: BaseTypes.DiscountStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount's name that displays to merchants in the Shopify admin and to customers.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountAutomaticApp", returnType: "DiscountAutomaticApp", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountAutomaticAppCreate` mutation.
 */
export type DiscountAutomaticAppCreatePayload = {
/**
 * The automatic discount that the app manages.
 */
automaticAppDiscount: { baseType: DiscountAutomaticApp, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticAppCreatePayload", returnType: "DiscountAutomaticAppCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountAutomaticAppUpdate` mutation.
 */
export type DiscountAutomaticAppUpdatePayload = {
/**
 * The updated automatic discount that the app provides.
 */
automaticAppDiscount: { baseType: DiscountAutomaticApp, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticAppUpdatePayload", returnType: "DiscountAutomaticAppUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountAutomaticBasic` object lets you manage
 * [amount off discounts](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
 * that are automatically applied on a cart and at checkout. Amount off discounts give customers a
 * fixed value or a percentage off the products in an order, but don't apply to shipping costs.
 *
 * The `DiscountAutomaticBasic` object stores information about automatic amount off discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountCodeBasic`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeBasic)
 * object has similar functionality to the `DiscountAutomaticBasic` object, but customers need to enter a code to
 * receive a discount.
 */
export type DiscountAutomaticBasic = {
/**
 * The number of times that the discount has been used.
 * For example, if a "Buy 3, Get 1 Free" t-shirt discount
 * is automatically applied in 200 transactions, then the
 * discount has been used 200 times.
 * This value is updated asynchronously. As a result,
 * it might be lower than the actual usage count until the
 * asynchronous process is completed.
 */
asyncUsageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The
 * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that you can use in combination with
 * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
combinesWith: { baseType: DiscountCombinesWith, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The items in the order that qualify for the discount, their quantities, and the total value of the discount.
 */
customerGets: { baseType: DiscountCustomerGets, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
discountClass: { baseType: BaseTypes.MerchandiseDiscountClass, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount expires and is no longer available to customers.
 * For discounts without a fixed expiration date, specify `null`.
 */
endsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The minimum subtotal or quantity of items that are required for the discount to be applied.
 */
minimumRequirement: { members: { DiscountMinimumQuantity: DiscountMinimumQuantity; DiscountMinimumSubtotal: DiscountMinimumSubtotal }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of billing cycles for which the discount can be applied,
 * which is useful for subscription-based discounts. For example, if you set this field
 * to `3`, then the discount only applies to the first three billing cycles of a
 * subscription. If you specify `0`, then the discount applies indefinitely.
 */
recurringCycleLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * An abbreviated version of the discount
 * [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticBasic#field-summary)
 * field.
 */
shortSummary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount becomes active and is available to customers.
 */
startsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the discount that describes its availability,
 * expiration, or pending activation.
 */
status: { baseType: BaseTypes.DiscountStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A detailed explanation of what the discount is,
 * who can use it, when and where it applies, and any associated
 * rules or limitations.
 */
summary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount's name that displays to merchants in the Shopify admin and to customers.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of times that the discount has been used.
 */
usageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountAutomaticBasic", returnType: "DiscountAutomaticBasic", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountAutomaticBasicCreate` mutation.
 */
export type DiscountAutomaticBasicCreatePayload = {
/**
 * The automatic discount that was created.
 */
automaticDiscountNode: { baseType: DiscountAutomaticNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticBasicCreatePayload", returnType: "DiscountAutomaticBasicCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountAutomaticBasicUpdate` mutation.
 */
export type DiscountAutomaticBasicUpdatePayload = {
/**
 * The automatic discount that was updated.
 */
automaticDiscountNode: { baseType: DiscountAutomaticNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticBasicUpdatePayload", returnType: "DiscountAutomaticBasicUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountAutomaticBulkDelete` mutation.
 */
export type DiscountAutomaticBulkDeletePayload = {
/**
 * The asynchronous job removing the automatic discounts.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticBulkDeletePayload", returnType: "DiscountAutomaticBulkDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountAutomaticBxgy` object lets you manage
 * [buy X get Y discounts (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that are automatically applied on a cart and at checkout. BXGY discounts incentivize customers by offering
 * them additional items at a discounted price or for free when they purchase a specified quantity of items.
 *
 * The `DiscountAutomaticBxgy` object stores information about automatic BXGY discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountCodeBxgy`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeBxgy)
 * object has similar functionality to the `DiscountAutomaticBxgy` object, but customers need to enter a code to
 * receive a discount.
 */
export type DiscountAutomaticBxgy = {
/**
 * The number of times that the discount has been used.
 * For example, if a "Buy 3, Get 1 Free" t-shirt discount
 * is automatically applied in 200 transactions, then the
 * discount has been used 200 times.
 * This value is updated asynchronously. As a result,
 * it might be lower than the actual usage count until the
 * asynchronous process is completed.
 */
asyncUsageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The
 * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that you can use in combination with
 * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
combinesWith: { baseType: DiscountCombinesWith, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The items eligible for the discount and the required quantity of each to receive the discount.
 */
customerBuys: { baseType: DiscountCustomerBuys, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The items in the order that qualify for the discount, their quantities, and the total value of the discount.
 */
customerGets: { baseType: DiscountCustomerGets, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
discountClass: { baseType: BaseTypes.MerchandiseDiscountClass, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount expires and is no longer available to customers.
 * For discounts without a fixed expiration date, specify `null`.
 */
endsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The paginated list of events associated with the host subject.
 */
events: { baseType: EventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.EventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A legacy unique ID for the discount.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount becomes active and is available to customers.
 */
startsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the discount that describes its availability,
 * expiration, or pending activation.
 */
status: { baseType: BaseTypes.DiscountStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A detailed explanation of what the discount is,
 * who can use it, when and where it applies, and any associated
 * rules or limitations.
 */
summary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount's name that displays to merchants in the Shopify admin and to customers.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of times that the discount has been used.
 */
usageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum number of times that the discount can be applied to an order.
 */
usesPerOrderLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "DiscountAutomaticBxgy", returnType: "DiscountAutomaticBxgy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasEvents & Node

/**
 * Return type for `discountAutomaticBxgyCreate` mutation.
 */
export type DiscountAutomaticBxgyCreatePayload = {
/**
 * The automatic discount that was created.
 */
automaticDiscountNode: { baseType: DiscountAutomaticNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticBxgyCreatePayload", returnType: "DiscountAutomaticBxgyCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountAutomaticBxgyUpdate` mutation.
 */
export type DiscountAutomaticBxgyUpdatePayload = {
/**
 * The automatic discount that was updated.
 */
automaticDiscountNode: { baseType: DiscountAutomaticNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticBxgyUpdatePayload", returnType: "DiscountAutomaticBxgyUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple DiscountAutomatics.
 */
export type DiscountAutomaticConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DiscountAutomaticEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DiscountAutomaticEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { DiscountAutomaticApp: DiscountAutomaticApp; DiscountAutomaticBasic: DiscountAutomaticBasic; DiscountAutomaticBxgy: DiscountAutomaticBxgy; DiscountAutomaticFreeShipping: DiscountAutomaticFreeShipping }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountAutomaticConnection", returnType: "DiscountAutomaticConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountAutomaticDeactivate` mutation.
 */
export type DiscountAutomaticDeactivatePayload = {
/**
 * The deactivated automatic discount.
 */
automaticDiscountNode: { baseType: DiscountAutomaticNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticDeactivatePayload", returnType: "DiscountAutomaticDeactivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountAutomaticDelete` mutation.
 */
export type DiscountAutomaticDeletePayload = {
/**
 * The ID of the automatic discount that was deleted.
 */
deletedAutomaticDiscountId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticDeletePayload", returnType: "DiscountAutomaticDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DiscountAutomatic and a cursor during pagination.
 */
export type DiscountAutomaticEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DiscountAutomaticEdge.
 */
node: { members: { DiscountAutomaticApp: DiscountAutomaticApp; DiscountAutomaticBasic: DiscountAutomaticBasic; DiscountAutomaticBxgy: DiscountAutomaticBxgy; DiscountAutomaticFreeShipping: DiscountAutomaticFreeShipping }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountAutomaticEdge", returnType: "DiscountAutomaticEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountAutomaticFreeShipping` object lets you manage
 * [free shipping discounts](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
 * that are automatically applied on a cart and at checkout. Free shipping discounts are promotional deals that
 * merchants offer to customers to waive shipping costs and encourage online purchases.
 *
 * The `DiscountAutomaticFreeShipping` object stores information about automatic free shipping discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountCodeFreeShipping`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeFreeShipping)
 * object has similar functionality to the `DiscountAutomaticFreeShipping` object, but customers need to enter a code to
 * receive a discount.
 */
export type DiscountAutomaticFreeShipping = {
/**
 * Whether the discount applies on one-time purchases.
 * A one-time purchase is a transaction where you pay a
 * single time for a product, without any ongoing
 * commitments or recurring charges.
 */
appliesOnOneTimePurchase: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount applies on subscription items.
 * [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
 * enable customers to purchase products
 * on a recurring basis.
 */
appliesOnSubscription: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of times that the discount has been used.
 * For example, if a "Buy 3, Get 1 Free" t-shirt discount
 * is automatically applied in 200 transactions, then the
 * discount has been used 200 times.
 * This value is updated asynchronously. As a result,
 * it might be lower than the actual usage count until the
 * asynchronous process is completed.
 */
asyncUsageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The
 * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that you can use in combination with
 * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
combinesWith: { baseType: DiscountCombinesWith, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The countries that qualify for the discount.
 * You can define
 * [a list of countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountries)
 * or specify [all countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountryAll)
 * to be eligible for the discount.
 */
destinationSelection: { members: { DiscountCountries: DiscountCountries; DiscountCountryAll: DiscountCountryAll }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
discountClass: { baseType: BaseTypes.ShippingDiscountClass, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount expires and is no longer available to customers.
 * For discounts without a fixed expiration date, specify `null`.
 */
endsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether there are
 * [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
 * associated with the discount.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum shipping price amount accepted to qualify for the discount.
 */
maximumShippingPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The minimum subtotal or quantity of items that are required for the discount to be applied.
 */
minimumRequirement: { members: { DiscountMinimumQuantity: DiscountMinimumQuantity; DiscountMinimumSubtotal: DiscountMinimumSubtotal }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of billing cycles for which the discount can be applied,
 * which is useful for subscription-based discounts. For example, if you set this field
 * to `3`, then the discount only applies to the first three billing cycles of a
 * subscription. If you specify `0`, then the discount applies indefinitely.
 */
recurringCycleLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * An abbreviated version of the discount
 * [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticFreeShipping#field-summary)
 * field.
 */
shortSummary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount becomes active and is available to customers.
 */
startsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the discount that describes its availability,
 * expiration, or pending activation.
 */
status: { baseType: BaseTypes.DiscountStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A detailed explanation of what the discount is,
 * who can use it, when and where it applies, and any associated
 * rules or limitations.
 */
summary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount's name that displays to merchants in the Shopify admin and to customers.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total sales from orders where the discount was used.
 */
totalSales: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the discount was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountAutomaticFreeShipping", returnType: "DiscountAutomaticFreeShipping", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountAutomaticFreeShippingCreate` mutation.
 */
export type DiscountAutomaticFreeShippingCreatePayload = {
/**
 * The automatic free shipping discount that was created.
 */
automaticDiscountNode: { baseType: DiscountAutomaticNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticFreeShippingCreatePayload", returnType: "DiscountAutomaticFreeShippingCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountAutomaticFreeShippingUpdate` mutation.
 */
export type DiscountAutomaticFreeShippingUpdatePayload = {
/**
 * The automatic discount that was updated.
 */
automaticDiscountNode: { baseType: DiscountAutomaticNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountAutomaticFreeShippingUpdatePayload", returnType: "DiscountAutomaticFreeShippingUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountAutomaticNode` object enables you to manage [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts) that are applied when an order meets specific criteria. You can create amount off, free shipping, or buy X get Y automatic discounts. For example, you can offer customers a free shipping discount that applies when conditions are met. Or you can offer customers a buy X get Y discount that's automatically applied when customers spend a specified amount of money, or a specified quantity of products.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export type DiscountAutomaticNode = {
/**
 * A discount that's applied automatically when an order meets specific criteria. Learn more about [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts).
 */
automaticDiscount: { members: { DiscountAutomaticApp: DiscountAutomaticApp; DiscountAutomaticBasic: DiscountAutomaticBasic; DiscountAutomaticBxgy: DiscountAutomaticBxgy; DiscountAutomaticFreeShipping: DiscountAutomaticFreeShipping }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The paginated list of events associated with the host subject.
 */
events: { baseType: EventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.EventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountAutomaticNode", returnType: "DiscountAutomaticNode", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasEvents & HasMetafieldDefinitions & HasMetafields & Node

/**
 * An auto-generated type for paginating through multiple DiscountAutomaticNodes.
 */
export type DiscountAutomaticNodeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DiscountAutomaticNodeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DiscountAutomaticNodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DiscountAutomaticNode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountAutomaticNodeConnection", returnType: "DiscountAutomaticNodeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination.
 */
export type DiscountAutomaticNodeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DiscountAutomaticNodeEdge.
 */
node: { baseType: DiscountAutomaticNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountAutomaticNodeEdge", returnType: "DiscountAutomaticNodeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The type of discount associated with the discount code. For example, the discount code might offer a basic discount of a fixed percentage, or a fixed amount, on specific products or the order. Alternatively, the discount might offer the customer free shipping on their order. A third option is a Buy X, Get Y (BXGY) discount, which offers a customer discounts on select products if they add a specific product to their order.
 */
export type DiscountCode = DiscountCodeApp | DiscountCodeBasic | DiscountCodeBxgy | DiscountCodeFreeShipping

/**
 * Return type for `discountCodeActivate` mutation.
 */
export type DiscountCodeActivatePayload = {
/**
 * The activated code discount.
 */
codeDiscountNode: { baseType: DiscountCodeNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeActivatePayload", returnType: "DiscountCodeActivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountCodeApp` object stores information about code discounts
 * that are managed by an app using
 * [Shopify Functions](https://shopify.dev/docs/apps/build/functions).
 * Use `DiscountCodeApp` when you need advanced, custom, or
 * dynamic discount capabilities that aren't supported by
 * [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
 *
 * Learn more about creating
 * [custom discount functionality](https://shopify.dev/docs/apps/build/discounts/build-discount-function).
 *
 * > Note:
 * > The [`DiscountAutomaticApp`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticApp)
 * object has similar functionality to the `DiscountCodeApp` object, with the exception that `DiscountAutomaticApp`
 * stores information about automatic discounts that are managed by an app using Shopify Functions.
 */
export type DiscountCodeApp = {
/**
 * The details about the app extension that's providing the
 * [discount type](https://help.shopify.com/manual/discounts/discount-types).
 * This information includes the app extension's name and
 * [client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets),
 * [App Bridge configuration](https://shopify.dev/docs/api/app-bridge),
 * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations),
 * [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries),
 * and other metadata about the discount type, including the discount type's name and description.
 */
appDiscountType: { baseType: AppDiscountType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a customer can only use the discount once.
 */
appliesOncePerCustomer: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of times that the discount has been used.
 * For example, if a "Buy 3, Get 1 Free" t-shirt discount
 * is automatically applied in 200 transactions, then the
 * discount has been used 200 times.
 * This value is updated asynchronously. As a result,
 * it might be lower than the actual usage count until the
 * asynchronous process is completed.
 */
asyncUsageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list codes that customers can use to redeem the discount.
 */
codes: { baseType: DiscountRedeemCodeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.DiscountCodeSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of codes that a customer can use to redeem the discount.
 */
codesCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The
 * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that you can use in combination with
 * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
combinesWith: { baseType: DiscountCombinesWith, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customers that can use the discount.
 */
customerSelection: { members: { DiscountCustomerAll: DiscountCustomerAll; DiscountCustomerSegments: DiscountCustomerSegments; DiscountCustomers: DiscountCustomers }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The
 * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
discountClass: { baseType: BaseTypes.DiscountClass, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [globally-unique ID](https://shopify.dev/docs/api/usage/gids)
 * for the discount.
 */
discountId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount expires and is no longer available to customers.
 * For discounts without a fixed expiration date, specify `null`.
 */
endsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The [error history](https://shopify.dev/docs/apps/build/functions/monitoring-and-errors)
 * for the latest version of the discount type that the app provides.
 */
errorHistory: { baseType: FunctionsErrorHistory, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether there are
 * [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
 * associated with the discount.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of billing cycles for which the discount can be applied,
 * which is useful for subscription-based discounts. For example, if you set this field
 * to `3`, then the discount only applies to the first three billing cycles of a
 * subscription. If you specify `0`, then the discount applies indefinitely.
 */
recurringCycleLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of URLs that the app can use to share the discount.
 */
shareableUrls: { baseType: DiscountShareableUrl, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The date and time when the discount becomes active and is available to customers.
 */
startsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the discount that describes its availability,
 * expiration, or pending activation.
 */
status: { baseType: BaseTypes.DiscountStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount's name that displays to merchants in the Shopify admin and to customers.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total sales from orders where the discount was used.
 */
totalSales: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the discount was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum number of times that a customer can use the discount.
 * For discounts with unlimited usage, specify `null`.
 */
usageLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "DiscountCodeApp", returnType: "DiscountCodeApp", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeAppCreate` mutation.
 */
export type DiscountCodeAppCreatePayload = {
/**
 * The discount that the app provides.
 */
codeAppDiscount: { baseType: DiscountCodeApp, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeAppCreatePayload", returnType: "DiscountCodeAppCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeAppUpdate` mutation.
 */
export type DiscountCodeAppUpdatePayload = {
/**
 * The updated discount that the app provides.
 */
codeAppDiscount: { baseType: DiscountCodeApp, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeAppUpdatePayload", returnType: "DiscountCodeAppUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Discount code applications capture the intentions of a discount code at
 * the time that it is applied onto an order.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export type DiscountCodeApplication = {
/**
 * The method by which the discount's value is applied to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The string identifying the discount code that was used at the time of application.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * An ordered index that can be used to identify the discount application and indicate the precedence
 * of the discount application for calculations.
 */
index: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How the discount amount is distributed on the discounted lines.
 */
targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is applied on line items or shipping lines.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the discount application.
 */
value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountCodeApplication", returnType: "DiscountCodeApplication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DiscountApplication

/**
 * The `DiscountCodeBasic` object lets you manage
 * [amount off discounts](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
 * that are applied on a cart and at checkout when a customer enters a code. Amount off discounts give customers a
 * fixed value or a percentage off the products in an order, but don't apply to shipping costs.
 *
 * The `DiscountCodeBasic` object stores information about amount off code discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountAutomaticBasic`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticBasic)
 * object has similar functionality to the `DiscountCodeBasic` object, but discounts are automatically applied,
 * without the need for customers to enter a code.
 */
export type DiscountCodeBasic = {
/**
 * Whether a customer can only use the discount once.
 */
appliesOncePerCustomer: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of times that the discount has been used.
 * For example, if a "Buy 3, Get 1 Free" t-shirt discount
 * is automatically applied in 200 transactions, then the
 * discount has been used 200 times.
 * This value is updated asynchronously. As a result,
 * it might be lower than the actual usage count until the
 * asynchronous process is completed.
 */
asyncUsageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list codes that customers can use to redeem the discount.
 */
codes: { baseType: DiscountRedeemCodeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.DiscountCodeSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of codes that a customer can use to redeem the discount.
 */
codesCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The
 * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that you can use in combination with
 * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
combinesWith: { baseType: DiscountCombinesWith, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The items in the order that qualify for the discount, their quantities, and the total value of the discount.
 */
customerGets: { baseType: DiscountCustomerGets, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customers that can use the discount.
 */
customerSelection: { members: { DiscountCustomerAll: DiscountCustomerAll; DiscountCustomerSegments: DiscountCustomerSegments; DiscountCustomers: DiscountCustomers }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
discountClass: { baseType: BaseTypes.MerchandiseDiscountClass, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount expires and is no longer available to customers.
 * For discounts without a fixed expiration date, specify `null`.
 */
endsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether there are
 * [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
 * associated with the discount.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The minimum subtotal or quantity of items that are required for the discount to be applied.
 */
minimumRequirement: { members: { DiscountMinimumQuantity: DiscountMinimumQuantity; DiscountMinimumSubtotal: DiscountMinimumSubtotal }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of billing cycles for which the discount can be applied,
 * which is useful for subscription-based discounts. For example, if you set this field
 * to `3`, then the discount only applies to the first three billing cycles of a
 * subscription. If you specify `0`, then the discount applies indefinitely.
 */
recurringCycleLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of URLs that the app can use to share the discount.
 */
shareableUrls: { baseType: DiscountShareableUrl, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An abbreviated version of the discount
 * [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeBasic#field-summary)
 * field.
 */
shortSummary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount becomes active and is available to customers.
 */
startsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the discount that describes its availability,
 * expiration, or pending activation.
 */
status: { baseType: BaseTypes.DiscountStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A detailed explanation of what the discount is,
 * who can use it, when and where it applies, and any associated
 * rules or limitations.
 */
summary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount's name that displays to merchants in the Shopify admin and to customers.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total sales from orders where the discount was used.
 */
totalSales: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the discount was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum number of times that a customer can use the discount.
 * For discounts with unlimited usage, specify `null`.
 */
usageLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "DiscountCodeBasic", returnType: "DiscountCodeBasic", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeBasicCreate` mutation.
 */
export type DiscountCodeBasicCreatePayload = {
/**
 * The discount code that was created.
 */
codeDiscountNode: { baseType: DiscountCodeNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeBasicCreatePayload", returnType: "DiscountCodeBasicCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeBasicUpdate` mutation.
 */
export type DiscountCodeBasicUpdatePayload = {
/**
 * The discount code that was updated.
 */
codeDiscountNode: { baseType: DiscountCodeNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeBasicUpdatePayload", returnType: "DiscountCodeBasicUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeBulkActivate` mutation.
 */
export type DiscountCodeBulkActivatePayload = {
/**
 * The asynchronous job that activates the discounts.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeBulkActivatePayload", returnType: "DiscountCodeBulkActivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeBulkDeactivate` mutation.
 */
export type DiscountCodeBulkDeactivatePayload = {
/**
 * The asynchronous job that deactivates the discounts.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeBulkDeactivatePayload", returnType: "DiscountCodeBulkDeactivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeBulkDelete` mutation.
 */
export type DiscountCodeBulkDeletePayload = {
/**
 * The asynchronous job that deletes the discounts.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeBulkDeletePayload", returnType: "DiscountCodeBulkDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountCodeBxgy` object lets you manage
 * [buy X get Y discounts (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that are applied on a cart and at checkout when a customer enters a code. BXGY discounts incentivize customers
 * by offering them additional items at a discounted price or for free when they purchase a specified quantity
 * of items.
 *
 * The `DiscountCodeBxgy` object stores information about BXGY code discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountAutomaticBxgy`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticBxgy)
 * object has similar functionality to the `DiscountCodeBxgy` object, but discounts are automatically applied,
 * without the need for customers to enter a code.
 */
export type DiscountCodeBxgy = {
/**
 * Whether a customer can only use the discount once.
 */
appliesOncePerCustomer: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of times that the discount has been used.
 * For example, if a "Buy 3, Get 1 Free" t-shirt discount
 * is automatically applied in 200 transactions, then the
 * discount has been used 200 times.
 * This value is updated asynchronously. As a result,
 * it might be lower than the actual usage count until the
 * asynchronous process is completed.
 */
asyncUsageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list codes that customers can use to redeem the discount.
 */
codes: { baseType: DiscountRedeemCodeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.DiscountCodeSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of codes that a customer can use to redeem the discount.
 */
codesCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The
 * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that you can use in combination with
 * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
combinesWith: { baseType: DiscountCombinesWith, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The items eligible for the discount and the required quantity of each to receive the discount.
 */
customerBuys: { baseType: DiscountCustomerBuys, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The items in the order that qualify for the discount, their quantities, and the total value of the discount.
 */
customerGets: { baseType: DiscountCustomerGets, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customers that can use the discount.
 */
customerSelection: { members: { DiscountCustomerAll: DiscountCustomerAll; DiscountCustomerSegments: DiscountCustomerSegments; DiscountCustomers: DiscountCustomers }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
discountClass: { baseType: BaseTypes.MerchandiseDiscountClass, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount expires and is no longer available to customers.
 * For discounts without a fixed expiration date, specify `null`.
 */
endsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether there are
 * [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
 * associated with the discount.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of URLs that the app can use to share the discount.
 */
shareableUrls: { baseType: DiscountShareableUrl, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The date and time when the discount becomes active and is available to customers.
 */
startsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the discount that describes its availability,
 * expiration, or pending activation.
 */
status: { baseType: BaseTypes.DiscountStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A detailed explanation of what the discount is,
 * who can use it, when and where it applies, and any associated
 * rules or limitations.
 */
summary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount's name that displays to merchants in the Shopify admin and to customers.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total sales from orders where the discount was used.
 */
totalSales: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the discount was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum number of times that a customer can use the discount.
 * For discounts with unlimited usage, specify `null`.
 */
usageLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The maximum number of times that the discount can be applied to an order.
 */
usesPerOrderLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "DiscountCodeBxgy", returnType: "DiscountCodeBxgy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeBxgyCreate` mutation.
 */
export type DiscountCodeBxgyCreatePayload = {
/**
 * The code discount that was created.
 */
codeDiscountNode: { baseType: DiscountCodeNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeBxgyCreatePayload", returnType: "DiscountCodeBxgyCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeBxgyUpdate` mutation.
 */
export type DiscountCodeBxgyUpdatePayload = {
/**
 * The code discount that was updated.
 */
codeDiscountNode: { baseType: DiscountCodeNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeBxgyUpdatePayload", returnType: "DiscountCodeBxgyUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeDeactivate` mutation.
 */
export type DiscountCodeDeactivatePayload = {
/**
 * The deactivated code discount.
 */
codeDiscountNode: { baseType: DiscountCodeNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeDeactivatePayload", returnType: "DiscountCodeDeactivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeDelete` mutation.
 */
export type DiscountCodeDeletePayload = {
/**
 * The ID of the code discount that was deleted.
 */
deletedCodeDiscountId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeDeletePayload", returnType: "DiscountCodeDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountCodeFreeShipping` object lets you manage
 * [free shipping discounts](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
 * that are applied on a cart and at checkout when a customer enters a code. Free shipping discounts are
 * promotional deals that merchants offer to customers to waive shipping costs and encourage online purchases.
 *
 * The `DiscountCodeFreeShipping` object stores information about free shipping code discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The
 * [`DiscountAutomaticFreeShipping`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticFreeShipping)
 * object has similar functionality to the `DiscountCodeFreeShipping` object, but discounts are automatically applied,
 * without the need for customers to enter a code.
 */
export type DiscountCodeFreeShipping = {
/**
 * Whether the discount applies on one-time purchases.
 * A one-time purchase is a transaction where you pay a
 * single time for a product, without any ongoing
 * commitments or recurring charges.
 */
appliesOnOneTimePurchase: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount applies on subscription items.
 * [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
 * enable customers to purchase products
 * on a recurring basis.
 */
appliesOnSubscription: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a customer can only use the discount once.
 */
appliesOncePerCustomer: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of times that the discount has been used.
 * For example, if a "Buy 3, Get 1 Free" t-shirt discount
 * is automatically applied in 200 transactions, then the
 * discount has been used 200 times.
 * This value is updated asynchronously. As a result,
 * it might be lower than the actual usage count until the
 * asynchronous process is completed.
 */
asyncUsageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list codes that customers can use to redeem the discount.
 */
codes: { baseType: DiscountRedeemCodeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.DiscountCodeSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of codes that a customer can use to redeem the discount.
 */
codesCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The
 * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that you can use in combination with
 * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
combinesWith: { baseType: DiscountCombinesWith, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customers that can use the discount.
 */
customerSelection: { members: { DiscountCustomerAll: DiscountCustomerAll; DiscountCustomerSegments: DiscountCustomerSegments; DiscountCustomers: DiscountCustomers }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The countries that qualify for the discount.
 * You can define
 * [a list of countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountries)
 * or specify [all countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountryAll)
 * to be eligible for the discount.
 */
destinationSelection: { members: { DiscountCountries: DiscountCountries; DiscountCountryAll: DiscountCountryAll }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
discountClass: { baseType: BaseTypes.ShippingDiscountClass, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount expires and is no longer available to customers.
 * For discounts without a fixed expiration date, specify `null`.
 */
endsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether there are
 * [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
 * associated with the discount.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum shipping price amount accepted to qualify for the discount.
 */
maximumShippingPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The minimum subtotal or quantity of items that are required for the discount to be applied.
 */
minimumRequirement: { members: { DiscountMinimumQuantity: DiscountMinimumQuantity; DiscountMinimumSubtotal: DiscountMinimumSubtotal }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of billing cycles for which the discount can be applied,
 * which is useful for subscription-based discounts. For example, if you set this field
 * to `3`, then the discount only applies to the first three billing cycles of a
 * subscription. If you specify `0`, then the discount applies indefinitely.
 */
recurringCycleLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of URLs that the app can use to share the discount.
 */
shareableUrls: { baseType: DiscountShareableUrl, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An abbreviated version of the discount
 * [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeFreeShipping#field-summary)
 * field.
 */
shortSummary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the discount becomes active and is available to customers.
 */
startsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the discount that describes its availability,
 * expiration, or pending activation.
 */
status: { baseType: BaseTypes.DiscountStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A detailed explanation of what the discount is,
 * who can use it, when and where it applies, and any associated
 * rules or limitations.
 */
summary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount's name that displays to merchants in the Shopify admin and to customers.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total sales from orders where the discount was used.
 */
totalSales: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the discount was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum number of times that a customer can use the discount.
 * For discounts with unlimited usage, specify `null`.
 */
usageLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "DiscountCodeFreeShipping", returnType: "DiscountCodeFreeShipping", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeFreeShippingCreate` mutation.
 */
export type DiscountCodeFreeShippingCreatePayload = {
/**
 * The discount code that was created.
 */
codeDiscountNode: { baseType: DiscountCodeNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeFreeShippingCreatePayload", returnType: "DiscountCodeFreeShippingCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeFreeShippingUpdate` mutation.
 */
export type DiscountCodeFreeShippingUpdatePayload = {
/**
 * The discount code that was updated.
 */
codeDiscountNode: { baseType: DiscountCodeNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeFreeShippingUpdatePayload", returnType: "DiscountCodeFreeShippingUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountCodeNode` object enables you to manage [code discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) that are applied when customers enter a code at checkout. For example, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store. Or, you can offer discounts where customers have to enter a code to get free shipping. Merchants can create and share discount codes individually with customers.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export type DiscountCodeNode = {
/**
 * The underlying code discount object.
 */
codeDiscount: { members: { DiscountCodeApp: DiscountCodeApp; DiscountCodeBasic: DiscountCodeBasic; DiscountCodeBxgy: DiscountCodeBxgy; DiscountCodeFreeShipping: DiscountCodeFreeShipping }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The paginated list of events associated with the host subject.
 */
events: { baseType: EventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.EventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountCodeNode", returnType: "DiscountCodeNode", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasEvents & HasMetafieldDefinitions & HasMetafields & Node

/**
 * An auto-generated type for paginating through multiple DiscountCodeNodes.
 */
export type DiscountCodeNodeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DiscountCodeNodeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DiscountCodeNodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DiscountCodeNode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountCodeNodeConnection", returnType: "DiscountCodeNodeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DiscountCodeNode and a cursor during pagination.
 */
export type DiscountCodeNodeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DiscountCodeNodeEdge.
 */
node: { baseType: DiscountCodeNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountCodeNodeEdge", returnType: "DiscountCodeNodeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountCodeRedeemCodeBulkDelete` mutation.
 */
export type DiscountCodeRedeemCodeBulkDeletePayload = {
/**
 * The asynchronous job that deletes the discount codes.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCodeRedeemCodeBulkDeletePayload", returnType: "DiscountCodeRedeemCodeBulkDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied.
 */
export type DiscountCollections = {
/**
 * The list of collections that the discount can have as a prerequisite or the list of collections to which the discount can be applied.
 */
collections: { baseType: CollectionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountCollections", returnType: "DiscountCollections", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that you can use in combination with
 * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
export type DiscountCombinesWith = {
/**
 * Whether the discount combines with the
 * [order discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * class.
 */
orderDiscounts: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount combines with the
 * [product discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * class.
 */
productDiscounts: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount combines with the
 * [shipping discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * class.
 */
shippingDiscounts: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountCombinesWith", returnType: "DiscountCombinesWith", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The shipping destinations where the discount can be applied.
 */
export type DiscountCountries = {
/**
 * The codes for the countries where the discount can be applied.
 */
countries: { baseType: BaseTypes.CountryCode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the discount is applicable to countries that haven't been defined in the shop's shipping zones.
 */
includeRestOfWorld: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountCountries", returnType: "DiscountCountries", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountCountryAll` object lets you target all countries as shipping destination for discount eligibility.
 */
export type DiscountCountryAll = {
/**
 * Whether the discount can be applied to all countries as shipping destination. This value is always `true`.
 */
allCountries: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountCountryAll", returnType: "DiscountCountryAll", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountCustomerAll` object lets you target all customers for discount eligibility.
 */
export type DiscountCustomerAll = {
/**
 * Whether the discount can be applied by all customers. This value is always `true`.
 */
allCustomers: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountCustomerAll", returnType: "DiscountCustomerAll", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable.
 */
export type DiscountCustomerBuys = {
/**
 * The items required for the discount to be applicable.
 */
items: { members: { AllDiscountItems: AllDiscountItems; DiscountCollections: DiscountCollections; DiscountProducts: DiscountProducts }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The prerequisite value.
 */
value: { members: { DiscountPurchaseAmount: DiscountPurchaseAmount; DiscountQuantity: DiscountQuantity }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountCustomerBuys", returnType: "DiscountCustomerBuys", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The prerequisite for the discount to be applicable. For example, the discount might require a customer to buy a minimum quantity of select items. Alternatively, the discount might require a customer to spend a minimum amount on select items.
 */
export type DiscountCustomerBuysValue = DiscountPurchaseAmount | DiscountQuantity

/**
 * The items in the order that qualify for the discount, their quantities, and the total value of the discount.
 */
export type DiscountCustomerGets = {
/**
 * Whether the discount applies on regular one-time-purchase items.
 */
appliesOnOneTimePurchase: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount applies on subscription items.
 * [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
 * enable customers to purchase products
 * on a recurring basis.
 */
appliesOnSubscription: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The items to which the discount applies.
 */
items: { members: { AllDiscountItems: AllDiscountItems; DiscountCollections: DiscountCollections; DiscountProducts: DiscountProducts }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Entitled quantity and the discount value.
 */
value: { members: { DiscountAmount: DiscountAmount; DiscountOnQuantity: DiscountOnQuantity; DiscountPercentage: DiscountPercentage }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountCustomerGets", returnType: "DiscountCustomerGets", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The type of the discount value and how it will be applied. For example, it might be a percentage discount on a fixed number of items. Alternatively, it might be a fixed amount evenly distributed across all items or on each individual item. A third example is a percentage discount on all items.
 */
export type DiscountCustomerGetsValue = DiscountAmount | DiscountOnQuantity | DiscountPercentage

/**
 * A list of customer segments who are eligible for the discount.
 */
export type DiscountCustomerSegments = {
/**
 * The list of customer segments who are eligible for the discount.
 */
segments: { baseType: Segment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCustomerSegments", returnType: "DiscountCustomerSegments", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The type used for targeting a set of customers who are eligible for the discount. For example, the discount might be available to all customers or it might only be available to a specific set of customers. You can define the set of customers by targeting a list of customer segments, or by targeting a list of specific customers.
 */
export type DiscountCustomerSelection = DiscountCustomerAll | DiscountCustomerSegments | DiscountCustomers

/**
 * A list of individual customers eligible for the discount.
 */
export type DiscountCustomers = {
/**
 * The list of individual customers eligible for the discount.
 */
customers: { baseType: Customer, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountCustomers", returnType: "DiscountCustomers", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The type of discount that will be applied. Currently, only a percentage discount is supported.
 */
export type DiscountEffect = DiscountAmount | DiscountPercentage

/**
 * The type used to target the items required for discount eligibility, or the items to which the application of a discount might apply. For example, for a customer to be eligible for a discount, they're required to add an item from a specified collection to their order. Alternatively, a customer might be required to add a specific product or product variant. When using this type to target which items the discount will apply to, the discount might apply to all items on the order, or to specific products and product variants, or items in a given collection.
 */
export type DiscountItems = AllDiscountItems | DiscountCollections | DiscountProducts

/**
 * The minimum quantity of items required for the discount to apply.
 */
export type DiscountMinimumQuantity = {
/**
 * The minimum quantity of items that's required for the discount to be applied.
 */
greaterThanOrEqualToQuantity: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountMinimumQuantity", returnType: "DiscountMinimumQuantity", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The type of minimum requirement that must be met for the discount to be applied. For example, a customer must spend a minimum subtotal to be eligible for the discount. Alternatively, a customer must purchase a minimum quantity of items to be eligible for the discount.
 */
export type DiscountMinimumRequirement = DiscountMinimumQuantity | DiscountMinimumSubtotal

/**
 * The minimum subtotal required for the discount to apply.
 */
export type DiscountMinimumSubtotal = {
/**
 * The minimum subtotal that's required for the discount to be applied.
 */
greaterThanOrEqualToSubtotal: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountMinimumSubtotal", returnType: "DiscountMinimumSubtotal", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `DiscountNode` object enables you to manage [discounts](https://help.shopify.com/manual/discounts), which are applied at checkout or on a cart.
 *
 *
 * Discounts are a way for merchants to promote sales and special offers, or as customer loyalty rewards. Discounts can apply to [orders, products, or shipping](https://shopify.dev/docs/apps/build/discounts#discount-classes), and can be either automatic or code-based. For example, you can offer customers a buy X get Y discount that's automatically applied when purchases meet specific criteria. Or, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related mutations, limitations, and considerations.
 */
export type DiscountNode = {
/**
 * A discount that's applied at checkout or on cart.
 *
 *
 * Discounts can be [automatic or code-based](https://shopify.dev/docs/apps/build/discounts#discount-methods).
 */
discount: { members: { DiscountAutomaticApp: DiscountAutomaticApp; DiscountAutomaticBasic: DiscountAutomaticBasic; DiscountAutomaticBxgy: DiscountAutomaticBxgy; DiscountAutomaticFreeShipping: DiscountAutomaticFreeShipping; DiscountCodeApp: DiscountCodeApp; DiscountCodeBasic: DiscountCodeBasic; DiscountCodeBxgy: DiscountCodeBxgy; DiscountCodeFreeShipping: DiscountCodeFreeShipping }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The paginated list of events associated with the host subject.
 */
events: { baseType: EventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.EventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountNode", returnType: "DiscountNode", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasEvents & HasMetafieldDefinitions & HasMetafields & Node

/**
 * An auto-generated type for paginating through multiple DiscountNodes.
 */
export type DiscountNodeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DiscountNodeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DiscountNodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DiscountNode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountNodeConnection", returnType: "DiscountNodeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DiscountNode and a cursor during pagination.
 */
export type DiscountNodeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DiscountNodeEdge.
 */
node: { baseType: DiscountNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountNodeEdge", returnType: "DiscountNodeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The quantity of items discounted, the discount value, and how the discount will be applied.
 */
export type DiscountOnQuantity = {
/**
 * The discount's effect on qualifying items.
 */
effect: { members: { DiscountAmount: DiscountAmount; DiscountPercentage: DiscountPercentage }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of items being discounted. The customer must have at least this many items of specified products or product variants in their order to be eligible for the discount.
 */
quantity: { baseType: DiscountQuantity, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountOnQuantity", returnType: "DiscountOnQuantity", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A discount effect that gives customers a percentage off of specified items on their order.
 */
export type DiscountPercentage = {
/**
 * The percentage value of the discount.
 */
percentage: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountPercentage", returnType: "DiscountPercentage", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied.
 */
export type DiscountProducts = {
/**
 * The list of product variants that the discount can have as a prerequisite or the list of product variants to which the discount can be applied.
 */
productVariants: { baseType: ProductVariantConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of products that the discount can have as a prerequisite or the list of products to which the discount can be applied.
 */
products: { baseType: ProductConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountProducts", returnType: "DiscountProducts", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A purchase amount in the context of a discount. This object can be used to define the minimum purchase amount required for a discount to be applicable.
 */
export type DiscountPurchaseAmount = {
/**
 * The purchase amount in decimal format.
 */
amount: { baseType: BaseTypes.Decimal, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountPurchaseAmount", returnType: "DiscountPurchaseAmount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A quantity of items in the context of a discount. This object can be used to define the minimum quantity of items required to apply a discount. Alternatively, it can be used to define the quantity of items that can be discounted.
 */
export type DiscountQuantity = {
/**
 * The quantity of items.
 */
quantity: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountQuantity", returnType: "DiscountQuantity", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A code that a customer can use at checkout to receive a discount. For example, a customer can use the redeem code 'SUMMER20' at checkout to receive a 20% discount on their entire order.
 */
export type DiscountRedeemCode = {
/**
 * The number of times that the discount redeem code has been used. This value is updated asynchronously and can be different than the actual usage count.
 */
asyncUsageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The code that a customer can use at checkout to receive a discount.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The application that created the discount redeem code.
 */
createdBy: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID of the discount redeem code.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountRedeemCode", returnType: "DiscountRedeemCode", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `discountRedeemCodeBulkAdd` mutation.
 */
export type DiscountRedeemCodeBulkAddPayload = {
/**
 * The ID of bulk operation that creates multiple unique discount codes.
 * You can use the
 * [`discountRedeemCodeBulkCreation` query](https://shopify.dev/api/admin-graphql/latest/queries/discountRedeemCodeBulkCreation)
 * to track the status of the bulk operation.
 */
bulkCreation: { baseType: DiscountRedeemCodeBulkCreation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountRedeemCodeBulkAddPayload", returnType: "DiscountRedeemCodeBulkAddPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The properties and status of a bulk discount redeem code creation operation.
 */
export type DiscountRedeemCodeBulkCreation = {
/**
 * The result of each code creation operation associated with the bulk creation operation including any errors that might have occurred during the operation.
 */
codes: { baseType: DiscountRedeemCodeBulkCreationCodeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of codes to create.
 */
codesCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the bulk creation was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The code discount associated with the created codes.
 */
discountCode: { baseType: DiscountCodeNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the bulk creation is still queued (`false`) or has been run (`true`).
 */
done: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of codes that weren't created successfully.
 */
failedCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of codes created successfully.
 */
importedCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountRedeemCodeBulkCreation", returnType: "DiscountRedeemCodeBulkCreation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A result of a discount redeem code creation operation created by a bulk creation.
 */
export type DiscountRedeemCodeBulkCreationCode = {
/**
 * The code to use in the discount redeem code creation operation.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The successfully created discount redeem code.
 *
 * If the discount redeem code couldn't be created, then this field is `null``.
 */
discountRedeemCode: { baseType: DiscountRedeemCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of errors that occurred during the creation operation of the discount redeem code.
 */
errors: { baseType: DiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DiscountRedeemCodeBulkCreationCode", returnType: "DiscountRedeemCodeBulkCreationCode", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes.
 */
export type DiscountRedeemCodeBulkCreationCodeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DiscountRedeemCodeBulkCreationCodeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DiscountRedeemCodeBulkCreationCodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DiscountRedeemCodeBulkCreationCode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountRedeemCodeBulkCreationCodeConnection", returnType: "DiscountRedeemCodeBulkCreationCodeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.
 */
export type DiscountRedeemCodeBulkCreationCodeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DiscountRedeemCodeBulkCreationCodeEdge.
 */
node: { baseType: DiscountRedeemCodeBulkCreationCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountRedeemCodeBulkCreationCodeEdge", returnType: "DiscountRedeemCodeBulkCreationCodeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple DiscountRedeemCodes.
 */
export type DiscountRedeemCodeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DiscountRedeemCodeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DiscountRedeemCodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DiscountRedeemCode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountRedeemCodeConnection", returnType: "DiscountRedeemCodeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.
 */
export type DiscountRedeemCodeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DiscountRedeemCodeEdge.
 */
node: { baseType: DiscountRedeemCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountRedeemCodeEdge", returnType: "DiscountRedeemCodeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A shareable URL for a discount code.
 */
export type DiscountShareableUrl = {
/**
 * The image URL of the item (product or collection) to which the discount applies.
 */
targetItemImage: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The type of page that's associated with the URL.
 */
targetType: { baseType: BaseTypes.DiscountShareableUrlTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the page that's associated with the URL.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL for the discount code.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountShareableUrl", returnType: "DiscountShareableUrl", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The type used to target the eligible countries of an order's shipping destination for which the discount applies. For example, the discount might be applicable when shipping to all countries, or only to a set of countries.
 */
export type DiscountShippingDestinationSelection = DiscountCountries | DiscountCountryAll

/**
 * An error that occurs during the execution of a discount mutation.
 */
export type DiscountUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.DiscountErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Extra information about this error.
 */
extraInfo: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DiscountUserError", returnType: "DiscountUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents an error in the input of a mutation.
 */
export type DisplayableError = {
/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `disputeEvidenceUpdate` mutation.
 */
export type DisputeEvidenceUpdatePayload = {
/**
 * The updated dispute evidence.
 */
disputeEvidence: { baseType: ShopifyPaymentsDisputeEvidence, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DisputeEvidenceUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DisputeEvidenceUpdatePayload", returnType: "DisputeEvidenceUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `DisputeEvidenceUpdate`.
 */
export type DisputeEvidenceUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.DisputeEvidenceUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DisputeEvidenceUpdateUserError", returnType: "DisputeEvidenceUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A unique string that represents the address of a Shopify store on the Internet.
 */
export type Domain = {
/**
 * The host name of the domain. For example, `example.com`.
 */
host: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The localization of the domain, if the domain doesn't redirect.
 */
localization: { baseType: DomainLocalization, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The web presence of the domain.
 */
marketWebPresence: { baseType: MarketWebPresence, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether SSL is enabled.
 */
sslEnabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL of the domain (for example, `https://example.com`).
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Domain", returnType: "Domain", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The country and language settings assigned to a domain.
 */
export type DomainLocalization = {
/**
 * The ISO codes for the domain’s alternate locales. For example, `["en"]`.
 */
alternateLocales: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The ISO code for the country assigned to the domain. For example, `"CA"` or "*" for a domain set to "Rest of world".
 */
country: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ISO code for the domain’s default locale. For example, `"en"`.
 */
defaultLocale: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DomainLocalization", returnType: "DomainLocalization", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 * - Save an order as a draft and resume working on it later.
 *
 * For draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their shop currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 *
 * Draft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.
 */
export type DraftOrder = {
/**
 * Whether or not to accept automatic discounts on the draft order during calculation.
 * If false, only discount codes and custom draft order discounts (see `appliedDiscount`) will be applied.
 * If true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.
 */
acceptAutomaticDiscounts: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether discount codes are allowed during checkout of this draft order.
 */
allowDiscountCodesInCheckout: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The custom order-level discount applied.
 */
appliedDiscount: { baseType: DraftOrderAppliedDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The billing address of the customer.
 */
billingAddress: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the billing address matches the shipping address.
 */
billingAddressMatchesShippingAddress: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the draft order was converted to a new order,
 * and had it's status changed to **Completed**.
 */
completedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the draft order was created in Shopify.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop currency used for calculation.
 */
currencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The custom information added to the draft order on behalf of the customer.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The customer who will be sent an invoice.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID.
 */
defaultCursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * All discount codes applied.
 */
discountCodes: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The email address of the customer, which is used to send notifications.
 */
email: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of events associated with the draft order.
 */
events: { baseType: EventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.EventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the merchant has added timeline comments to the draft order.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subject defined for the draft invoice email template.
 */
invoiceEmailTemplateSubject: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the invoice was last emailed to the customer.
 */
invoiceSentAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The link to the checkout, which is sent to the customer in the invoice email.
 */
invoiceUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of the line items in the draft order.
 */
lineItems: { baseType: DraftOrderLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A subtotal of the line items and corresponding discounts,
 * excluding include shipping charges, shipping discounts, taxes, or order discounts.
 */
lineItemsSubtotalPrice: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of localization extensions for the resource.
 */
localizationExtensions: { baseType: LocalizationExtensionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; countryCodes?: Array<BaseTypes.CountryCode> | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; purposes?: Array<BaseTypes.LocalizationExtensionPurpose> | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the selected market.
 */
marketName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The selected country code that determines the pricing.
 */
marketRegionCountryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The identifier for the draft order, which is unique within the store. For example, _#D1223_.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The text from an optional note attached to the draft order.
 */
note2: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The order that was created from the draft order.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The associated payment terms for this draft order.
 */
paymentTerms: { baseType: PaymentTerms, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The assigned phone number.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of platform discounts applied.
 */
platformDiscounts: { baseType: DraftOrderPlatformDiscount, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The purchase order number.
 */
poNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The payment currency used for calculation.
 */
presentmentCurrencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The purchasing entity.
 */
purchasingEntity: { members: { Customer: Customer; PurchasingCompany: PurchasingCompany }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the draft order is ready and can be completed.
 * Draft orders might have asynchronous operations that can take time to finish.
 */
ready: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The time after which inventory will automatically be restocked.
 */
reserveInventoryUntil: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shipping address of the customer.
 */
shippingAddress: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The line item containing the shipping information and costs.
 */
shippingLine: { baseType: ShippingLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of the draft order.
 */
status: { baseType: BaseTypes.DraftOrderStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subtotal, in shop currency, of the line items and their discounts, excluding shipping charges, shipping discounts, and taxes.
 */
subtotalPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subtotal, of the line items and their discounts, excluding shipping charges, shipping discounts, and taxes.
 */
subtotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The comma separated list of tags associated with the draft order.
 * Updating `tags` overwrites any existing tags that were previously added to the draft order.
 * To add new tags without overwriting existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
 */
tags: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the draft order is tax exempt.
 */
taxExempt: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of of taxes lines charged for each line item and shipping line.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the line item prices include taxes.
 */
taxesIncluded: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total discounts.
 */
totalDiscountsSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total price of line items.
 */
totalLineItemsPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price, in shop currency, includes taxes, shipping charges, and discounts.
 */
totalPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price, includes taxes, shipping charges, and discounts.
 */
totalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of individual line item quantities.
 * If the draft order has bundle items, this is the sum containing the quantities of individual items in the bundle.
 */
totalQuantityOfLineItems: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total shipping price in shop currency.
 */
totalShippingPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total shipping price.
 */
totalShippingPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total tax in shop currency.
 */
totalTax: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total tax.
 */
totalTaxSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total weight in grams of the draft order.
 */
totalWeight: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Fingerprint of the current cart.
 * In order to have bundles work, the fingerprint must be passed to
 * each request as it was previously returned, unmodified.
 */
transformerFingerprint: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the draft order was last changed.
 * The format is YYYY-MM-DD HH:mm:ss. For example, 2016-02-05 17:04:01.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the draft order will be visible to the customer on the self-serve portal.
 */
visibleToCustomer: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of warnings raised while calculating.
 */
warnings: { members: { DraftOrderBundleAddedWarning: DraftOrderBundleAddedWarning; DraftOrderDiscountNotAppliedWarning: DraftOrderDiscountNotAppliedWarning }, fields: { errorCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; field: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrder", returnType: "DraftOrder", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CommentEventSubject & HasEvents & HasLocalizationExtensions & HasMetafields & LegacyInteroperability & Navigable & Node

/**
 * The order-level discount applied to a draft order.
 */
export type DraftOrderAppliedDiscount = {
/**
 * Amount of the order-level discount that's applied to the draft order in shop currency.
 */
amount: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of money discounted, with values shown in both shop currency and presentment currency.
 */
amountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Amount of money discounted.
 */
amountV2: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Description of the order-level discount.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Name of the order-level discount.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The order level discount amount. If `valueType` is `"percentage"`,
 * then `value` is the percentage discount.
 */
value: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Type of the order-level discount.
 */
valueType: { baseType: BaseTypes.DraftOrderAppliedDiscountType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DraftOrderAppliedDiscount", returnType: "DraftOrderAppliedDiscount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `draftOrderBulkAddTags` mutation.
 */
export type DraftOrderBulkAddTagsPayload = {
/**
 * The asynchronous job for adding tags to the draft orders.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderBulkAddTagsPayload", returnType: "DraftOrderBulkAddTagsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `draftOrderBulkDelete` mutation.
 */
export type DraftOrderBulkDeletePayload = {
/**
 * The asynchronous job for deleting the draft orders.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderBulkDeletePayload", returnType: "DraftOrderBulkDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `draftOrderBulkRemoveTags` mutation.
 */
export type DraftOrderBulkRemoveTagsPayload = {
/**
 * The asynchronous job for removing tags from the draft orders.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderBulkRemoveTagsPayload", returnType: "DraftOrderBulkRemoveTagsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A warning indicating that a bundle was added to a draft order.
 */
export type DraftOrderBundleAddedWarning = {
/**
 * The error code.
 */
errorCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The input field that the warning applies to.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The warning message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DraftOrderBundleAddedWarning", returnType: "DraftOrderBundleAddedWarning", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DraftOrderWarning

/**
 * Return type for `draftOrderCalculate` mutation.
 */
export type DraftOrderCalculatePayload = {
/**
 * The calculated properties for a draft order.
 */
calculatedDraftOrder: { baseType: CalculatedDraftOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderCalculatePayload", returnType: "DraftOrderCalculatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `draftOrderComplete` mutation.
 */
export type DraftOrderCompletePayload = {
/**
 * The completed draft order.
 */
draftOrder: { baseType: DraftOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderCompletePayload", returnType: "DraftOrderCompletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple DraftOrders.
 */
export type DraftOrderConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DraftOrderEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DraftOrderEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DraftOrder, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DraftOrderConnection", returnType: "DraftOrderConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `draftOrderCreateFromOrder` mutation.
 */
export type DraftOrderCreateFromOrderPayload = {
/**
 * The created draft order.
 */
draftOrder: { baseType: DraftOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderCreateFromOrderPayload", returnType: "DraftOrderCreateFromOrderPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `draftOrderCreateMerchantCheckout` mutation.
 */
export type DraftOrderCreateMerchantCheckoutPayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderCreateMerchantCheckoutPayload", returnType: "DraftOrderCreateMerchantCheckoutPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `draftOrderCreate` mutation.
 */
export type DraftOrderCreatePayload = {
/**
 * The created draft order.
 */
draftOrder: { baseType: DraftOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderCreatePayload", returnType: "DraftOrderCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `draftOrderDelete` mutation.
 */
export type DraftOrderDeletePayload = {
/**
 * The ID of the deleted draft order.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderDeletePayload", returnType: "DraftOrderDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A warning indicating that a discount cannot be applied to a draft order.
 */
export type DraftOrderDiscountNotAppliedWarning = {
/**
 * The code of the discount that can't be applied.
 */
discountCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The title of the discount that can't be applied.
 */
discountTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The error code.
 */
errorCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The input field that the warning applies to.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The warning message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price rule that can't be applied.
 */
priceRule: { baseType: PriceRule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "DraftOrderDiscountNotAppliedWarning", returnType: "DraftOrderDiscountNotAppliedWarning", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DraftOrderWarning

/**
 * Return type for `draftOrderDuplicate` mutation.
 */
export type DraftOrderDuplicatePayload = {
/**
 * The newly duplicated draft order.
 */
draftOrder: { baseType: DraftOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderDuplicatePayload", returnType: "DraftOrderDuplicatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DraftOrder and a cursor during pagination.
 */
export type DraftOrderEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DraftOrderEdge.
 */
node: { baseType: DraftOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DraftOrderEdge", returnType: "DraftOrderEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `draftOrderInvoicePreview` mutation.
 */
export type DraftOrderInvoicePreviewPayload = {
/**
 * The draft order invoice email rendered as HTML to allow previewing.
 */
previewHtml: { baseType: BaseTypes.HTML, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The subject preview for the draft order invoice email.
 */
previewSubject: { baseType: BaseTypes.HTML, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderInvoicePreviewPayload", returnType: "DraftOrderInvoicePreviewPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `draftOrderInvoiceSend` mutation.
 */
export type DraftOrderInvoiceSendPayload = {
/**
 * The draft order an invoice email is sent for.
 */
draftOrder: { baseType: DraftOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderInvoiceSendPayload", returnType: "DraftOrderInvoiceSendPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The line item for a draft order.
 */
export type DraftOrderLineItem = {
/**
 * The custom applied discount.
 */
appliedDiscount: { baseType: DraftOrderAppliedDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The `discountedTotal` divided by `quantity`,
 * equal to the average value of the line item price per unit after discounts are applied.
 * This value doesn't include discounts applied to the entire draft order.
 */
approximateDiscountedUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of bundle components if applicable.
 */
bundleComponents: { baseType: DraftOrderLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the line item is custom (`true`) or contains a product variant (`false`).
 */
custom: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of attributes that represent custom features or special requests.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of additional information (metafields) with the associated types.
 */
customAttributesV2: { baseType: TypedAttribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The line item price, in shop currency, after discounts are applied.
 */
discountedTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price with discounts applied.
 */
discountedTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The `discountedTotal` divided by `quantity`, equal to the value of the discount per unit in the shop currency.
 */
discountedUnitPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unit price with discounts applied.
 */
discountedUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Name of the service provider who fulfilled the order.
 *
 * Valid values are either **manual** or the name of the provider.
 * For example, **amazon**, **shipwire**.
 *
 * Deleted fulfillment services will return null.
 */
fulfillmentService: { baseType: FulfillmentService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The weight of the line item in grams.
 */
grams: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The image of the product variant.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the line item represents the purchase of a gift card.
 */
isGiftCard: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the product.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price, in shop currency, excluding discounts, equal to the original unit price multiplied by quantity.
 */
originalTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price excluding discounts, equal to the original unit price multiplied by quantity.
 */
originalTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price, in shop currency, without any discounts applied.
 */
originalUnitPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price without any discounts applied.
 */
originalUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The original custom line item input price.
 */
originalUnitPriceWithCurrency: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product for the line item.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The quantity of items. For a bundle item, this is the quantity of bundles,
 * not the quantity of items contained in the bundles themselves.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether physical shipping is required for the variant.
 */
requiresShipping: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The SKU number of the product variant.
 */
sku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of tax lines.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the variant is taxable.
 */
taxable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the product or variant. This field only applies to custom line items.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discount applied in shop currency.
 */
totalDiscount: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discount amount.
 */
totalDiscountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The UUID of the draft order line item. Must be unique and consistent across requests.
 * This field is mandatory in order to manipulate drafts with bundles.
 */
uuid: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant for the line item.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the variant.
 */
variantTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the vendor who created the product variant.
 */
vendor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The weight unit and value.
 */
weight: { baseType: Weight, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "DraftOrderLineItem", returnType: "DraftOrderLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple DraftOrderLineItems.
 */
export type DraftOrderLineItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: DraftOrderLineItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in DraftOrderLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: DraftOrderLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DraftOrderLineItemConnection", returnType: "DraftOrderLineItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.
 */
export type DraftOrderLineItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of DraftOrderLineItemEdge.
 */
node: { baseType: DraftOrderLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DraftOrderLineItemEdge", returnType: "DraftOrderLineItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The platform discounts applied to the draft order.
 */
export type DraftOrderPlatformDiscount = {
/**
 * Price reduction allocations across the draft order's lines.
 */
allocations: { baseType: DraftOrderPlatformDiscountAllocation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the discount is an automatic discount.
 */
automaticDiscount: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is a buy x get y discount.
 */
bxgyDiscount: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * If a code-based discount, the code used to add the discount.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The discount class.
 */
discountClass: { baseType: BaseTypes.DiscountClass, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount node for the platform discount.
 */
discountNode: { baseType: DiscountNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the discount.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the discount is line, order or shipping level.
 */
presentationLevel: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The short summary of the discount.
 */
shortSummary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The summary of the discount.
 */
summary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the discount.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount total amount in shop currency.
 */
totalAmount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of money discounted, with values shown in both shop currency and presentment currency.
 */
totalAmountPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DraftOrderPlatformDiscount", returnType: "DraftOrderPlatformDiscount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Price reduction allocations across the draft order's lines.
 */
export type DraftOrderPlatformDiscountAllocation = {
/**
 * The ID of the allocation.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The quantity of the target being discounted.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Amount of the discount allocated to the target.
 */
reductionAmount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Amount of the discount allocated to the target in both shop currency and presentment currency.
 */
reductionAmountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The element of the draft being discounted.
 */
target: { members: { CalculatedDraftOrderLineItem: CalculatedDraftOrderLineItem; DraftOrderLineItem: DraftOrderLineItem; ShippingLine: ShippingLine }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "DraftOrderPlatformDiscountAllocation", returnType: "DraftOrderPlatformDiscountAllocation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The element of the draft being discounted.
 */
export type DraftOrderPlatformDiscountAllocationTarget = CalculatedDraftOrderLineItem | DraftOrderLineItem | ShippingLine

/**
 * Represents a draft order tag.
 */
export type DraftOrderTag = {
/**
 * Handle of draft order tag.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * ID of draft order tag.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Title of draft order tag.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DraftOrderTag", returnType: "DraftOrderTag", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `draftOrderUpdate` mutation.
 */
export type DraftOrderUpdatePayload = {
/**
 * The updated draft order.
 */
draftOrder: { baseType: DraftOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "DraftOrderUpdatePayload", returnType: "DraftOrderUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A warning that is displayed to the merchant when a change is made to a draft order.
 */
export type DraftOrderWarning = {
/**
 * The error code.
 */
errorCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The input field that the warning applies to.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The warning message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The duty details for a line item.
 */
export type Duty = {
/**
 * The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
 */
countryCodeOfOrigin: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The harmonized system code of the item used in calculating the duty.
 */
harmonizedSystemCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of the duty.
 */
price: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of taxes charged on the duty.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "Duty", returnType: "Duty", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A sale associated with a duty charge.
 */
export type DutySale = {
/**
 * The type of order action that the sale represents.
 */
actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The duty for the associated sale.
 */
duty: { baseType: Duty, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the sale.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line type assocated with the sale.
 */
lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units either ordered or intended to be returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All individual taxes associated with the sale.
 */
taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total sale amount after taxes and discounts.
 */
totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale after taxes.
 */
totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale before taxes.
 */
totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of taxes for the sale.
 */
totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "DutySale", returnType: "DutySale", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Sale

/**
 * The attribute editable information.
 */
export type EditableProperty = {
/**
 * Whether the attribute is locked for editing.
 */
locked: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason the attribute is locked for editing.
 */
reason: { baseType: BaseTypes.FormattedString, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "EditableProperty", returnType: "EditableProperty", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of a server pixel mutation.
 */
export type ErrorsServerPixelUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ErrorsServerPixelUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ErrorsServerPixelUserError", returnType: "ErrorsServerPixelUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An error that occurs during the execution of a web pixel mutation.
 */
export type ErrorsWebPixelUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ErrorsWebPixelUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ErrorsWebPixelUserError", returnType: "ErrorsWebPixelUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
 * addition of a product.
 */
export type Event = {
/**
 * The name of the app that created the event.
 */
appTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the event was created by an app.
 */
attributeToApp: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the event was caused by an admin user.
 */
attributeToUser: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the event was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the event is critical.
 */
criticalAlert: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Human readable text that describes the event.
 */
message: { baseType: BaseTypes.FormattedString, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `eventBridgeServerPixelUpdate` mutation.
 */
export type EventBridgeServerPixelUpdatePayload = {
/**
 * The server pixel as configured by the mutation.
 */
serverPixel: { baseType: ServerPixel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ErrorsServerPixelUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "EventBridgeServerPixelUpdatePayload", returnType: "EventBridgeServerPixelUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `eventBridgeWebhookSubscriptionCreate` mutation.
 */
export type EventBridgeWebhookSubscriptionCreatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The webhook subscription that was created.
 */
webhookSubscription: { baseType: WebhookSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "EventBridgeWebhookSubscriptionCreatePayload", returnType: "EventBridgeWebhookSubscriptionCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `eventBridgeWebhookSubscriptionUpdate` mutation.
 */
export type EventBridgeWebhookSubscriptionUpdatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The webhook subscription that was updated.
 */
webhookSubscription: { baseType: WebhookSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "EventBridgeWebhookSubscriptionUpdatePayload", returnType: "EventBridgeWebhookSubscriptionUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Events.
 */
export type EventConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: EventEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in EventEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { BasicEvent: BasicEvent; CommentEvent: CommentEvent }, fields: { appTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; attributeToApp: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; attributeToUser: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; criticalAlert: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; message: { baseType: BaseTypes.FormattedString, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "EventConnection", returnType: "EventConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Event and a cursor during pagination.
 */
export type EventEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of EventEdge.
 */
node: { members: { BasicEvent: BasicEvent; CommentEvent: CommentEvent }, fields: { appTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; attributeToApp: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; attributeToUser: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; criticalAlert: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; message: { baseType: BaseTypes.FormattedString, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "EventEdge", returnType: "EventEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An item for exchange.
 */
export type ExchangeLineItem = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order line item for the exchange.
 */
lineItem: { baseType: LineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ExchangeLineItem", returnType: "ExchangeLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple ExchangeLineItems.
 */
export type ExchangeLineItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ExchangeLineItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ExchangeLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ExchangeLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ExchangeLineItemConnection", returnType: "ExchangeLineItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ExchangeLineItem and a cursor during pagination.
 */
export type ExchangeLineItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ExchangeLineItemEdge.
 */
node: { baseType: ExchangeLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ExchangeLineItemEdge", returnType: "ExchangeLineItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An exchange where existing items on an order are returned and new items are added to the order.
 */
export type ExchangeV2 = {
/**
 * The details of the new items in the exchange.
 */
additions: { baseType: ExchangeV2Additions, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the exchange was completed.
 */
completedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the exchange was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location where the exchange happened.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The text of an optional note that a shop owner can attach to the exchange.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The refunds processed during the exchange.
 */
refunds: { baseType: Refund, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The details of the returned items in the exchange.
 */
returns: { baseType: ExchangeV2Returns, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member associated with the exchange.
 */
staffMember: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The amount of money that was paid or refunded as part of the exchange.
 */
totalAmountProcessedSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The difference in values of the items that were exchanged.
 */
totalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order transactions related to the exchange.
 */
transactions: { baseType: OrderTransaction, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ExchangeV2", returnType: "ExchangeV2", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * New items associated to the exchange.
 */
export type ExchangeV2Additions = {
/**
 * The list of new items for the exchange.
 */
lineItems: { baseType: ExchangeV2LineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The subtotal of the items being added, including discounts.
 */
subtotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The summary of all taxes of the items being added.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total price of the items being added, including discounts and taxes.
 */
totalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ExchangeV2Additions", returnType: "ExchangeV2Additions", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple ExchangeV2s.
 */
export type ExchangeV2Connection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ExchangeV2Edge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ExchangeV2Edge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ExchangeV2, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ExchangeV2Connection", returnType: "ExchangeV2Connection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ExchangeV2 and a cursor during pagination.
 */
export type ExchangeV2Edge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ExchangeV2Edge.
 */
node: { baseType: ExchangeV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ExchangeV2Edge", returnType: "ExchangeV2Edge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Contains information about an item in the exchange.
 */
export type ExchangeV2LineItem = {
/**
 * A list of attributes that represent custom features or special requests.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total line price, in shop and presentment currencies, after discounts are applied.
 */
discountedTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price, in shop and presentment currencies,
 * of a single variant unit after line item discounts are applied.
 */
discountedUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Name of the service provider who fulfilled the order.
 *
 * Valid values are either **manual** or the name of the provider.
 * For example, **amazon**, **shipwire**.
 *
 * Deleted fulfillment services will return null.
 */
fulfillmentService: { baseType: FulfillmentService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Indiciates if this line item is a gift card.
 */
giftCard: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The gift cards associated with the line item.
 */
giftCards: { baseType: GiftCard, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the line item represents the purchase of a gift card.
 */
isGiftCard: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line item associated with this object.
 */
lineItem: { baseType: LineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the product.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price, in shop and presentment currencies, before discounts are applied.
 */
originalTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price, in shop and presentment currencies,
 * of a single variant unit before line item discounts are applied.
 */
originalUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of products that were purchased.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether physical shipping is required for the variant.
 */
requiresShipping: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The SKU number of the product variant.
 */
sku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The TaxLine object connected to this line item.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the variant is taxable.
 */
taxable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the product or variant. This field only applies to custom line items.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant of the line item.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the variant.
 */
variantTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the vendor who created the product variant.
 */
vendor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ExchangeV2LineItem", returnType: "ExchangeV2LineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return items associated to the exchange.
 */
export type ExchangeV2Returns = {
/**
 * The list of return items for the exchange.
 */
lineItems: { baseType: ExchangeV2LineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The amount of the order-level discount for the items and shipping being returned, which doesn't contain any line item discounts.
 */
orderDiscountAmountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of money to be refunded for shipping.
 */
shippingRefundAmountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subtotal of the items being returned.
 */
subtotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The summary of all taxes of the items being returned.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The amount of money to be refunded for tip.
 */
tipRefundAmountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total value of the items being returned.
 */
totalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ExchangeV2Returns", returnType: "ExchangeV2Returns", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a video hosted outside of Shopify.
 */
export type ExternalVideo = {
/**
 * A word or phrase to describe the contents or the function of a file.
 */
alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The embed URL of the video for the respective host.
 */
embedUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL.
 */
embeddedUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Any errors that have occurred on the file.
 */
fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The status of the file.
 */
fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The host of the external video.
 */
host: { baseType: BaseTypes.MediaHost, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The media content type.
 */
mediaContentType: { baseType: BaseTypes.MediaContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Any errors which have occurred on the media.
 */
mediaErrors: { baseType: MediaError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The warnings attached to the media.
 */
mediaWarnings: { baseType: MediaWarning, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The origin URL of the video on the respective host.
 */
originUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The preview image for the media.
 */
preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Current status of the media.
 */
status: { baseType: BaseTypes.MediaStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ExternalVideo", returnType: "ExternalVideo", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & File & Media & Node

/**
 * Requirements that must be met before an app can be installed.
 */
export type FailedRequirement = {
/**
 * Action to be taken to resolve a failed requirement, including URL link.
 */
action: { baseType: NavigationItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
 * encounters when trying to make use of their Shop and its resources.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FailedRequirement", returnType: "FailedRequirement", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A additional cost, charged by the merchant, on an order. Examples include return shipping fees and restocking fees.
 */
export type Fee = {
/**
 * The unique ID for the Fee.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A sale associated with a fee.
 */
export type FeeSale = {
/**
 * The type of order action that the sale represents.
 */
actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The fee associated with the sale.
 */
fee: { members: { RestockingFee: RestockingFee; ReturnShippingFee: ReturnShippingFee }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the sale.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line type assocated with the sale.
 */
lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units either ordered or intended to be returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All individual taxes associated with the sale.
 */
taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total sale amount after taxes and discounts.
 */
totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale after taxes.
 */
totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale before taxes.
 */
totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of taxes for the sale.
 */
totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FeeSale", returnType: "FeeSale", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Sale

/**
 * A file interface.
 */
export type File = {
/**
 * A word or phrase to describe the contents or the function of a file.
 */
alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Any errors that have occurred on the file.
 */
fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The status of the file.
 */
fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The preview image for the media.
 */
preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fileAcknowledgeUpdateFailed` mutation.
 */
export type FileAcknowledgeUpdateFailedPayload = {
/**
 * The updated file(s).
 */
files: { members: { ExternalVideo: ExternalVideo; GenericFile: GenericFile; MediaImage: MediaImage; Model3d: Model3d; Video: Video }, fields: { alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FilesUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FileAcknowledgeUpdateFailedPayload", returnType: "FileAcknowledgeUpdateFailedPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Files.
 */
export type FileConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: FileEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in FileEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { ExternalVideo: ExternalVideo; GenericFile: GenericFile; MediaImage: MediaImage; Model3d: Model3d; Video: Video }, fields: { alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FileConnection", returnType: "FileConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fileCreate` mutation.
 */
export type FileCreatePayload = {
/**
 * The newly created files.
 */
files: { members: { ExternalVideo: ExternalVideo; GenericFile: GenericFile; MediaImage: MediaImage; Model3d: Model3d; Video: Video }, fields: { alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FilesUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FileCreatePayload", returnType: "FileCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fileDelete` mutation.
 */
export type FileDeletePayload = {
/**
 * The IDs of the deleted files.
 */
deletedFileIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FilesUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FileDeletePayload", returnType: "FileDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one File and a cursor during pagination.
 */
export type FileEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of FileEdge.
 */
node: { members: { ExternalVideo: ExternalVideo; GenericFile: GenericFile; MediaImage: MediaImage; Model3d: Model3d; Video: Video }, fields: { alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FileEdge", returnType: "FileEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.
 * Check the file before attempting to upload again.
 */
export type FileError = {
/**
 * Code representing the type of error.
 */
code: { baseType: BaseTypes.FileErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Additional details regarding the error.
 */
details: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Translated error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FileError", returnType: "FileError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fileUpdate` mutation.
 */
export type FileUpdatePayload = {
/**
 * The list of updated files.
 */
files: { members: { ExternalVideo: ExternalVideo; GenericFile: GenericFile; MediaImage: MediaImage; Model3d: Model3d; Video: Video }, fields: { alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FilesUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FileUpdatePayload", returnType: "FileUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that happens during the execution of a Files API query or mutation.
 */
export type FilesUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.FilesErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FilesUserError", returnType: "FilesUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A filter option is one possible value in a search filter.
 */
export type FilterOption = {
/**
 * The filter option's label for display purposes.
 */
label: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The filter option's value.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FilterOption", returnType: "FilterOption", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An amount that's allocated to a line item based on an associated discount application.
 */
export type FinancialSummaryDiscountAllocation = {
/**
 * The money amount that's allocated per unit on the associated line based on the discount application in shop and presentment currencies. If the allocated amount for the line cannot be evenly divided by the quantity, then this amount will be an approximate amount, avoiding fractional pennies. For example, if the associated line had a quantity of 3 with a discount of 4 cents, then the discount distribution would be [0.01, 0.01, 0.02]. This field returns the highest number of the distribution. In this example, this would be 0.02.
 */
approximateAllocatedAmountPerItem: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount application that the allocated amount originated from.
 */
discountApplication: { baseType: FinancialSummaryDiscountApplication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FinancialSummaryDiscountAllocation", returnType: "FinancialSummaryDiscountAllocation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Discount applications capture the intentions of a discount source at
 * the time of application on an order's line items or shipping lines.
 */
export type FinancialSummaryDiscountApplication = {
/**
 * The method by which the discount's value is applied to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How the discount amount is distributed on the discounted lines.
 */
targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is applied on line items or shipping lines.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FinancialSummaryDiscountApplication", returnType: "FinancialSummaryDiscountApplication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `flowGenerateSignature` mutation.
 */
export type FlowGenerateSignaturePayload = {
/**
 * The payload used to generate the signature.
 */
payload: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The generated signature.
 */
signature: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FlowGenerateSignaturePayload", returnType: "FlowGenerateSignaturePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `flowTriggerReceive` mutation.
 */
export type FlowTriggerReceivePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FlowTriggerReceivePayload", returnType: "FlowTriggerReceivePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a fulfillment.
 * In Shopify, a fulfillment represents a shipment of one or more items in an order.
 * When an order has been completely fulfilled, it means that all the items that are included
 * in the order have been sent to the customer.
 * There can be more than one fulfillment for an order.
 */
export type Fulfillment = {
/**
 * The date and time when the fulfillment was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date that this fulfillment was delivered.
 */
deliveredAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Human readable display status for this fulfillment.
 */
displayStatus: { baseType: BaseTypes.FulfillmentDisplayStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The estimated date that this fulfillment will arrive.
 */
estimatedDeliveryAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The history of events associated with this fulfillment.
 */
events: { baseType: FulfillmentEventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.FulfillmentEventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the fulfillment's line items.
 */
fulfillmentLineItems: { baseType: FulfillmentLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A paginated list of fulfillment orders for the fulfillment.
 */
fulfillmentOrders: { baseType: FulfillmentOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the fulfillment went into transit.
 */
inTransitAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location that the fulfillment was processed at.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Human readable reference identifier for this fulfillment.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order for which the fulfillment was created.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The address at which the fulfillment occurred. This field is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead.
 */
originAddress: { baseType: FulfillmentOriginAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether any of the line items in the fulfillment require shipping.
 */
requiresShipping: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Fulfillment service associated with the fulfillment.
 */
service: { baseType: FulfillmentService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of the fulfillment.
 */
status: { baseType: BaseTypes.FulfillmentStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Sum of all line item quantities for the fulfillment.
 */
totalQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Tracking information associated with the fulfillment,
 * such as the tracking company, tracking number, and tracking URL.
 */
trackingInfo: { baseType: FulfillmentTrackingInfo, arguments: { first?: BaseTypes.Int | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The date and time when the fulfillment was last modified.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Fulfillment", returnType: "Fulfillment", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & LegacyInteroperability & Node

/**
 * Return type for `fulfillmentCancel` mutation.
 */
export type FulfillmentCancelPayload = {
/**
 * The canceled fulfillment.
 */
fulfillment: { baseType: Fulfillment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentCancelPayload", returnType: "FulfillmentCancelPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Fulfillments.
 */
export type FulfillmentConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: FulfillmentEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in FulfillmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Fulfillment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentConnection", returnType: "FulfillmentConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A fulfillment constraint rule.
 */
export type FulfillmentConstraintRule = {
/**
 * The ID for the fulfillment constraint function.
 */
function: { baseType: ShopifyFunction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentConstraintRule", returnType: "FulfillmentConstraintRule", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafields & Node

/**
 * Return type for `fulfillmentConstraintRuleCreate` mutation.
 */
export type FulfillmentConstraintRuleCreatePayload = {
/**
 * The newly created fulfillment constraint rule.
 */
fulfillmentConstraintRule: { baseType: FulfillmentConstraintRule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FulfillmentConstraintRuleCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentConstraintRuleCreatePayload", returnType: "FulfillmentConstraintRuleCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `FulfillmentConstraintRuleCreate`.
 */
export type FulfillmentConstraintRuleCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.FulfillmentConstraintRuleCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentConstraintRuleCreateUserError", returnType: "FulfillmentConstraintRuleCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `fulfillmentConstraintRuleDelete` mutation.
 */
export type FulfillmentConstraintRuleDeletePayload = {
/**
 * Whether or not the fulfillment constraint rule was successfully deleted.
 */
success: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FulfillmentConstraintRuleDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentConstraintRuleDeletePayload", returnType: "FulfillmentConstraintRuleDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `FulfillmentConstraintRuleDelete`.
 */
export type FulfillmentConstraintRuleDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.FulfillmentConstraintRuleDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentConstraintRuleDeleteUserError", returnType: "FulfillmentConstraintRuleDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `fulfillmentCreateV2` mutation.
 */
export type FulfillmentCreateV2Payload = {
/**
 * The created fulfillment.
 */
fulfillment: { baseType: Fulfillment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentCreateV2Payload", returnType: "FulfillmentCreateV2Payload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Fulfillment and a cursor during pagination.
 */
export type FulfillmentEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of FulfillmentEdge.
 */
node: { baseType: Fulfillment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentEdge", returnType: "FulfillmentEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The fulfillment event that describes the fulfilllment status at a particular time.
 */
export type FulfillmentEvent = {
/**
 * The street address where this fulfillment event occurred.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The city where this fulfillment event occurred.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The country where this fulfillment event occurred.
 */
country: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the fulfillment event was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The estimated delivery date and time of the fulfillment.
 */
estimatedDeliveryAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The time at which this fulfillment event happened.
 */
happenedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The latitude where this fulfillment event occurred.
 */
latitude: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The longitude where this fulfillment event occurred.
 */
longitude: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A message associated with this fulfillment event.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The province where this fulfillment event occurred.
 */
province: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of this fulfillment event.
 */
status: { baseType: BaseTypes.FulfillmentEventStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The zip code of the location where this fulfillment event occurred.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentEvent", returnType: "FulfillmentEvent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple FulfillmentEvents.
 */
export type FulfillmentEventConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: FulfillmentEventEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in FulfillmentEventEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: FulfillmentEvent, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentEventConnection", returnType: "FulfillmentEventConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentEventCreate` mutation.
 */
export type FulfillmentEventCreatePayload = {
/**
 * The created fulfillment event.
 */
fulfillmentEvent: { baseType: FulfillmentEvent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentEventCreatePayload", returnType: "FulfillmentEventCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.
 */
export type FulfillmentEventEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of FulfillmentEventEdge.
 */
node: { baseType: FulfillmentEvent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentEventEdge", returnType: "FulfillmentEventEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A fulfillment hold currently applied on a fulfillment order.
 */
export type FulfillmentHold = {
/**
 * The name of the app or service that applied the fulfillment hold.
 */
heldBy: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The reason for the fulfillment hold.
 */
reason: { baseType: BaseTypes.FulfillmentHoldReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Additional information about the fulfillment hold reason.
 */
reasonNotes: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentHold", returnType: "FulfillmentHold", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a line item from an order that's included in a fulfillment.
 */
export type FulfillmentLineItem = {
/**
 * The total price after discounts are applied.
 */
discountedTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price after discounts are applied in shop and presentment currencies. This value doesn't include order-level discounts.
 */
discountedTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The associated order's line item.
 */
lineItem: { baseType: LineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price before discounts are applied.
 */
originalTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price before discounts are applied in shop and presentment currencies.
 */
originalTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Number of line items in the fulfillment.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentLineItem", returnType: "FulfillmentLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple FulfillmentLineItems.
 */
export type FulfillmentLineItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: FulfillmentLineItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in FulfillmentLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: FulfillmentLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentLineItemConnection", returnType: "FulfillmentLineItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
 */
export type FulfillmentLineItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of FulfillmentLineItemEdge.
 */
node: { baseType: FulfillmentLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentLineItemEdge", returnType: "FulfillmentLineItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentCreate)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentTrackingInfoUpdate)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 * `write_merchant_managed_fulfillment_orders` access scopes
 * grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 * access scopes are intended for fulfillment services.
 * These scopes grant access to fulfillment orders assigned to locations that are being managed
 * by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 * access scopes grant access to fulfillment orders
 * assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export type FulfillmentOrder = {
/**
 * The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
 *
 * The fulfillment order's assigned location might change in the following cases:
 *
 * - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
 * https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
 * ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
 * https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
 * ) field within the mutation's response.
 * - Work on the fulfillment order hasn't yet begun, which means that the fulfillment order has the
 * [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
 * [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
 * [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
 * status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
 */
assignedLocation: { baseType: FulfillmentOrderAssignedLocation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * ID of the channel that created the order.
 */
channelId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Date and time when the fulfillment order was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Delivery method of this fulfillment order.
 */
deliveryMethod: { baseType: DeliveryMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The destination where the items should be sent.
 */
destination: { baseType: FulfillmentOrderDestination, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time at which the fulfillment order will be fulfillable. When this date and time is reached, the scheduled fulfillment order is automatically transitioned to open. For example, the `fulfill_at` date for a subscription order might be the 1st of each month, a pre-order `fulfill_at` date would be `nil`, and a standard order `fulfill_at` date would be the order creation date.
 */
fulfillAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The latest date and time by which all items in the fulfillment order need to be fulfilled.
 */
fulfillBy: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The fulfillment holds applied on the fulfillment order.
 */
fulfillmentHolds: { baseType: FulfillmentHold, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Fulfillment orders eligible for merging with the given fulfillment order.
 */
fulfillmentOrdersForMerge: { baseType: FulfillmentOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of fulfillments for the fulfillment order.
 */
fulfillments: { baseType: FulfillmentConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The duties delivery method of this fulfillment order.
 */
internationalDuties: { baseType: FulfillmentOrderInternationalDuties, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of the fulfillment order's line items.
 */
lineItems: { baseType: FulfillmentOrderLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of locations that the fulfillment order can potentially move to.
 */
locationsForMove: { baseType: FulfillmentOrderLocationForMoveConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; lineItemIds?: Array<BaseTypes.ID> | null; locationIds?: Array<BaseTypes.ID> | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of requests sent by the merchant or an order management app to the fulfillment service for the fulfillment order.
 */
merchantRequests: { baseType: FulfillmentOrderMerchantRequestConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; kind?: BaseTypes.FulfillmentOrderMerchantRequestKind | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order that's associated with the fulfillment order.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * ID of the order that's associated with the fulfillment order.
 */
orderId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique identifier for the order that appears on the order page in the Shopify admin and the <b>Order status</b> page.
 * For example, "#1001", "EN1001", or "1001-A".
 * This value isn't unique across multiple stores.
 */
orderName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the order was processed.
 * This date and time might not match the date and time when the order was created.
 */
orderProcessedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The request status of the fulfillment order.
 */
requestStatus: { baseType: BaseTypes.FulfillmentOrderRequestStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the fulfillment order.
 */
status: { baseType: BaseTypes.FulfillmentOrderStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The actions that can be performed on this fulfillment order.
 */
supportedActions: { baseType: FulfillmentOrderSupportedAction, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The date and time when the fulfillment order was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrder", returnType: "FulfillmentOrder", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `fulfillmentOrderAcceptCancellationRequest` mutation.
 */
export type FulfillmentOrderAcceptCancellationRequestPayload = {
/**
 * The fulfillment order whose cancellation request was accepted.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderAcceptCancellationRequestPayload", returnType: "FulfillmentOrderAcceptCancellationRequestPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrderAcceptFulfillmentRequest` mutation.
 */
export type FulfillmentOrderAcceptFulfillmentRequestPayload = {
/**
 * The fulfillment order whose fulfillment request was accepted.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderAcceptFulfillmentRequestPayload", returnType: "FulfillmentOrderAcceptFulfillmentRequestPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
 *
 * The fulfillment order's assigned location might change in the following cases:
 *
 * - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
 * https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
 * ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
 * https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
 * ) field within the mutation's response.
 *
 * - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
 * [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
 * [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
 * [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
 * status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
 *
 * If the [fulfillmentOrderMove](
 * https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
 * ) mutation has moved the fulfillment order's line items to a new location,
 * but hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location
 * doesn't change.
 * This happens if the fulfillment order is being split during the move, or if all line items can be moved
 * to an existing fulfillment order at a new location.
 *
 * Once the fulfillment order has been taken into work or canceled,
 * which means that the fulfillment order has the
 * [IN_PROGRESS](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-inprogress),
 * [CLOSED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-closed),
 * [CANCELLED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-cancelled), or
 * [INCOMPLETE](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-incomplete)
 * status, `FulfillmentOrderAssignedLocation` acts as a snapshot of the shop's location content.
 * Up-to-date shop's location data may be queried through [location](
 * https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderAssignedLocation#field-fulfillmentorderassignedlocation-location
 * ) connection.
 */
export type FulfillmentOrderAssignedLocation = {
/**
 * The first line of the address for the location.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The second line of the address for the location.
 */
address2: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The city of the location.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The two-letter country code of the location.
 */
countryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location where the fulfillment is expected to happen. This value might be different from
 * `FulfillmentOrderAssignedLocation` if the location's attributes were updated
 * after the fulfillment order was taken into work of canceled.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the location.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The phone number of the location.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The province of the location.
 */
province: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ZIP code of the location.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentOrderAssignedLocation", returnType: "FulfillmentOrderAssignedLocation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrderCancel` mutation.
 */
export type FulfillmentOrderCancelPayload = {
/**
 * The fulfillment order that was marked as canceled.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The fulfillment order that was created to replace the canceled fulfillment order.
 */
replacementFulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderCancelPayload", returnType: "FulfillmentOrderCancelPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrderClose` mutation.
 */
export type FulfillmentOrderClosePayload = {
/**
 * The fulfillment order that was marked as incomplete.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderClosePayload", returnType: "FulfillmentOrderClosePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple FulfillmentOrders.
 */
export type FulfillmentOrderConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: FulfillmentOrderEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in FulfillmentOrderEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: FulfillmentOrder, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderConnection", returnType: "FulfillmentOrderConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the destination where the items should be sent upon fulfillment.
 */
export type FulfillmentOrderDestination = {
/**
 * The first line of the address of the destination.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The second line of the address of the destination.
 */
address2: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The city of the destination.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The company of the destination.
 */
company: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The two-letter country code of the destination.
 */
countryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The email of the customer at the destination.
 */
email: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The first name of the customer at the destination.
 */
firstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The last name of the customer at the destination.
 */
lastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The phone number of the customer at the destination.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The province of the destination.
 */
province: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ZIP code of the destination.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentOrderDestination", returnType: "FulfillmentOrderDestination", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.
 */
export type FulfillmentOrderEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of FulfillmentOrderEdge.
 */
node: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderEdge", returnType: "FulfillmentOrderEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrderHold` mutation.
 */
export type FulfillmentOrderHoldPayload = {
/**
 * The fulfillment order on which a fulfillment hold was applied.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The remaining fulfillment order containing the line items to which the hold wasn't applied,
 * if specific line items were specified to be placed on hold.
 */
remainingFulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FulfillmentOrderHoldUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderHoldPayload", returnType: "FulfillmentOrderHoldPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `FulfillmentOrderHold`.
 */
export type FulfillmentOrderHoldUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.FulfillmentOrderHoldUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderHoldUserError", returnType: "FulfillmentOrderHoldUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The international duties relevant to a fulfillment order.
 */
export type FulfillmentOrderInternationalDuties = {
/**
 * The method of duties payment. Example values: `DDP`, `DAP`.
 */
incoterm: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderInternationalDuties", returnType: "FulfillmentOrderInternationalDuties", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Associates an order line item with quantities requiring fulfillment from the respective fulfillment order.
 */
export type FulfillmentOrderLineItem = {
/**
 * The financial summary for the Fulfillment Order's Line Items.
 */
financialSummaries: { baseType: FulfillmentOrderLineItemFinancialSummary, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The image associated to the line item's variant.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the inventory item.
 */
inventoryItemId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The associated order line item.
 */
lineItem: { baseType: LineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The variant unit price without discounts applied, in shop and presentment currencies.
 */
originalUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the product.
 */
productTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units remaining to be fulfilled.
 */
remainingQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether physical shipping is required for the variant.
 */
requiresShipping: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The variant SKU number.
 */
sku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of units to be fulfilled.
 */
totalQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant associated to the fulfillment order line item.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the variant.
 */
variantTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the vendor who made the variant.
 */
vendor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Warning messages for a fulfillment order line item.
 */
warnings: { baseType: FulfillmentOrderLineItemWarning, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The weight of a line item unit.
 */
weight: { baseType: Weight, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentOrderLineItem", returnType: "FulfillmentOrderLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
 */
export type FulfillmentOrderLineItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: FulfillmentOrderLineItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in FulfillmentOrderLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: FulfillmentOrderLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderLineItemConnection", returnType: "FulfillmentOrderLineItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.
 */
export type FulfillmentOrderLineItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of FulfillmentOrderLineItemEdge.
 */
node: { baseType: FulfillmentOrderLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderLineItemEdge", returnType: "FulfillmentOrderLineItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The financial details of a fulfillment order line item.
 */
export type FulfillmentOrderLineItemFinancialSummary = {
/**
 * The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.For the full picture of applied discounts, see discountAllocations.
 */
approximateDiscountedUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discounts that have been allocated onto the line item by discount applications, not including order edits and refunds.
 */
discountAllocations: { baseType: FinancialSummaryDiscountAllocation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The variant unit price without discounts applied, in shop and presentment currencies.
 */
originalUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Number of line items that this financial summary applies to.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderLineItemFinancialSummary", returnType: "FulfillmentOrderLineItemFinancialSummary", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected.
 */
export type FulfillmentOrderLineItemWarning = {
/**
 * The description of warning.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The title of warning.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentOrderLineItemWarning", returnType: "FulfillmentOrderLineItemWarning", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrderLineItemsPreparedForPickup` mutation.
 */
export type FulfillmentOrderLineItemsPreparedForPickupPayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FulfillmentOrderLineItemsPreparedForPickupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderLineItemsPreparedForPickupPayload", returnType: "FulfillmentOrderLineItemsPreparedForPickupPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `FulfillmentOrderLineItemsPreparedForPickup`.
 */
export type FulfillmentOrderLineItemsPreparedForPickupUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.FulfillmentOrderLineItemsPreparedForPickupUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderLineItemsPreparedForPickupUserError", returnType: "FulfillmentOrderLineItemsPreparedForPickupUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A location that a fulfillment order can potentially move to.
 */
export type FulfillmentOrderLocationForMove = {
/**
 * Fulfillment order line items that can be moved from their current location to the given location.
 */
availableLineItems: { baseType: FulfillmentOrderLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total number of fulfillment order line items that can be moved from their current assigned location to the
 * given location.
 */
availableLineItemsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The location being considered as the fulfillment order's new assigned location.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
 * moved to the location.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the fulfillment order can be moved to the location.
 */
movable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Fulfillment order line items that cannot be moved from their current location to the given location.
 */
unavailableLineItems: { baseType: FulfillmentOrderLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total number of fulfillment order line items that can't be moved from their current assigned location to the
 * given location.
 */
unavailableLineItemsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentOrderLocationForMove", returnType: "FulfillmentOrderLocationForMove", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.
 */
export type FulfillmentOrderLocationForMoveConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: FulfillmentOrderLocationForMoveEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in FulfillmentOrderLocationForMoveEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: FulfillmentOrderLocationForMove, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderLocationForMoveConnection", returnType: "FulfillmentOrderLocationForMoveConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.
 */
export type FulfillmentOrderLocationForMoveEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of FulfillmentOrderLocationForMoveEdge.
 */
node: { baseType: FulfillmentOrderLocationForMove, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderLocationForMoveEdge", returnType: "FulfillmentOrderLocationForMoveEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A request made by the merchant or an order management app to a fulfillment service
 * for a fulfillment order.
 */
export type FulfillmentOrderMerchantRequest = {
/**
 * The fulfillment order associated with the merchant request.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The kind of request made.
 */
kind: { baseType: BaseTypes.FulfillmentOrderMerchantRequestKind, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The optional message that the merchant included in the request.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Additional options requested by the merchant. These depend on the `kind` of the request.
 * For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
 * merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
 * `notifyCustomer` when making calls to `FulfillmentCreate`.
 */
requestOptions: { baseType: BaseTypes.JSON, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The response from the fulfillment service.
 */
responseData: { baseType: BaseTypes.JSON, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The timestamp when the request was made.
 */
sentAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderMerchantRequest", returnType: "FulfillmentOrderMerchantRequest", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.
 */
export type FulfillmentOrderMerchantRequestConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: FulfillmentOrderMerchantRequestEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in FulfillmentOrderMerchantRequestEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: FulfillmentOrderMerchantRequest, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderMerchantRequestConnection", returnType: "FulfillmentOrderMerchantRequestConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.
 */
export type FulfillmentOrderMerchantRequestEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of FulfillmentOrderMerchantRequestEdge.
 */
node: { baseType: FulfillmentOrderMerchantRequest, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderMerchantRequestEdge", returnType: "FulfillmentOrderMerchantRequestEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrderMerge` mutation.
 */
export type FulfillmentOrderMergePayload = {
/**
 * The result of the fulfillment order merges.
 */
fulfillmentOrderMerges: { baseType: FulfillmentOrderMergeResult, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FulfillmentOrderMergeUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderMergePayload", returnType: "FulfillmentOrderMergePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The result of merging a set of fulfillment orders.
 */
export type FulfillmentOrderMergeResult = {
/**
 * The new fulfillment order as a result of the merge.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderMergeResult", returnType: "FulfillmentOrderMergeResult", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `FulfillmentOrderMerge`.
 */
export type FulfillmentOrderMergeUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.FulfillmentOrderMergeUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderMergeUserError", returnType: "FulfillmentOrderMergeUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `fulfillmentOrderMove` mutation.
 */
export type FulfillmentOrderMovePayload = {
/**
 * The fulfillment order which now contains the moved line items and is assigned to the destination location.
 *
 * If the original fulfillment order doesn't have any line items which are fully or partially fulfilled, the original fulfillment order will be moved to the new location.
 * However if this isn't the case, the moved fulfillment order will differ from the original one.
 */
movedFulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The final state of the original fulfillment order.
 *
 * As a result of the move operation, the original fulfillment order might be moved to the new location
 * or remain in the original location. The original fulfillment order might have the same status or be closed.
 */
originalFulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * This field is deprecated.
 */
remainingFulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderMovePayload", returnType: "FulfillmentOrderMovePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrderOpen` mutation.
 */
export type FulfillmentOrderOpenPayload = {
/**
 * The fulfillment order that was transitioned to open and is fulfillable.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderOpenPayload", returnType: "FulfillmentOrderOpenPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrderRejectCancellationRequest` mutation.
 */
export type FulfillmentOrderRejectCancellationRequestPayload = {
/**
 * The fulfillment order whose cancellation request was rejected.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderRejectCancellationRequestPayload", returnType: "FulfillmentOrderRejectCancellationRequestPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrderRejectFulfillmentRequest` mutation.
 */
export type FulfillmentOrderRejectFulfillmentRequestPayload = {
/**
 * The fulfillment order whose fulfillment request was rejected.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderRejectFulfillmentRequestPayload", returnType: "FulfillmentOrderRejectFulfillmentRequestPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrderReleaseHold` mutation.
 */
export type FulfillmentOrderReleaseHoldPayload = {
/**
 * The fulfillment order on which the hold was released.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FulfillmentOrderReleaseHoldUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderReleaseHoldPayload", returnType: "FulfillmentOrderReleaseHoldPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `FulfillmentOrderReleaseHold`.
 */
export type FulfillmentOrderReleaseHoldUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.FulfillmentOrderReleaseHoldUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderReleaseHoldUserError", returnType: "FulfillmentOrderReleaseHoldUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `fulfillmentOrderReschedule` mutation.
 */
export type FulfillmentOrderReschedulePayload = {
/**
 * A fulfillment order with the rescheduled line items.
 *
 * Fulfillment orders may be merged if they have the same `fulfillAt` datetime.
 *
 * If the fulfillment order is merged then the resulting fulfillment order will be returned.
 * Otherwise the original fulfillment order will be returned with an updated `fulfillAt` datetime.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FulfillmentOrderRescheduleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderReschedulePayload", returnType: "FulfillmentOrderReschedulePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `FulfillmentOrderReschedule`.
 */
export type FulfillmentOrderRescheduleUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.FulfillmentOrderRescheduleUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderRescheduleUserError", returnType: "FulfillmentOrderRescheduleUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `fulfillmentOrderSplit` mutation.
 */
export type FulfillmentOrderSplitPayload = {
/**
 * The result of the fulfillment order splits.
 */
fulfillmentOrderSplits: { baseType: FulfillmentOrderSplitResult, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FulfillmentOrderSplitUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderSplitPayload", returnType: "FulfillmentOrderSplitPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The result of splitting a fulfillment order.
 */
export type FulfillmentOrderSplitResult = {
/**
 * The original fulfillment order as a result of the split.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The remaining fulfillment order as a result of the split.
 */
remainingFulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The replacement fulfillment order if the original fulfillment order wasn't in a state to be split.
 */
replacementFulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentOrderSplitResult", returnType: "FulfillmentOrderSplitResult", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `FulfillmentOrderSplit`.
 */
export type FulfillmentOrderSplitUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.FulfillmentOrderSplitUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrderSplitUserError", returnType: "FulfillmentOrderSplitUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `fulfillmentOrderSubmitCancellationRequest` mutation.
 */
export type FulfillmentOrderSubmitCancellationRequestPayload = {
/**
 * The fulfillment order specified in the cancelation request.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderSubmitCancellationRequestPayload", returnType: "FulfillmentOrderSubmitCancellationRequestPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrderSubmitFulfillmentRequest` mutation.
 */
export type FulfillmentOrderSubmitFulfillmentRequestPayload = {
/**
 * The original fulfillment order intended to request fulfillment for.
 */
originalFulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The fulfillment order that was submitted to the fulfillment service. This will be the same as
 * the original fulfillment order field. The exception to this is partial fulfillment requests or
 * fulfillment request for cancelled or incomplete fulfillment orders.
 */
submittedFulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * This field will only be present for partial fulfillment requests. This will represent the new
 * fulfillment order with the remaining line items not submitted to the fulfillment service.
 */
unsubmittedFulfillmentOrder: { baseType: FulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrderSubmitFulfillmentRequestPayload", returnType: "FulfillmentOrderSubmitFulfillmentRequestPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * One of the actions that the fulfillment order supports in its current state.
 */
export type FulfillmentOrderSupportedAction = {
/**
 * The action value.
 */
action: { baseType: BaseTypes.FulfillmentOrderAction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The external URL to be used to initiate the fulfillment process outside Shopify.
 * Applicable only when the `action` value is `EXTERNAL`.
 */
externalUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentOrderSupportedAction", returnType: "FulfillmentOrderSupportedAction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentOrdersReleaseHolds` mutation.
 */
export type FulfillmentOrdersReleaseHoldsPayload = {
/**
 * The asynchronous job that will release the fulfillment holds.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FulfillmentOrdersReleaseHoldsUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrdersReleaseHoldsPayload", returnType: "FulfillmentOrdersReleaseHoldsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `FulfillmentOrdersReleaseHolds`.
 */
export type FulfillmentOrdersReleaseHoldsUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.FulfillmentOrdersReleaseHoldsUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrdersReleaseHoldsUserError", returnType: "FulfillmentOrdersReleaseHoldsUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `fulfillmentOrdersSetFulfillmentDeadline` mutation.
 */
export type FulfillmentOrdersSetFulfillmentDeadlinePayload = {
/**
 * Whether the fulfillment deadline was successfully set.
 */
success: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: FulfillmentOrdersSetFulfillmentDeadlineUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentOrdersSetFulfillmentDeadlinePayload", returnType: "FulfillmentOrdersSetFulfillmentDeadlinePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`.
 */
export type FulfillmentOrdersSetFulfillmentDeadlineUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentOrdersSetFulfillmentDeadlineUserError", returnType: "FulfillmentOrdersSetFulfillmentDeadlineUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The address at which the fulfillment occurred. This object is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead.
 */
export type FulfillmentOriginAddress = {
/**
 * The street address of the fulfillment location.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The second line of the address. Typically the number of the apartment, suite, or unit.
 */
address2: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The city in which the fulfillment location is located.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The country code of the fulfillment location.
 */
countryCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The province code of the fulfillment location.
 */
provinceCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The zip code of the fulfillment location.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentOriginAddress", returnType: "FulfillmentOriginAddress", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A **Fulfillment Service** is a third party warehouse that prepares and ships orders
 * on behalf of the store owner. Fulfillment services charge a fee to package and ship items
 * and update product inventory levels. Some well known fulfillment services with Shopify integrations
 * include: Amazon, Shipwire, and Rakuten. When an app registers a new `FulfillmentService` on a store,
 * Shopify automatically creates a `Location` that's associated to the fulfillment service.
 * To learn more about fulfillment services, refer to
 * [Manage fulfillments as a fulfillment service app](https://shopify.dev/apps/fulfillment/fulfillment-service-apps)
 * guide.
 *
 * ## Mutations
 *
 * You can work with the `FulfillmentService` object with the
 * [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate),
 * [fulfillmentServiceUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceUpdate),
 * and [fulfillmentServiceDelete](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceDelete)
 * mutations.
 *
 * ## Hosted endpoints
 *
 * Fulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that
 * Shopify can query on certain conditions.
 * These endpoints must have a common prefix, and this prefix should be supplied in the `callbackUrl` parameter
 * in the
 * [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate)
 * mutation.
 *
 * - Shopify sends POST requests to the `<callbackUrl>/fulfillment_order_notification` endpoint
 * to notify the fulfillment service about fulfillment requests and fulfillment cancellation requests.
 *
 * For more information, refer to
 * [Receive fulfillment requests and cancellations](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
 * - Shopify sends GET requests to the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers for orders
 * if `trackingSupport` is set to `true`.
 *
 * For more information, refer to
 * [Enable tracking support](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-8-enable-tracking-support-optional).
 *
 * Fulfillment services can also update tracking information using the
 * [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdate) mutation,
 * rather than waiting for Shopify to ask for tracking numbers.
 * - Shopify sends GET requests to the `<callbackUrl>/fetch_stock` endpoint to retrieve
 * on hand inventory levels for the fulfillment service location if `inventoryManagement` is set to `true`.
 *
 * For more information, refer to
 * [Sharing inventory levels with Shopify](https://shopify.dev/apps/build/orders-fulfillment/fulfillment-service-apps/build-for-fulfillment-services#step-10-optional-share-inventory-levels-with-shopify).
 *
 * To make sure you have everything set up correctly, you can test the `callbackUrl`-prefixed endpoints
 * in your development store.
 *
 * ## Resources and webhooks
 *
 * There are a variety of objects and webhooks that enable a fulfillment service to work.
 * To exchange fulfillment information with Shopify, fulfillment services use the
 * [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder),
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment) and
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order) objects and related mutations.
 * To act on fulfillment process events that happen on the Shopify side,
 * besides awaiting calls to `callbackUrl`-prefixed endpoints,
 * fulfillment services can subscribe to the
 * [fulfillment order](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * and [order](https://shopify.dev/api/admin-rest/latest/resources/webhook)
 * webhooks.
 */
export type FulfillmentService = {
/**
 * The callback URL that the fulfillment service has registered for requests. The following considerations apply:
 *
 * - Shopify queries the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers
 * for orders, if `trackingSupport` is set to `true`.
 * - Shopify queries the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
 * if `inventoryManagement` is set to `true`.
 * - Shopify uses the `<callbackUrl>/fulfillment_order_notification` endpoint to send
 * [fulfillment and cancellation requests](https://shopify.dev/apps/build/orders-fulfillment/fulfillment-service-apps/build-for-fulfillment-services#step-9-optional-enable-tracking-support).
 */
callbackUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the fulfillment service uses the [fulfillment order based workflow](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments) for managing fulfillments.
 *
 * As the migration is now finished, the `fulfillmentOrdersOptIn` property is [deprecated](
 * https://shopify.dev/changelog/deprecation-of-the-fulfillmentservice-fulfillmentordersoptin-field)
 * and is always set to `true` on correctly functioning fulfillment services.
 */
fulfillmentOrdersOptIn: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Human-readable unique identifier for this fulfillment service.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the fulfillment service.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the fulfillment service tracks product inventory and provides updates to Shopify.
 */
inventoryManagement: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Location associated with the fulfillment service.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the fulfillment service can stock inventory alongside other locations.
 */
permitsSkuSharing: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the fulfillment service as seen by merchants.
 */
serviceName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Shipping methods associated with the fulfillment service provider. Applies only to Fulfill By Amazon fulfillment service.
 */
shippingMethods: { baseType: ShippingMethod, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the fulfillment service implemented the /fetch_tracking_numbers endpoint.
 */
trackingSupport: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Type associated with the fulfillment service.
 */
type: { baseType: BaseTypes.FulfillmentServiceType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FulfillmentService", returnType: "FulfillmentService", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentServiceCreate` mutation.
 */
export type FulfillmentServiceCreatePayload = {
/**
 * The created fulfillment service.
 */
fulfillmentService: { baseType: FulfillmentService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentServiceCreatePayload", returnType: "FulfillmentServiceCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentServiceDelete` mutation.
 */
export type FulfillmentServiceDeletePayload = {
/**
 * The ID of the deleted fulfillment service.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentServiceDeletePayload", returnType: "FulfillmentServiceDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentServiceUpdate` mutation.
 */
export type FulfillmentServiceUpdatePayload = {
/**
 * The updated fulfillment service.
 */
fulfillmentService: { baseType: FulfillmentService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentServiceUpdatePayload", returnType: "FulfillmentServiceUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the tracking information for a fulfillment.
 */
export type FulfillmentTrackingInfo = {
/**
 * The name of the tracking company.
 *
 * For tracking company names from the list below
 * Shopify will automatically build tracking URLs for all provided tracking numbers,
 * which will make the tracking numbers clickable in the interface.
 *
 * Additionally, for the tracking companies listed on the
 * [Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
 * Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.
 *
 * ### Supported tracking companies
 *
 * The following tracking companies display for shops located in any country:
 *
 * * 4PX
 * * AGS
 * * Amazon
 * * Amazon Logistics UK
 * * An Post
 * * Anjun Logistics
 * * APC
 * * Asendia USA
 * * Australia Post
 * * Bonshaw
 * * BPost
 * * BPost International
 * * Canada Post
 * * Canpar
 * * CDL Last Mile
 * * China Post
 * * Chronopost
 * * Chukou1
 * * Colissimo
 * * Comingle
 * * Coordinadora
 * * Correios
 * * Correos
 * * CTT
 * * CTT Express
 * * Cyprus Post
 * * Delnext
 * * Deutsche Post
 * * DHL eCommerce
 * * DHL eCommerce Asia
 * * DHL Express
 * * DPD
 * * DPD Local
 * * DPD UK
 * * DTD Express
 * * DX
 * * Eagle
 * * Estes
 * * Evri
 * * FedEx
 * * First Global Logistics
 * * First Line
 * * FSC
 * * Fulfilla
 * * GLS
 * * Guangdong Weisuyi Information Technology (WSE)
 * * Heppner Internationale Spedition GmbH & Co.
 * * Iceland Post
 * * IDEX
 * * Israel Post
 * * Japan Post (EN)
 * * Japan Post (JA)
 * * La Poste
 * * Lasership
 * * Latvia Post
 * * Lietuvos Paštas
 * * Logisters
 * * Lone Star Overnight
 * * M3 Logistics
 * * Meteor Space
 * * Mondial Relay
 * * New Zealand Post
 * * NinjaVan
 * * North Russia Supply Chain (Shenzhen) Co.
 * * OnTrac
 * * Packeta
 * * Pago Logistics
 * * Ping An Da Tengfei Express
 * * Pitney Bowes
 * * Portal PostNord
 * * Poste Italiane
 * * PostNL
 * * PostNord DK
 * * PostNord NO
 * * PostNord SE
 * * Purolator
 * * Qxpress
 * * Qyun Express
 * * Royal Mail
 * * Royal Shipments
 * * Sagawa (EN)
 * * Sagawa (JA)
 * * Sendle
 * * SF Express
 * * SFC Fulfillment
 * * SHREE NANDAN COURIER
 * * Singapore Post
 * * Southwest Air Cargo
 * * StarTrack
 * * Step Forward Freight
 * * Swiss Post
 * * TForce Final Mile
 * * Tinghao
 * * TNT
 * * Toll IPEC
 * * United Delivery Service
 * * UPS
 * * USPS
 * * Venipak
 * * We Post
 * * Whistl
 * * Wizmo
 * * WMYC
 * * Xpedigo
 * * XPO Logistics
 * * Yamato (EN)
 * * Yamato (JA)
 * * YiFan Express
 * * YunExpress
 *
 * The following tracking companies are displayed for shops located in specific countries:
 *
 * * **Australia**: Australia Post, Sendle, Aramex Australia, TNT Australia, Hunter Express, Couriers Please, Bonds, Allied Express, Direct Couriers, Northline, GO Logistics
 * * **Austria**: Österreichische Post
 * * **Bulgaria**: Speedy
 * * **Canada**: Intelcom, BoxKnight, Loomis, GLS
 * * **China**: China Post, DHL eCommerce Asia, WanbExpress, YunExpress, Anjun Logistics, SFC Fulfillment, FSC
 * * **Czechia**: Zásilkovna
 * * **Germany**: Deutsche Post (DE), Deutsche Post (EN), DHL, DHL Express, Swiship, Hermes, GLS
 * * **Spain**: SEUR
 * * **France**: Colissimo, Mondial Relay, Colis Privé, GLS
 * * **United Kingdom**: Evri, DPD UK, Parcelforce, Yodel, DHL Parcel, Tuffnells
 * * **Greece**: ACS Courier
 * * **Hong Kong SAR**: SF Express
 * * **Ireland**: Fastway, DPD Ireland
 * * **India**: DTDC, India Post, Delhivery, Gati KWE, Professional Couriers, XpressBees, Ecom Express, Ekart, Shadowfax, Bluedart
 * * **Italy**: BRT, GLS Italy
 * * **Japan**: エコ配, 西濃運輸, 西濃スーパーエキスプレス, 福山通運, 日本通運, 名鉄運輸, 第一貨物
 * * **Netherlands**: DHL Parcel, DPD
 * * **Norway**: Bring
 * * **Poland**: Inpost
 * * **Turkey**: PTT, Yurtiçi Kargo, Aras Kargo, Sürat Kargo
 * * **United States**: GLS, Alliance Air Freight, Pilot Freight, LSO, Old Dominion, Pandion, R+L Carriers, Southwest Air Cargo
 * * **South Africa**: Fastway, Skynet.
 */
company: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The tracking number of the fulfillment.
 *
 * The tracking number is clickable in the interface if one of the following applies
 * (the highest in the list has the highest priority):
 *
 * * Tracking url provided in the `url` field.
 * * [Shopify-known tracking company name](#supported-tracking-companies) specified in the `company` field.
 * Shopify will build the tracking URL automatically based on the tracking number specified.
 * * The tracking number has a Shopify-known format.
 * Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
 * Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
 * This can result in an invalid tracking URL.
 * It is highly recommended that you send the tracking company and the tracking URL.
 */
number: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URLs to track the fulfillment.
 *
 * The tracking URL is displayed in the merchant's admin on the order page.
 * The tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.
 * When accounts are enabled, it's also displayed in the customer's order history.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "FulfillmentTrackingInfo", returnType: "FulfillmentTrackingInfo", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `fulfillmentTrackingInfoUpdateV2` mutation.
 */
export type FulfillmentTrackingInfoUpdateV2Payload = {
/**
 * The updated fulfillment with tracking information.
 */
fulfillment: { baseType: Fulfillment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "FulfillmentTrackingInfoUpdateV2Payload", returnType: "FulfillmentTrackingInfoUpdateV2Payload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The App Bridge information for a Shopify Function.
 */
export type FunctionsAppBridge = {
/**
 * The relative path for creating a customization.
 */
createPath: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The relative path for viewing a customization.
 */
detailsPath: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FunctionsAppBridge", returnType: "FunctionsAppBridge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The error history from running a Shopify Function.
 */
export type FunctionsErrorHistory = {
/**
 * The date and time that the first error occurred.
 */
errorsFirstOccurredAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time that the first error occurred.
 */
firstOccurredAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the merchant has shared all the recent errors with the developer.
 */
hasBeenSharedSinceLastError: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the merchant has shared all the recent errors with the developer.
 */
hasSharedRecentErrors: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "FunctionsErrorHistory", returnType: "FunctionsErrorHistory", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents any file other than HTML.
 */
export type GenericFile = {
/**
 * A word or phrase to describe the contents or the function of a file.
 */
alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Any errors that have occurred on the file.
 */
fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The status of the file.
 */
fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The generic file's MIME type.
 */
mimeType: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The generic file's size in bytes.
 */
originalFileSize: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The preview image for the media.
 */
preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The generic file's URL.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "GenericFile", returnType: "GenericFile", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & File & Node

/**
 * Represents an issued gift card.
 */
export type GiftCard = {
/**
 * The gift card's remaining balance.
 */
balance: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time at which the gift card was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer who will receive the gift card.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time at which the gift card was disabled.
 */
disabledAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the gift card is enabled.
 */
enabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date at which the gift card will expire.
 */
expiresOn: { baseType: BaseTypes.Date, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The initial value of the gift card.
 */
initialValue: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The final four characters of the gift card code.
 */
lastCharacters: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The gift card code. Everything but the final four characters is masked.
 */
maskedCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The note associated with the gift card, which isn't visible to the customer.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The order associated with the gift card. This value is `null` if the gift card was issued manually.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "GiftCard", returnType: "GiftCard", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple GiftCards.
 */
export type GiftCardConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: GiftCardEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in GiftCardEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: GiftCard, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "GiftCardConnection", returnType: "GiftCardConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `giftCardCreate` mutation.
 */
export type GiftCardCreatePayload = {
/**
 * The created gift card.
 */
giftCard: { baseType: GiftCard, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The created gift card's code.
 */
giftCardCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: GiftCardUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "GiftCardCreatePayload", returnType: "GiftCardCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `giftCardDisable` mutation.
 */
export type GiftCardDisablePayload = {
/**
 * The disabled gift card.
 */
giftCard: { baseType: GiftCard, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "GiftCardDisablePayload", returnType: "GiftCardDisablePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one GiftCard and a cursor during pagination.
 */
export type GiftCardEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of GiftCardEdge.
 */
node: { baseType: GiftCard, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "GiftCardEdge", returnType: "GiftCardEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A sale associated with a gift card.
 */
export type GiftCardSale = {
/**
 * The type of order action that the sale represents.
 */
actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the sale.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line item for the associated sale.
 */
lineItem: { baseType: LineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line type assocated with the sale.
 */
lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units either ordered or intended to be returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All individual taxes associated with the sale.
 */
taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total sale amount after taxes and discounts.
 */
totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale after taxes.
 */
totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale before taxes.
 */
totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of taxes for the sale.
 */
totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "GiftCardSale", returnType: "GiftCardSale", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Sale

/**
 * Return type for `giftCardUpdate` mutation.
 */
export type GiftCardUpdatePayload = {
/**
 * The updated gift card.
 */
giftCard: { baseType: GiftCard, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "GiftCardUpdatePayload", returnType: "GiftCardUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an error that happens during the execution of a gift card mutation.
 */
export type GiftCardUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.GiftCardErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "GiftCardUserError", returnType: "GiftCardUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a summary of the current version of data in a resource.
 *
 * The `compare_digest` field can be used as input for mutations that implement a compare-and-swap mechanism.
 */
export type HasCompareDigest = {
/**
 * The data stored in the resource, represented as a digest.
 */
compareDigest: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an object that has a list of events.
 */
export type HasEvents = {
/**
 * The paginated list of events associated with the host subject.
 */
events: { baseType: EventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.EventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Localization extensions associated with the specified resource. For example, the tax id for government invoice.
 */
export type HasLocalizationExtensions = {
/**
 * List of localization extensions for the resource.
 */
localizationExtensions: { baseType: LocalizationExtensionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; countryCodes?: Array<BaseTypes.CountryCode> | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; purposes?: Array<BaseTypes.LocalizationExtensionPurpose> | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Resources that metafield definitions can be applied to.
 */
export type HasMetafieldDefinitions = {
/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents information about the metafields associated to the specified resource.
 */
export type HasMetafields = {
/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Published translations associated with the resource.
 */
export type HasPublishedTranslations = {
/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }
}

/**
 * Represents information about the store credit accounts associated to the specified owner.
 */
export type HasStoreCreditAccounts = {
/**
 * Returns a list of store credit accounts that belong to the owner resource.
 * A store credit account owner can hold multiple accounts each with a different currency.
 */
storeCreditAccounts: { baseType: StoreCreditAccountConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an image resource.
 */
export type Image = {
/**
 * A word or phrase to share the nature or contents of an image.
 */
altText: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The original height of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
 */
height: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A unique ID for the image.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location of the original image as a URL.
 *
 * If there are any existing transformations in the original source URL, they will remain and not be stripped.
 */
originalSrc: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location of the image as a URL.
 */
src: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location of the transformed image as a URL.
 *
 * All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
 * Otherwise any transformations which an image type doesn't support will be ignored.
 */
transformedSrc: { baseType: BaseTypes.URL, arguments: { crop?: BaseTypes.CropRegion | null; maxHeight?: BaseTypes.Int | null; maxWidth?: BaseTypes.Int | null; preferredContentType?: BaseTypes.ImageContentType | null; scale?: BaseTypes.Int | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location of the image as a URL.
 *
 * If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
 *
 * All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
 *
 * If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
 */
url: { baseType: BaseTypes.URL, arguments: { transform?: InputTypes.ImageTransformInput | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The original width of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
 */
width: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "Image", returnType: "Image", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafields

/**
 * An auto-generated type for paginating through multiple Images.
 */
export type ImageConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ImageEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ImageEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Image, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ImageConnection", returnType: "ImageConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Image and a cursor during pagination.
 */
export type ImageEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ImageEdge.
 */
node: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ImageEdge", returnType: "ImageEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A parameter to upload an image.
 *
 * Deprecated in favor of
 * [StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
 * which is used in
 * [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
 * and returned by the
 * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
 */
export type ImageUploadParameter = {
/**
 * The parameter name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The parameter value.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ImageUploadParameter", returnType: "ImageUploadParameter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `inventoryActivate` mutation.
 */
export type InventoryActivatePayload = {
/**
 * The inventory level that was activated.
 */
inventoryLevel: { baseType: InventoryLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "InventoryActivatePayload", returnType: "InventoryActivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `inventoryAdjustQuantities` mutation.
 */
export type InventoryAdjustQuantitiesPayload = {
/**
 * The group of changes made by the operation.
 */
inventoryAdjustmentGroup: { baseType: InventoryAdjustmentGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: InventoryAdjustQuantitiesUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "InventoryAdjustQuantitiesPayload", returnType: "InventoryAdjustQuantitiesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `InventoryAdjustQuantities`.
 */
export type InventoryAdjustQuantitiesUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.InventoryAdjustQuantitiesUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryAdjustQuantitiesUserError", returnType: "InventoryAdjustQuantitiesUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a group of adjustments made as part of the same operation.
 */
export type InventoryAdjustmentGroup = {
/**
 * The app that triggered the inventory event, if one exists.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The set of inventory quantity changes that occurred in the inventory event.
 */
changes: { baseType: InventoryChange, arguments: { inventoryItemIds?: Array<BaseTypes.ID> | null; locationIds?: Array<BaseTypes.ID> | null; quantityNames?: Array<BaseTypes.String> | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The date and time the inventory adjustment group was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason for the group of adjustments.
 */
reason: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A freeform URI that represents why the inventory change happened. This can be the entity adjusting inventory
 * quantities or the Shopify resource that's associated with the inventory adjustment. For example, a unit in a
 * draft order might have been previously reserved, and a merchant later creates an order from the draft order.
 * In this case, the `referenceDocumentUri` for the inventory adjustment is a URI referencing the order ID.
 */
referenceDocumentUri: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The staff member associated with the inventory event.
 */
staffMember: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "InventoryAdjustmentGroup", returnType: "InventoryAdjustmentGroup", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `inventoryBulkToggleActivation` mutation.
 */
export type InventoryBulkToggleActivationPayload = {
/**
 * The inventory item that was updated.
 */
inventoryItem: { baseType: InventoryItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The activated inventory levels.
 */
inventoryLevels: { baseType: InventoryLevel, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: InventoryBulkToggleActivationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "InventoryBulkToggleActivationPayload", returnType: "InventoryBulkToggleActivationPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurred while setting the activation status of an inventory item.
 */
export type InventoryBulkToggleActivationUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.InventoryBulkToggleActivationUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryBulkToggleActivationUserError", returnType: "InventoryBulkToggleActivationUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a change in an inventory quantity of an inventory item at a location.
 */
export type InventoryChange = {
/**
 * The amount by which the inventory quantity was changed.
 */
delta: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The inventory item associated with this inventory change.
 */
item: { baseType: InventoryItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A URI that represents what the inventory quantity change was applied to.
 */
ledgerDocumentUri: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The location associated with this inventory change.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
 * of the inventory quantity that was changed.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity of named inventory after the change.
 */
quantityAfterChange: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "InventoryChange", returnType: "InventoryChange", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `inventoryDeactivate` mutation.
 */
export type InventoryDeactivatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "InventoryDeactivatePayload", returnType: "InventoryDeactivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 * Learn [more about the relationships between inventory objects](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states#inventory-object-relationships).
 */
export type InventoryItem = {
/**
 * The ISO 3166-1 alpha-2 country code of where the item originated from.
 */
countryCodeOfOrigin: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of country specific harmonized system codes.
 */
countryHarmonizedSystemCodes: { baseType: CountryHarmonizedSystemCodeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the inventory item was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of inventory items that share the same SKU with this item.
 */
duplicateSkuCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The harmonized system code of the item. This must be a number between 6 and 13 digits.
 */
harmonizedSystemCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL that points to the inventory history for the item.
 */
inventoryHistoryUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The inventory item's quantities at the specified location.
 */
inventoryLevel: { baseType: InventoryLevel, arguments: { locationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of the inventory item's quantities for each location that the inventory item can be stocked at.
 */
inventoryLevels: { baseType: InventoryLevelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of locations where this inventory item is stocked.
 */
locationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The packaging dimensions of the inventory item.
 */
measurement: { baseType: InventoryItemMeasurement, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ISO 3166-2 alpha-2 province code of where the item originated from.
 */
provinceCodeOfOrigin: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the inventory item requires shipping.
 */
requiresShipping: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Inventory item SKU. Case-sensitive string.
 */
sku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether inventory levels are tracked for the item.
 */
tracked: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the value of the `tracked` field for the inventory item can be changed.
 */
trackedEditable: { baseType: EditableProperty, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Unit cost associated with the inventory item. Note: the user must have "View product costs" permission granted in order to access this field once product granular permissions are enabled.
 */
unitCost: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the inventory item was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The variant that owns this inventory item.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryItem", returnType: "InventoryItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & LegacyInteroperability & Node

/**
 * An auto-generated type for paginating through multiple InventoryItems.
 */
export type InventoryItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: InventoryItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in InventoryItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: InventoryItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryItemConnection", returnType: "InventoryItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one InventoryItem and a cursor during pagination.
 */
export type InventoryItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of InventoryItemEdge.
 */
node: { baseType: InventoryItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryItemEdge", returnType: "InventoryItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the packaged dimension for an inventory item.
 */
export type InventoryItemMeasurement = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The weight of the inventory item.
 */
weight: { baseType: Weight, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "InventoryItemMeasurement", returnType: "InventoryItemMeasurement", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `inventoryItemUpdate` mutation.
 */
export type InventoryItemUpdatePayload = {
/**
 * The inventory item that was updated.
 */
inventoryItem: { baseType: InventoryItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "InventoryItemUpdatePayload", returnType: "InventoryItemUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The quantities of an inventory item that are related to a specific location.
 * Learn [more about the relationships between inventory objects](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states#inventory-object-relationships).
 */
export type InventoryLevel = {
/**
 * Whether the inventory items associated with the inventory level can be deactivated.
 */
canDeactivate: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the inventory level was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated.
 */
deactivationAlert: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Inventory item associated with the inventory level.
 */
item: { baseType: InventoryItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location associated with the inventory level.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Quantities for the requested names.
 */
quantities: { baseType: InventoryQuantity, arguments: { names: Array<BaseTypes.String> }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Scheduled changes for the requested quantity names.
 */
scheduledChanges: { baseType: InventoryScheduledChangeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.ScheduledChangeSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the inventory level was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryLevel", returnType: "InventoryLevel", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple InventoryLevels.
 */
export type InventoryLevelConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: InventoryLevelEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in InventoryLevelEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: InventoryLevel, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryLevelConnection", returnType: "InventoryLevelConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one InventoryLevel and a cursor during pagination.
 */
export type InventoryLevelEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of InventoryLevelEdge.
 */
node: { baseType: InventoryLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryLevelEdge", returnType: "InventoryLevelEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `inventoryMoveQuantities` mutation.
 */
export type InventoryMoveQuantitiesPayload = {
/**
 * The group of changes made by the operation.
 */
inventoryAdjustmentGroup: { baseType: InventoryAdjustmentGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: InventoryMoveQuantitiesUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "InventoryMoveQuantitiesPayload", returnType: "InventoryMoveQuantitiesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `InventoryMoveQuantities`.
 */
export type InventoryMoveQuantitiesUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.InventoryMoveQuantitiesUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryMoveQuantitiesUserError", returnType: "InventoryMoveQuantitiesUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * General inventory properties for the shop.
 */
export type InventoryProperties = {
/**
 * All the quantity names.
 */
quantityNames: { baseType: InventoryQuantityName, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "InventoryProperties", returnType: "InventoryProperties", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a quantity of an inventory item at a specific location, for a specific name.
 */
export type InventoryQuantity = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
 * that identifies the inventory quantity.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity for the quantity name.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * When the quantity was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "InventoryQuantity", returnType: "InventoryQuantity", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Details about an individual quantity name.
 */
export type InventoryQuantityName = {
/**
 * List of quantity names that this quantity name belongs to.
 */
belongsTo: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * List of quantity names that comprise this quantity name.
 */
comprises: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The display name for quantity names translated into applicable language.
 */
displayName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the quantity name has been used by the merchant.
 */
isInUse: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states) of
 * the inventory quantity. Used by
 * [inventory queries and mutations](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#graphql-queries-and-mutations).
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryQuantityName", returnType: "InventoryQuantityName", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Returns the scheduled changes to inventory states related to the ledger document.
 */
export type InventoryScheduledChange = {
/**
 * The date and time that the scheduled change is expected to happen.
 */
expectedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity
 * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
 * to transition from.
 */
fromName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantities of an inventory item that are related to a specific location.
 */
inventoryLevel: { baseType: InventoryLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A freeform URI that represents what changed the inventory quantities.
 */
ledgerDocumentUri: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity of the scheduled change associated with the ledger document in the `fromName` state.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity
 * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
 * to transition to.
 */
toName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryScheduledChange", returnType: "InventoryScheduledChange", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple InventoryScheduledChanges.
 */
export type InventoryScheduledChangeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: InventoryScheduledChangeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in InventoryScheduledChangeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: InventoryScheduledChange, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryScheduledChangeConnection", returnType: "InventoryScheduledChangeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one InventoryScheduledChange and a cursor during pagination.
 */
export type InventoryScheduledChangeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of InventoryScheduledChangeEdge.
 */
node: { baseType: InventoryScheduledChange, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventoryScheduledChangeEdge", returnType: "InventoryScheduledChangeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `inventorySetOnHandQuantities` mutation.
 */
export type InventorySetOnHandQuantitiesPayload = {
/**
 * The group of changes made by the operation.
 */
inventoryAdjustmentGroup: { baseType: InventoryAdjustmentGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: InventorySetOnHandQuantitiesUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "InventorySetOnHandQuantitiesPayload", returnType: "InventorySetOnHandQuantitiesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `InventorySetOnHandQuantities`.
 */
export type InventorySetOnHandQuantitiesUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.InventorySetOnHandQuantitiesUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventorySetOnHandQuantitiesUserError", returnType: "InventorySetOnHandQuantitiesUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `inventorySetQuantities` mutation.
 */
export type InventorySetQuantitiesPayload = {
/**
 * The group of changes made by the operation.
 */
inventoryAdjustmentGroup: { baseType: InventoryAdjustmentGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: InventorySetQuantitiesUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "InventorySetQuantitiesPayload", returnType: "InventorySetQuantitiesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `InventorySetQuantities`.
 */
export type InventorySetQuantitiesUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.InventorySetQuantitiesUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventorySetQuantitiesUserError", returnType: "InventorySetQuantitiesUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `inventorySetScheduledChanges` mutation.
 */
export type InventorySetScheduledChangesPayload = {
/**
 * The scheduled changes that were created.
 */
scheduledChanges: { baseType: InventoryScheduledChange, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: InventorySetScheduledChangesUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "InventorySetScheduledChangesPayload", returnType: "InventorySetScheduledChangesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `InventorySetScheduledChanges`.
 */
export type InventorySetScheduledChangesUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.InventorySetScheduledChangesUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "InventorySetScheduledChangesUserError", returnType: "InventorySetScheduledChangesUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A job corresponds to some long running task that the client should poll for status.
 */
export type Job = {
/**
 * This indicates if the job is still queued or has been run.
 */
done: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID that's returned when running an asynchronous mutation.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * This field will only resolve once the job is done. Can be used to ask for object(s) that have been changed by the job.
 */
query: { baseType: QueryRoot, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "Job", returnType: "Job", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A job corresponds to some long running task that the client should poll for status.
 */
export type JobResult = {
/**
 * This indicates if the job is still queued or has been run.
 */
done: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID that's returned when running an asynchronous mutation.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Interoperability metadata for types that directly correspond to a REST Admin API resource.
 * For example, on the Product type, LegacyInteroperability returns metadata for the corresponding [Product object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the REST Admin API.
 */
export type LegacyInteroperability = {
/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The total number of pending orders on a shop if less then a maximum, or that maximum.
 * The atMax field indicates when this maximum has been reached.
 */
export type LimitedPendingOrderCount = {
/**
 * This is set when the number of pending orders has reached the maximum.
 */
atMax: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of pendings orders on the shop.
 * Limited to a maximum of 10000.
 */
count: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LimitedPendingOrderCount", returnType: "LimitedPendingOrderCount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents individual products and quantities purchased in the associated order.
 */
export type LineItem = {
/**
 * Whether the line item can be restocked.
 */
canRestock: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subscription contract associated with this line item.
 */
contract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of units ordered, excluding refunded and removed units.
 */
currentQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of attributes that represent custom features or special requests.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The discounts that have been allocated to the line item by discount applications, including discounts allocated to refunded and removed quantities.
 */
discountAllocations: { baseType: DiscountAllocation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total discounted price of the line item in shop currency, including refunded and removed quantities. This value doesn't include order-level discounts.
 */
discountedTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounted price of the line item in shop and presentment currencies, including refunded and removed quantities. This value doesn't include order-level discounts. Code-based discounts aren't included by default.
 */
discountedTotalSet: { baseType: MoneyBag, arguments: { withCodeDiscounts?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The approximate unit price of the line item in shop currency. This value includes line-level discounts and discounts applied to refunded and removed quantities. It doesn't include order-level or code-based discounts.
 */
discountedUnitPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The approximate unit price of the line item in shop and presentment currencies. This value includes discounts applied to refunded and removed quantities.
 */
discountedUnitPriceAfterAllDiscountsSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The approximate unit price of the line item in shop and presentment currencies. This value includes line-level discounts and discounts applied to refunded and removed quantities. It doesn't include order-level or code-based discounts.
 */
discountedUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The duties associated with the line item.
 */
duties: { baseType: Duty, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total number of units to fulfill.
 */
fulfillableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The fulfillment service that stocks the product variant belonging to a line item.
 *
 * This is a third-party fulfillment service in the following scenarios:
 *
 * **Scenario 1**
 * - The product variant is stocked by a single fulfillment service.
 * - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
 *
 * **Scenario 2**
 * - Multiple fulfillment services stock the product variant.
 * - The last time that the line item was unfulfilled, it was awaiting fulfillment by a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
 *
 * If none of the above conditions are met, then the fulfillment service has the `manual` handle.
 */
fulfillmentService: { baseType: FulfillmentService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
 * 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
 */
fulfillmentStatus: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The image associated to the line item's variant.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the line item represents the purchase of a gift card.
 */
isGiftCard: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line item group associated to the line item.
 */
lineItemGroup: { baseType: LineItemGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the line item can be edited or not.
 */
merchantEditable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the product, optionally appended with the title of the variant (if applicable).
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip. Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object for more fulfillment details.
 */
nonFulfillableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * In shop currency, the total price of the line item when the order was created.
 * This value doesn't include discounts.
 */
originalTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * In shop and presentment currencies, the total price of the line item when the order was created.
 * This value doesn't include discounts.
 */
originalTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * In shop currency, the unit price of the line item when the order was created. This value doesn't include discounts.
 */
originalUnitPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * In shop and presentment currencies, the unit price of the line item when the order was created. This value doesn't include discounts.
 */
originalUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Product object associated with this line item's variant.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of units ordered, including refunded and removed units.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units ordered, excluding refunded units.
 */
refundableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether physical shipping is required for the variant.
 */
requiresShipping: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the line item can be restocked.
 */
restockable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The selling plan details associated with the line item.
 */
sellingPlan: { baseType: LineItemSellingPlan, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The variant SKU number.
 */
sku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Staff attributed to the line item.
 */
staffMember: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The taxes charged for the line item, including taxes charged for refunded and removed quantities.
 */
taxLines: { baseType: TaxLine, arguments: { first?: BaseTypes.Int | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the variant is taxable.
 */
taxable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the product at time of order creation.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discount allocated to the line item in shop currency, including the total allocated to refunded and removed quantities. This value doesn't include order-level discounts.
 */
totalDiscount: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discount allocated to the line item in shop and presentment currencies, including the total allocated to refunded and removed quantities. This value doesn't include order-level discounts.
 */
totalDiscountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * In shop currency, the total discounted price of the unfulfilled quantity for the line item.
 */
unfulfilledDiscountedTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * In shop and presentment currencies, the total discounted price of the unfulfilled quantity for the line item.
 */
unfulfilledDiscountedTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * In shop currency, the total price of the unfulfilled quantity for the line item. This value doesn't include discounts.
 */
unfulfilledOriginalTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * In shop and presentment currencies, the total price of the unfulfilled quantity for the line item. This value doesn't include discounts.
 */
unfulfilledOriginalTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units not yet fulfilled.
 */
unfulfilledQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Variant object associated with this line item.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The title of the variant at time of order creation.
 */
variantTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the vendor who made the variant.
 */
vendor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "LineItem", returnType: "LineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple LineItems.
 */
export type LineItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: LineItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in LineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: LineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LineItemConnection", returnType: "LineItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one LineItem and a cursor during pagination.
 */
export type LineItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of LineItemEdge.
 */
node: { baseType: LineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LineItemEdge", returnType: "LineItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A line item group (bundle) to which a line item belongs to.
 */
export type LineItemGroup = {
/**
 * A list of attributes that represent custom features or special requests.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Quantity of the line item group on the order.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Title of the line item group.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * ID of the variant of the line item group.
 */
variantId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * SKU of the variant of the line item group.
 */
variantSku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "LineItemGroup", returnType: "LineItemGroup", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Represents a single line item on an order.
 */
export type LineItemMutable = {
/**
 * Whether the line item can be restocked.
 */
canRestock: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of attributes that represent custom features or special requests.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The discounts that have been allocated onto the line item by discount applications.
 */
discountAllocations: { baseType: DiscountAllocation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total line price after discounts are applied, in shop currency.
 */
discountedTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total line price after discounts are applied, in shop and presentment currencies.
 */
discountedTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
 */
discountedUnitPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
 */
discountedUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of units to fulfill.
 */
fulfillableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The service provider that fulfills the line item.
 *
 * Deleted fulfillment services will return null.
 */
fulfillmentService: { baseType: FulfillmentService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
 * 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
 */
fulfillmentStatus: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The image associated to the line item's variant.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the line item represents the purchase of a gift card.
 */
isGiftCard: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the line item can be edited or not.
 */
merchantEditable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the product.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of units that can't be fulfilled. For example, if items have been refunded, or the item isn't something that can be fulfilled, like a tip.
 */
nonFulfillableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price without any discounts applied, in shop currency. ""This value is based on the unit price of the variant x quantity.
 */
originalTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
 */
originalTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The variant unit price without discounts applied, in shop currency.
 */
originalUnitPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The variant unit price without discounts applied, in shop and presentment currencies.
 */
originalUnitPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Product object associated with this line item's variant.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of variant units ordered.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line item's quantity, minus the refunded quantity.
 */
refundableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether physical shipping is required for the variant.
 */
requiresShipping: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the line item can be restocked.
 */
restockable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The variant SKU number.
 */
sku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Staff attributed to the line item.
 */
staffMember: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The TaxLine object connected to this line item.
 */
taxLines: { baseType: TaxLine, arguments: { first?: BaseTypes.Int | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the variant is taxable.
 */
taxable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the product.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of the discount allocated to the line item in the shop currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information.
 */
totalDiscount: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of the discount allocated to the line item in the presentment currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information.
 */
totalDiscountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounted value of unfulfilled units, in shop currency.
 */
unfulfilledDiscountedTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounted value of unfulfilled units, in shop and presentment currencies.
 */
unfulfilledDiscountedTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
 */
unfulfilledOriginalTotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
 */
unfulfilledOriginalTotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units not yet fulfilled.
 */
unfulfilledQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Variant object associated with this line item.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the variant.
 */
variantTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the vendor who made the variant.
 */
vendor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "LineItemMutable", returnType: "LineItemMutable", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple LineItemMutables.
 */
export type LineItemMutableConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: LineItemMutableEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in LineItemMutableEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: LineItemMutable, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LineItemMutableConnection", returnType: "LineItemMutableConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one LineItemMutable and a cursor during pagination.
 */
export type LineItemMutableEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of LineItemMutableEdge.
 */
node: { baseType: LineItemMutable, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LineItemMutableEdge", returnType: "LineItemMutableEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the selling plan for a line item.
 */
export type LineItemSellingPlan = {
/**
 * The name of the selling plan for display purposes.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the selling plan associated with the line item.
 */
sellingPlanId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "LineItemSellingPlan", returnType: "LineItemSellingPlan", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A link to direct users to.
 */
export type Link = {
/**
 * A context-sensitive label for the link.
 */
label: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The URL that the link visits.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Link", returnType: "Link", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasPublishedTranslations

/**
 * The identifier for the metafield linked to this option.
 *
 * This API is currently in early access. See [Metafield-linked product options](https://shopify.dev/docs/api/admin/migrate/new-product-model/metafield-linked) for more details.
 */
export type LinkedMetafield = {
/**
 * Key of the metafield the option is linked to.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Namespace of the metafield the option is linked to.
 */
namespace: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "LinkedMetafield", returnType: "LinkedMetafield", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A locale.
 */
export type Locale = {
/**
 * Locale ISO code.
 */
isoCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Human-readable locale name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Locale", returnType: "Locale", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.
 */
export type LocalizationExtension = {
/**
 * Country ISO 3166-1 alpha-2 code.
 */
countryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The localized extension keys that are allowed.
 */
key: { baseType: BaseTypes.LocalizationExtensionKey, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The purpose of this localization extension.
 */
purpose: { baseType: BaseTypes.LocalizationExtensionPurpose, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The localized extension title.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the field.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LocalizationExtension", returnType: "LocalizationExtension", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple LocalizationExtensions.
 */
export type LocalizationExtensionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: LocalizationExtensionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in LocalizationExtensionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: LocalizationExtension, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LocalizationExtensionConnection", returnType: "LocalizationExtensionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one LocalizationExtension and a cursor during pagination.
 */
export type LocalizationExtensionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of LocalizationExtensionEdge.
 */
node: { baseType: LocalizationExtension, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LocalizationExtensionEdge", returnType: "LocalizationExtensionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the location where the physical good resides. You can stock inventory at active locations. Active
 * locations that have `fulfills_online_orders: true` and are configured with a shipping rate, pickup enabled or
 * local delivery will be able to sell from their storefront.
 */
export type Location = {
/**
 * Whether the location can be reactivated. If `false`, then trying to activate the location with the
 * [`LocationActivate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/locationActivate)
 * mutation will return an error that describes why the location can't be activated.
 */
activatable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The address of this location.
 */
address: { baseType: LocationAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the location address has been verified.
 */
addressVerified: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was added to a shop.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether this location can be deactivated. If `true`, then the location can be deactivated by calling the
 * [`LocationDeactivate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/locationDeactivate)
 * mutation. If `false`, then calling the mutation to deactivate it will return an error that describes why the
 * location can't be deactivated.
 */
deactivatable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was deactivated at. For example, 3:30 pm on September 7, 2019 in the time zone of UTC (Universal Time Coordinated) is represented as `"2019-09-07T15:50:00Z`".
 */
deactivatedAt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether this location can be deleted.
 */
deletable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Name of the service provider that fulfills from this location.
 */
fulfillmentService: { baseType: FulfillmentService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether this location can fulfill online orders.
 */
fulfillsOnlineOrders: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether this location has active inventory.
 */
hasActiveInventory: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether this location has orders that need to be fulfilled.
 */
hasUnfulfilledOrders: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantities of an inventory item at this location.
 */
inventoryLevel: { baseType: InventoryLevel, arguments: { inventoryItemId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of the quantities of the inventory items that can be stocked at this location.
 */
inventoryLevels: { baseType: InventoryLevelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the location is active. A deactivated location can be activated (change `isActive: true`) if it has
 * `activatable` set to `true` by calling the
 * [`locationActivate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/locationActivate)
 * mutation.
 */
isActive: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether this location is a fulfillment service.
 */
isFulfillmentService: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the location is your primary location for shipping inventory.
 */
isPrimary: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Local pickup settings for the location.
 */
localPickupSettingsV2: { baseType: DeliveryLocalPickupSettings, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the location.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored.
 */
shipsInventory: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of suggested addresses for this location (empty if none).
 */
suggestedAddresses: { baseType: LocationSuggestedAddress, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the location was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Location", returnType: "Location", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & LegacyInteroperability & Node

/**
 * Return type for `locationActivate` mutation.
 */
export type LocationActivatePayload = {
/**
 * The location that was activated.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
locationActivateUserErrors: { baseType: LocationActivateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "LocationActivatePayload", returnType: "LocationActivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs while activating a location.
 */
export type LocationActivateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.LocationActivateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LocationActivateUserError", returnType: "LocationActivateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `locationAdd` mutation.
 */
export type LocationAddPayload = {
/**
 * The location that was added.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: LocationAddUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "LocationAddPayload", returnType: "LocationAddPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs while adding a location.
 */
export type LocationAddUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.LocationAddUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LocationAddUserError", returnType: "LocationAddUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents the address of a location.
 */
export type LocationAddress = {
/**
 * The first line of the address for the location.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The second line of the address for the location.
 */
address2: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The city of the location.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The country of the location.
 */
country: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The country code of the location.
 */
countryCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A formatted version of the address for the location.
 */
formatted: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The approximate latitude coordinates of the location.
 */
latitude: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The approximate longitude coordinates of the location.
 */
longitude: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The phone number of the location.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The province of the location.
 */
province: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The code for the province, state, or district of the address of the location.
 */
provinceCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ZIP code of the location.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "LocationAddress", returnType: "LocationAddress", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Locations.
 */
export type LocationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: LocationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in LocationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Location, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LocationConnection", returnType: "LocationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `locationDeactivate` mutation.
 */
export type LocationDeactivatePayload = {
/**
 * The location that was deactivated.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
locationDeactivateUserErrors: { baseType: LocationDeactivateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "LocationDeactivatePayload", returnType: "LocationDeactivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The possible errors that can be returned when executing the `locationDeactivate` mutation.
 */
export type LocationDeactivateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.LocationDeactivateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LocationDeactivateUserError", returnType: "LocationDeactivateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `locationDelete` mutation.
 */
export type LocationDeletePayload = {
/**
 * The ID of the location that was deleted.
 */
deletedLocationId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
locationDeleteUserErrors: { baseType: LocationDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "LocationDeletePayload", returnType: "LocationDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs while deleting a location.
 */
export type LocationDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.LocationDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LocationDeleteUserError", returnType: "LocationDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An auto-generated type which holds one Location and a cursor during pagination.
 */
export type LocationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of LocationEdge.
 */
node: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LocationEdge", returnType: "LocationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `locationEdit` mutation.
 */
export type LocationEditPayload = {
/**
 * The location that was edited.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: LocationEditUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "LocationEditPayload", returnType: "LocationEditPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs while editing a location.
 */
export type LocationEditUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.LocationEditUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "LocationEditUserError", returnType: "LocationEditUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `locationLocalPickupDisable` mutation.
 */
export type LocationLocalPickupDisablePayload = {
/**
 * The ID of the location for which local pickup was disabled.
 */
locationId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DeliveryLocationLocalPickupSettingsError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "LocationLocalPickupDisablePayload", returnType: "LocationLocalPickupDisablePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `locationLocalPickupEnable` mutation.
 */
export type LocationLocalPickupEnablePayload = {
/**
 * The local pickup settings that were enabled.
 */
localPickupSettings: { baseType: DeliveryLocalPickupSettings, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: DeliveryLocationLocalPickupSettingsError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "LocationLocalPickupEnablePayload", returnType: "LocationLocalPickupEnablePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a suggested address for a location.
 */
export type LocationSuggestedAddress = {
/**
 * The first line of the suggested address.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The second line of the suggested address.
 */
address2: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The city of the suggested address.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The country of the suggested address.
 */
country: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The country code of the suggested address.
 */
countryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A formatted version of the suggested address.
 */
formatted: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The province of the suggested address.
 */
province: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The code for the province, state, or district of the suggested address.
 */
provinceCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ZIP code of the suggested address.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "LocationSuggestedAddress", returnType: "LocationSuggestedAddress", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a customer mailing address.
 *
 * For example, a customer's default address and an order's billing address are both mailling addresses.
 */
export type MailingAddress = {
/**
 * The first line of the address. Typically the street address or PO Box number.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The second line of the address. Typically the number of the apartment, suite, or unit.
 */
address2: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the city, district, village, or town.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the customer's company or organization.
 */
company: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the address corresponds to recognized latitude and longitude values.
 */
coordinatesValidated: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the country.
 */
country: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The two-letter code for the country of the address.
 *
 * For example, US.
 */
countryCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The two-letter code for the country of the address.
 *
 * For example, US.
 */
countryCodeV2: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The first name of the customer.
 */
firstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A formatted version of the address, customized by the provided arguments.
 */
formatted: { baseType: BaseTypes.String, arguments: { withCompany?: BaseTypes.Boolean | null; withName?: BaseTypes.Boolean | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A comma-separated list of the values for city, province, and country.
 */
formattedArea: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The last name of the customer.
 */
lastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The latitude coordinate of the customer address.
 */
latitude: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The longitude coordinate of the customer address.
 */
longitude: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The full name of the customer, based on firstName and lastName.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A unique phone number for the customer.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The region of the address, such as the province, state, or district.
 */
province: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The alphanumeric code for the region.
 *
 * For example, ON.
 */
provinceCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The time zone of the address.
 */
timeZone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The validation status that is leveraged by the address validation feature in the Shopify Admin.
 * See ["Validating addresses in your Shopify admin"](https://help.shopify.com/manual/fulfillment/managing-orders/validating-order-address) for more details.
 */
validationResultSummary: { baseType: BaseTypes.MailingAddressValidationResult, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The zip or postal code of the address.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MailingAddress", returnType: "MailingAddress", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple MailingAddresses.
 */
export type MailingAddressConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MailingAddressEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MailingAddressEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: MailingAddress, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MailingAddressConnection", returnType: "MailingAddressConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MailingAddress and a cursor during pagination.
 */
export type MailingAddressEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MailingAddressEdge.
 */
node: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MailingAddressEdge", returnType: "MailingAddressEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Manual discount applications capture the intentions of a discount that was manually created for an order.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export type ManualDiscountApplication = {
/**
 * The method by which the discount's value is applied to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of the discount application.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * An ordered index that can be used to identify the discount application and indicate the precedence
 * of the discount application for calculations.
 */
index: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How the discount amount is distributed on the discounted lines.
 */
targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is applied on line items or shipping lines.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the discount application.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the discount application.
 */
value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ManualDiscountApplication", returnType: "ManualDiscountApplication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DiscountApplication

/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export type Market = {
/**
 * The catalogs that belong to the market.
 */
catalogs: { baseType: MarketCatalogConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of catalogs that belong to the market.
 */
catalogsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The market’s currency settings.
 */
currencySettings: { baseType: MarketCurrencySettings, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the market is enabled to receive visitors and sales. **Note**: Regions in inactive
 * markets can't be selected on the storefront or in checkout.
 */
enabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A short, human-readable unique identifier for the market. This is changeable by the merchant.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the market. Not shown to customers.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The market’s price list, which specifies a percentage-based price adjustment as well as
 * fixed price overrides for specific variants.
 *
 * Markets with multiple catalogs can have multiple price lists. To query which price lists are connected to
 * a market, please query for price lists through the catalogs connection.
 */
priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the market is the shop’s primary market.
 */
primary: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The regions that comprise the market.
 */
regions: { baseType: MarketRegionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The market’s web presence, which defines its SEO strategy. This can be a different domain,
 * subdomain, or subfolders of the primary domain. Each web presence comprises one or more
 * language variants. If a market doesn't have its own web presence, then the market is accessible on the
 * primary market's domains using [country
 * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
 * If it's the primary market and it has multiple web presences, then this field will return the primary domain web presence.
 */
webPresence: { baseType: MarketWebPresence, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The market’s web presences, which defines its SEO strategy. This can be a different domain,
 * subdomain, or subfolders of the primary domain. Each web presence comprises one or more
 * language variants. If a market doesn't have any web presences, then the market is accessible on the
 * primary market's domains using [country
 * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
 */
webPresences: { baseType: MarketWebPresenceConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Market", returnType: "Market", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & Node

/**
 * A list of products with publishing and pricing information associated with markets.
 */
export type MarketCatalog = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The markets associated with the catalog.
 */
markets: { baseType: MarketConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Most recent catalog operations.
 */
operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The price list associated with the catalog.
 */
priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A group of products and collections that's published to a catalog.
 */
publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of the catalog.
 */
status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the catalog.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketCatalog", returnType: "MarketCatalog", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Catalog & Node

/**
 * An auto-generated type for paginating through multiple MarketCatalogs.
 */
export type MarketCatalogConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MarketCatalogEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MarketCatalogEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: MarketCatalog, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketCatalogConnection", returnType: "MarketCatalogConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MarketCatalog and a cursor during pagination.
 */
export type MarketCatalogEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MarketCatalogEdge.
 */
node: { baseType: MarketCatalog, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketCatalogEdge", returnType: "MarketCatalogEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Markets.
 */
export type MarketConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MarketEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MarketEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Market, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketConnection", returnType: "MarketConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketCreate` mutation.
 */
export type MarketCreatePayload = {
/**
 * The market object.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketCreatePayload", returnType: "MarketCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A market's currency settings.
 */
export type MarketCurrencySettings = {
/**
 * The currency which this market's prices are defined in, and the
 * currency which its customers must use if local currencies are disabled.
 */
baseCurrency: { baseType: CurrencySetting, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether or not local currencies are enabled. If enabled, then prices will
 * be converted to give each customer the best experience based on their
 * region. If disabled, then all customers in this market will see prices
 * in the market's base currency. For single country markets this will be true when
 * the market's base currency is the same as the default currency for the region.
 */
localCurrencies: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketCurrencySettings", returnType: "MarketCurrencySettings", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketCurrencySettingsUpdate` mutation.
 */
export type MarketCurrencySettingsUpdatePayload = {
/**
 * The market object.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketCurrencySettingsUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketCurrencySettingsUpdatePayload", returnType: "MarketCurrencySettingsUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed market multi-currency operations.
 */
export type MarketCurrencySettingsUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MarketCurrencySettingsUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketCurrencySettingsUserError", returnType: "MarketCurrencySettingsUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `marketDelete` mutation.
 */
export type MarketDeletePayload = {
/**
 * The ID of the deleted market.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketDeletePayload", returnType: "MarketDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Market and a cursor during pagination.
 */
export type MarketEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MarketEdge.
 */
node: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketEdge", returnType: "MarketEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The market localizable content of a resource's field.
 */
export type MarketLocalizableContent = {
/**
 * The hash digest representation of the content value.
 */
digest: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The resource field that's being localized.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The content value.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MarketLocalizableContent", returnType: "MarketLocalizableContent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A resource that has market localizable fields.
 */
export type MarketLocalizableResource = {
/**
 * The market localizable content.
 */
marketLocalizableContent: { baseType: MarketLocalizableContent, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Market localizations for the market localizable content.
 */
marketLocalizations: { baseType: MarketLocalization, arguments: { marketId: BaseTypes.ID }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The GID of the resource.
 */
resourceId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketLocalizableResource", returnType: "MarketLocalizableResource", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple MarketLocalizableResources.
 */
export type MarketLocalizableResourceConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MarketLocalizableResourceEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MarketLocalizableResourceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: MarketLocalizableResource, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketLocalizableResourceConnection", returnType: "MarketLocalizableResourceConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MarketLocalizableResource and a cursor during pagination.
 */
export type MarketLocalizableResourceEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MarketLocalizableResourceEdge.
 */
node: { baseType: MarketLocalizableResource, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketLocalizableResourceEdge", returnType: "MarketLocalizableResourceEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The market localization of a field within a resource, which is determined by the market ID.
 */
export type MarketLocalization = {
/**
 * A reference to the value being localized on the resource that this market localization belongs to.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The market that the localization is specific to.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the original content has changed since this market localization was updated.
 */
outdated: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the market localization was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The value of the market localization.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MarketLocalization", returnType: "MarketLocalization", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketLocalizationsRegister` mutation.
 */
export type MarketLocalizationsRegisterPayload = {
/**
 * The market localizations that were created or updated.
 */
marketLocalizations: { baseType: MarketLocalization, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: TranslationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketLocalizationsRegisterPayload", returnType: "MarketLocalizationsRegisterPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketLocalizationsRemove` mutation.
 */
export type MarketLocalizationsRemovePayload = {
/**
 * The market localizations that were deleted.
 */
marketLocalizations: { baseType: MarketLocalization, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: TranslationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketLocalizationsRemovePayload", returnType: "MarketLocalizationsRemovePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A geographic region which comprises a market.
 */
export type MarketRegion = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the region.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple MarketRegions.
 */
export type MarketRegionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MarketRegionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MarketRegionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { MarketRegionCountry: MarketRegionCountry }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketRegionConnection", returnType: "MarketRegionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A country which comprises a market.
 */
export type MarketRegionCountry = {
/**
 * The ISO code identifying the country.
 */
code: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The currency which this country uses given its market settings.
 */
currency: { baseType: CurrencySetting, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the region.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketRegionCountry", returnType: "MarketRegionCountry", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & MarketRegion & Node

/**
 * Return type for `marketRegionDelete` mutation.
 */
export type MarketRegionDeletePayload = {
/**
 * The ID of the deleted market region.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The parent market object of the deleted region.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketRegionDeletePayload", returnType: "MarketRegionDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MarketRegion and a cursor during pagination.
 */
export type MarketRegionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MarketRegionEdge.
 */
node: { members: { MarketRegionCountry: MarketRegionCountry }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketRegionEdge", returnType: "MarketRegionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketRegionsCreate` mutation.
 */
export type MarketRegionsCreatePayload = {
/**
 * The market object.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketRegionsCreatePayload", returnType: "MarketRegionsCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketRegionsDelete` mutation.
 */
export type MarketRegionsDeletePayload = {
/**
 * The ID of the deleted market region.
 */
deletedIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketRegionsDeletePayload", returnType: "MarketRegionsDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketUpdate` mutation.
 */
export type MarketUpdatePayload = {
/**
 * The market object.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketUpdatePayload", returnType: "MarketUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Defines errors encountered while managing a Market.
 */
export type MarketUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MarketUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketUserError", returnType: "MarketUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The market’s web presence, which defines its SEO strategy. This can be a different domain
 * (e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary
 * domain (e.g. `example.com/en-ca`). Each web presence comprises one or more language
 * variants. If a market does not have its own web presence, it is accessible on the shop’s
 * primary domain via [country
 * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
 *
 * Note: while the domain/subfolders defined by a market’s web presence are not applicable to
 * custom storefronts, which must manage their own domains and routing, the languages chosen
 * here do govern [the languages available on the Storefront
 * API](https://shopify.dev/custom-storefronts/internationalization/multiple-languages) for the countries in
 * this market.
 */
export type MarketWebPresence = {
/**
 * The ShopLocale object for the alternate locales. When a domain is used, these locales will be
 * available as language-specific subfolders. For example, if English is an
 * alternate locale, and `example.ca` is the market’s domain, then
 * `example.ca/en` will load in English.
 */
alternateLocales: { baseType: ShopLocale, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The ShopLocale object for the default locale. When a domain is used, this is the locale that will
 * be used when the domain root is accessed. For example, if French is the default locale,
 * and `example.ca` is the market’s domain, then `example.ca` will load in French.
 */
defaultLocale: { baseType: ShopLocale, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The web presence’s domain.
 * This field will be null if `subfolderSuffix` isn't null.
 */
domain: { baseType: Domain, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The associated market.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of root URLs for each of the web presence’s locales. As of version `2024-04` this value will no longer have a trailing slash.
 */
rootUrls: { baseType: MarketWebPresenceRootUrl, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The market-specific suffix of the subfolders defined by the web presence. Example: in `/en-us` the subfolder suffix is `us`. This field will be null if `domain` isn't null.
 */
subfolderSuffix: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MarketWebPresence", returnType: "MarketWebPresence", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple MarketWebPresences.
 */
export type MarketWebPresenceConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MarketWebPresenceEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MarketWebPresenceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: MarketWebPresence, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketWebPresenceConnection", returnType: "MarketWebPresenceConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketWebPresenceCreate` mutation.
 */
export type MarketWebPresenceCreatePayload = {
/**
 * The market object.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketWebPresenceCreatePayload", returnType: "MarketWebPresenceCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketWebPresenceDelete` mutation.
 */
export type MarketWebPresenceDeletePayload = {
/**
 * The ID of the deleted web presence.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The market for which the web presence was deleted.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketWebPresenceDeletePayload", returnType: "MarketWebPresenceDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MarketWebPresence and a cursor during pagination.
 */
export type MarketWebPresenceEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MarketWebPresenceEdge.
 */
node: { baseType: MarketWebPresence, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketWebPresenceEdge", returnType: "MarketWebPresenceEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The URL for the homepage of the online store in the context of a particular market and a
 * particular locale.
 */
export type MarketWebPresenceRootUrl = {
/**
 * The locale that the storefront loads in.
 */
locale: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketWebPresenceRootUrl", returnType: "MarketWebPresenceRootUrl", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketWebPresenceUpdate` mutation.
 */
export type MarketWebPresenceUpdatePayload = {
/**
 * The market object.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketWebPresenceUpdatePayload", returnType: "MarketWebPresenceUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketingActivitiesDeleteAllExternal` mutation.
 */
export type MarketingActivitiesDeleteAllExternalPayload = {
/**
 * The asynchronous job that performs the deletion. The status of the job may be used to determine when it's safe again to create new activities.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketingActivityUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketingActivitiesDeleteAllExternalPayload", returnType: "MarketingActivitiesDeleteAllExternalPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The marketing activity resource represents marketing that a
 * merchant created through an app.
 */
export type MarketingActivity = {
/**
 * The URL of the marketing activity listing page in the marketing section.
 */
activityListUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The amount spent on the marketing activity.
 */
adSpend: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The app which created this marketing activity.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The errors generated when an app publishes the marketing activity.
 */
appErrors: { baseType: MarketingActivityExtensionAppErrors, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The allocated budget for the marketing activity.
 */
budget: { baseType: MarketingBudget, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the marketing activity was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The completed content in the marketing activity creation form.
 */
formData: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The hierarchy level of the marketing activity.
 */
hierarchyLevel: { baseType: BaseTypes.MarketingActivityHierarchyLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the marketing activity is in the main workflow version of the marketing automation.
 */
inMainWorkflowVersion: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The marketing activity represents an external marketing activity.
 */
isExternal: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
 */
marketingChannel: { baseType: BaseTypes.MarketingChannel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
 */
marketingChannelType: { baseType: BaseTypes.MarketingChannel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Associated marketing event of this marketing activity.
 */
marketingEvent: { baseType: MarketingEvent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * ID of the parent activity of this marketing activity.
 */
parentActivityId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * ID of the parent activity of this marketing activity.
 */
parentRemoteId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A contextual description of the marketing activity based on the platform and tactic used.
 */
sourceAndMedium: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The current state of the marketing activity.
 */
status: { baseType: BaseTypes.MarketingActivityStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The severity of the marketing activity's status.
 */
statusBadgeType: { baseType: BaseTypes.MarketingActivityStatusBadgeType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The severity of the marketing activity's status.
 */
statusBadgeTypeV2: { baseType: BaseTypes.BadgeType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The rendered status of the marketing activity.
 */
statusLabel: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [date and time](
 * https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
 * ) when the activity's status last changed.
 */
statusTransitionedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The method of marketing used for this marketing activity.
 */
tactic: { baseType: BaseTypes.MarketingTactic, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status to which the marketing activity is currently transitioning.
 */
targetStatus: { baseType: BaseTypes.MarketingActivityStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The marketing activity's title, which is rendered on the marketing listing page.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the marketing activity was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value portion of the URL query parameter used in attributing sessions to this activity.
 */
urlParameterValue: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The set of [Urchin Tracking Module](
 * https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
 * ) used in the URL for tracking this marketing activity.
 */
utmParameters: { baseType: UTMParameters, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MarketingActivity", returnType: "MarketingActivity", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple MarketingActivities.
 */
export type MarketingActivityConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MarketingActivityEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MarketingActivityEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: MarketingActivity, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketingActivityConnection", returnType: "MarketingActivityConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketingActivityCreateExternal` mutation.
 */
export type MarketingActivityCreateExternalPayload = {
/**
 * The external marketing activity that was created.
 */
marketingActivity: { baseType: MarketingActivity, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketingActivityUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketingActivityCreateExternalPayload", returnType: "MarketingActivityCreateExternalPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketingActivityCreate` mutation.
 */
export type MarketingActivityCreatePayload = {
/**
 * The created marketing activity.
 */
marketingActivity: { baseType: MarketingActivity, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to return back to shopify admin from embedded editor.
 */
redirectPath: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketingActivityCreatePayload", returnType: "MarketingActivityCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketingActivityDeleteExternal` mutation.
 */
export type MarketingActivityDeleteExternalPayload = {
/**
 * The ID of the marketing activity that was deleted, if one was deleted.
 */
deletedMarketingActivityId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketingActivityUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketingActivityDeleteExternalPayload", returnType: "MarketingActivityDeleteExternalPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MarketingActivity and a cursor during pagination.
 */
export type MarketingActivityEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MarketingActivityEdge.
 */
node: { baseType: MarketingActivity, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketingActivityEdge", returnType: "MarketingActivityEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents errors returned from apps when using the marketing activity extension.
 */
export type MarketingActivityExtensionAppErrors = {
/**
 * The app error type.
 */
code: { baseType: BaseTypes.MarketingActivityExtensionAppErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors returned by the app.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketingActivityExtensionAppErrors", returnType: "MarketingActivityExtensionAppErrors", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketingActivityUpdateExternal` mutation.
 */
export type MarketingActivityUpdateExternalPayload = {
/**
 * The updated marketing activity.
 */
marketingActivity: { baseType: MarketingActivity, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketingActivityUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketingActivityUpdateExternalPayload", returnType: "MarketingActivityUpdateExternalPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketingActivityUpdate` mutation.
 */
export type MarketingActivityUpdatePayload = {
/**
 * The updated marketing activity.
 */
marketingActivity: { baseType: MarketingActivity, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The redirect path from the embedded editor to the Shopify admin.
 */
redirectPath: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketingActivityUpdatePayload", returnType: "MarketingActivityUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketingActivityUpsertExternal` mutation.
 */
export type MarketingActivityUpsertExternalPayload = {
/**
 * The external marketing activity that was created or updated.
 */
marketingActivity: { baseType: MarketingActivity, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketingActivityUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketingActivityUpsertExternalPayload", returnType: "MarketingActivityUpsertExternalPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of marketing activity and engagement mutations.
 */
export type MarketingActivityUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MarketingActivityUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketingActivityUserError", returnType: "MarketingActivityUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * This type combines budget amount and its marketing budget type.
 */
export type MarketingBudget = {
/**
 * The budget type for a marketing activity.
 */
budgetType: { baseType: BaseTypes.MarketingBudgetBudgetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of budget for marketing activity.
 */
total: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketingBudget", returnType: "MarketingBudget", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Marketing engagement represents customer activity taken on a marketing activity or a marketing channel.
 */
export type MarketingEngagement = {
/**
 * The total ad spend for the marketing content. Recurring weekly, monthly, or yearly spend needs to be divided into daily amounts.
 */
adSpend: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The unique string identifier of the channel to which the engagement metrics are being provided. This should be set when and only when providing channel-level engagements. This should be nil when providing activity-level engagements. For the correct handle for your channel, contact your partner manager.
 */
channelHandle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of interactions, such as a button press or a screen touch, that occurred on the marketing content.
 */
clicksCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of comments on the marketing content.
 */
commentsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of complaints on the marketing content. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were marked as spam. For social media platforms, this represents the number of dislikes or the number of times marketing content was reported.
 */
complaintsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of fails for the marketing content. For message-based platforms such as email or SMS, this represents the number of bounced marketing emails or messages.
 */
failsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of favorites, likes, saves, or bookmarks on the marketing content.
 */
favoritesCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of customers that have placed their first order. Doesn't include adjustments such as edits, exchanges, or returns.
 */
firstTimeCustomers: { baseType: BaseTypes.Decimal, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of times marketing content was displayed to users, whether or not an interaction occurred. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were delivered.
 */
impressionsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Specifies how the provided metrics have been aggregated. Cumulative metrics are aggregated from the first day of reporting up to and including `occuredOn`. Non-cumulative metrics are aggregated over the single day indicated in `occuredOn`. Cumulative metrics will monotonically increase in time as each record includes the previous day's values, and so on. Non-cumulative is strongly preferred, and support for cumulative metrics may be deprecated in the future.
 */
isCumulative: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The marketing activity object related to this engagement. This corresponds to the marketingActivityId passed in on creation of the engagement.
 */
marketingActivity: { baseType: MarketingActivity, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The calendar date (in the time zone offset specified by the utcOffset field) for which the metrics are being reported. For example, a shop in UTC-5 would set utcOffset="-05:00" and aggregate all engagements from 05:00:00Z up to 29:00:00Z (5am UTC next day) for each call.
 */
occurredOn: { baseType: BaseTypes.Date, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of orders generated from the marketing content.
 */
orders: { baseType: BaseTypes.Decimal, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of returning customers that have placed an order. Doesn't include adjustments such as edits, exchanges, or returns.
 */
returningCustomers: { baseType: BaseTypes.Decimal, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The amount of sales generated from the marketing content.
 */
sales: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of marketing emails or messages that were sent.
 */
sendsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of online store sessions generated from the marketing content.
 */
sessionsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of times marketing content was distributed or reposted to either one's own network of followers through a social media platform or other digital channels. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were forwarded.
 */
sharesCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of unique clicks on the marketing content.
 */
uniqueClicksCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of all users who saw marketing content since it was published. For  message-based platforms such as email or SMS, this represents the number of unique users that opened a  marketing email or message. For video-based content, this represents the number of unique users that  played video content.
 */
uniqueViewsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of unsubscribes on the marketing content. For social media platforms, this represents the number of unfollows.
 */
unsubscribesCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The UTC offset for the time zone in which the metrics are being reported, in the format `"+HH:MM"` or `"-HH:MM"`. Used in combination with occurredOn when aggregating daily metrics. Must match the account settings for the shop to minimize eventual discrepancies in reporting.
 */
utcOffset: { baseType: BaseTypes.UtcOffset, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of views on the marketing content. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were opened. For video-based content, this represents the number of times videos were played.
 */
viewsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MarketingEngagement", returnType: "MarketingEngagement", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketingEngagementCreate` mutation.
 */
export type MarketingEngagementCreatePayload = {
/**
 * The marketing engagement that was created. This represents customer activity taken on a marketing activity or a marketing channel.
 */
marketingEngagement: { baseType: MarketingEngagement, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketingActivityUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketingEngagementCreatePayload", returnType: "MarketingEngagementCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `marketingEngagementsDelete` mutation.
 */
export type MarketingEngagementsDeletePayload = {
/**
 * Informational message about the engagement data that has been marked for deletion.
 */
result: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MarketingActivityUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MarketingEngagementsDeletePayload", returnType: "MarketingEngagementsDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents actions that market a merchant's store or products.
 */
export type MarketingEvent = {
/**
 * The app that the marketing event is attributed to.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
 */
channel: { baseType: BaseTypes.MarketingChannel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The unique string identifier of the channel to which this activity belongs. For the correct handle for your channel, contact your partner manager.
 */
channelHandle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A human-readable description of the marketing event.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the marketing event ended.
 */
endedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL where the marketing event can be managed.
 */
manageUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
 */
marketingChannelType: { baseType: BaseTypes.MarketingChannel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL where the marketing event can be previewed.
 */
previewUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * An optional ID that helps Shopify validate engagement data.
 */
remoteId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the marketing event is scheduled to end.
 */
scheduledToEndAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Where the `MarketingEvent` occurred and what kind of content was used.
 * Because `utmSource` and `utmMedium` are often used interchangeably, this is
 * based on a combination of `marketingChannel`, `referringDomain`, and `type` to
 * provide a consistent representation for any given piece of marketing
 * regardless of the app that created it.
 */
sourceAndMedium: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the marketing event started.
 */
startedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The display text for the marketing event type.
 */
targetTypeDisplayText: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The marketing event type.
 */
type: { baseType: BaseTypes.MarketingTactic, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the marketing campaign.
 */
utmCampaign: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
 */
utmMedium: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The referrer of the marketing event. Example values: `google`, `newsletter`.
 */
utmSource: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MarketingEvent", returnType: "MarketingEvent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & LegacyInteroperability & Node

/**
 * An auto-generated type for paginating through multiple MarketingEvents.
 */
export type MarketingEventConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MarketingEventEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MarketingEventEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: MarketingEvent, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketingEventConnection", returnType: "MarketingEventConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MarketingEvent and a cursor during pagination.
 */
export type MarketingEventEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MarketingEventEdge.
 */
node: { baseType: MarketingEvent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MarketingEventEdge", returnType: "MarketingEventEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a media interface.
 */
export type Media = {
/**
 * A word or phrase to share the nature or contents of a media.
 */
alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The media content type.
 */
mediaContentType: { baseType: BaseTypes.MediaContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Any errors which have occurred on the media.
 */
mediaErrors: { baseType: MediaError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The warnings attached to the media.
 */
mediaWarnings: { baseType: MediaWarning, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The preview image for the media.
 */
preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Current status of the media.
 */
status: { baseType: BaseTypes.MediaStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Media.
 */
export type MediaConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MediaEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MediaEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { ExternalVideo: ExternalVideo; MediaImage: MediaImage; Model3d: Model3d; Video: Video }, fields: { alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; mediaContentType: { baseType: BaseTypes.MediaContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; mediaErrors: { baseType: MediaError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; mediaWarnings: { baseType: MediaWarning, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.MediaStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MediaConnection", returnType: "MediaConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Media and a cursor during pagination.
 */
export type MediaEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MediaEdge.
 */
node: { members: { ExternalVideo: ExternalVideo; MediaImage: MediaImage; Model3d: Model3d; Video: Video }, fields: { alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; mediaContentType: { baseType: BaseTypes.MediaContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; mediaErrors: { baseType: MediaError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; mediaWarnings: { baseType: MediaWarning, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.MediaStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MediaEdge", returnType: "MediaEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.
 * Check the media before attempting to upload again.
 */
export type MediaError = {
/**
 * Code representing the type of error.
 */
code: { baseType: BaseTypes.MediaErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Additional details regarding the error.
 */
details: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Translated error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MediaError", returnType: "MediaError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An image hosted on Shopify.
 */
export type MediaImage = {
/**
 * A word or phrase to share the nature or contents of a media.
 */
alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Any errors that have occurred on the file.
 */
fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The status of the file.
 */
fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The image for the media. Returns `null` until `status` is `READY`.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The media content type.
 */
mediaContentType: { baseType: BaseTypes.MediaContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Any errors which have occurred on the media.
 */
mediaErrors: { baseType: MediaError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The warnings attached to the media.
 */
mediaWarnings: { baseType: MediaWarning, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The MIME type of the image.
 */
mimeType: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The original source of the image.
 */
originalSource: { baseType: MediaImageOriginalSource, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The preview image for the media.
 */
preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Current status of the media.
 */
status: { baseType: BaseTypes.MediaStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MediaImage", returnType: "MediaImage", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & File & HasMetafields & Media & Node

/**
 * The original source for an image.
 */
export type MediaImageOriginalSource = {
/**
 * The size of the original file in bytes.
 */
fileSize: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL of the original image, valid only for a short period.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MediaImageOriginalSource", returnType: "MediaImageOriginalSource", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the preview image for a media.
 */
export type MediaPreviewImage = {
/**
 * The preview image for the media. Returns `null` until `status` is `READY`.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Current status of the preview image.
 */
status: { baseType: BaseTypes.MediaPreviewImageStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MediaPreviewImage", returnType: "MediaPreviewImage", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an error that happens during execution of a Media query or mutation.
 */
export type MediaUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MediaUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MediaUserError", returnType: "MediaUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a media warning. This occurs when there is a non-blocking concern regarding your media.
 * Consider reviewing your media to ensure it is correct and its parameters are as expected.
 */
export type MediaWarning = {
/**
 * The code representing the type of warning.
 */
code: { baseType: BaseTypes.MediaWarningCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Translated warning message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MediaWarning", returnType: "MediaWarning", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A menu for display on the storefront.
 */
export type Menu = {
/**
 * The menu's handle.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the menu is a default. The handle for default menus can't be updated and default menus can't be deleted.
 */
isDefault: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of items on the menu sorted by position.
 */
items: { baseType: MenuItem, arguments: { limit?: BaseTypes.Int | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The menu's title.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "Menu", returnType: "Menu", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasPublishedTranslations & Node

/**
 * An auto-generated type for paginating through multiple Menus.
 */
export type MenuConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MenuEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MenuEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Menu, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MenuConnection", returnType: "MenuConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `menuCreate` mutation.
 */
export type MenuCreatePayload = {
/**
 * The created menu.
 */
menu: { baseType: Menu, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MenuCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MenuCreatePayload", returnType: "MenuCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `MenuCreate`.
 */
export type MenuCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MenuCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MenuCreateUserError", returnType: "MenuCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `menuDelete` mutation.
 */
export type MenuDeletePayload = {
/**
 * The ID of the deleted menu.
 */
deletedMenuId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MenuDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MenuDeletePayload", returnType: "MenuDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `MenuDelete`.
 */
export type MenuDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MenuDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MenuDeleteUserError", returnType: "MenuDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An auto-generated type which holds one Menu and a cursor during pagination.
 */
export type MenuEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MenuEdge.
 */
node: { baseType: Menu, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MenuEdge", returnType: "MenuEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A menu item for display on the storefront.
 */
export type MenuItem = {
/**
 * A globally-unique ID of the navigation menu item.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the menu items nested under this item sorted by position.
 */
items: { baseType: MenuItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The ID of the resource to link to.
 */
resourceId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The menu item's tags to filter a collection.
 */
tags: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The menu item's title.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The menu item's type.
 */
type: { baseType: BaseTypes.MenuItemType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The menu item's url.
 */
url: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MenuItem", returnType: "MenuItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `menuUpdate` mutation.
 */
export type MenuUpdatePayload = {
/**
 * The updated menu.
 */
menu: { baseType: Menu, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MenuUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MenuUpdatePayload", returnType: "MenuUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `MenuUpdate`.
 */
export type MenuUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MenuUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MenuUpdateUserError", returnType: "MenuUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Merchant approval for accelerated onboarding to channel integration apps.
 */
export type MerchantApprovalSignals = {
/**
 * Whether the shop's Shopify Payments account identity is verified. Returns `false` if the identity is unverified or if the shop doesn't have a Shopify Payments account.
 */
identityVerified: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether Shopify has pre-verified the merchant's business for onboarding to channel integration apps. Returns `false` if the shop isn't marked for verification.
 */
verifiedByShopify: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Which tier of the Shopify verification was determined for the merchant's business for onboarding to channel integration apps.
 */
verifiedByShopifyTier: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MerchantApprovalSignals", returnType: "MerchantApprovalSignals", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
 * For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
 * Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
 * Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
 */
export type Metafield = {
/**
 * The data stored in the resource, represented as a digest.
 */
compareDigest: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the metafield was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The metafield definition that the metafield belongs to, if any.
 */
definition: { baseType: MetafieldDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The description of the metafield.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The data stored in the metafield in JSON format.
 */
jsonValue: { baseType: BaseTypes.JSON, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique identifier for the metafield within its namespace.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The container for a group of metafields that the metafield is associated with.
 */
namespace: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The resource that the metafield is attached to.
 */
owner: { members: { AppInstallation: AppInstallation; CartTransform: CartTransform; Collection: Collection; Company: Company; CompanyLocation: CompanyLocation; Customer: Customer; CustomerSegmentMember: CustomerSegmentMember; DeliveryCustomization: DeliveryCustomization; DiscountAutomaticNode: DiscountAutomaticNode; DiscountCodeNode: DiscountCodeNode; DiscountNode: DiscountNode; DraftOrder: DraftOrder; FulfillmentConstraintRule: FulfillmentConstraintRule; Image: Image; Location: Location; Market: Market; MediaImage: MediaImage; OnlineStoreArticle: OnlineStoreArticle; OnlineStoreBlog: OnlineStoreBlog; OnlineStorePage: OnlineStorePage; Order: Order; PaymentCustomization: PaymentCustomization; Product: Product; ProductVariant: ProductVariant; SellingPlan: SellingPlan; Shop: Shop; Validation: Validation }, fields: { metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }; metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }; privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of resource that the metafield is attached to.
 */
ownerType: { baseType: BaseTypes.MetafieldOwnerType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a reference object if the metafield definition's type is a resource reference.
 */
reference: { members: { Collection: Collection; Company: Company; Customer: Customer; GenericFile: GenericFile; MediaImage: MediaImage; Metaobject: Metaobject; Model3d: Model3d; OnlineStorePage: OnlineStorePage; Order: Order; Product: Product; ProductVariant: ProductVariant; TaxonomyValue: TaxonomyValue; Video: Video }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of reference objects if the metafield's type is a resource reference list.
 */
references: { baseType: MetafieldReferenceConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The type of data that is stored in the metafield.
 * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
 */
type: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the metafield was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Metafield", returnType: "Metafield", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasCompareDigest & LegacyInteroperability & Node

/**
 * Access permissions for the definition's metafields.
 */
export type MetafieldAccess = {
/**
 * The access permitted on the Admin API.
 */
admin: { baseType: BaseTypes.MetafieldAdminAccess, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The access permitted on the Customer Account API.
 */
customerAccount: { baseType: BaseTypes.MetafieldCustomerAccountAccess, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The explicit grants for this metafield definition, superseding the default admin access
 * for the specified grantees.
 */
grants: { baseType: MetafieldAccessGrant, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The access permitted on the Storefront API.
 */
storefront: { baseType: BaseTypes.MetafieldStorefrontAccess, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MetafieldAccess", returnType: "MetafieldAccess", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An explicit access grant for the metafields under this definition.
 *
 * Explicit grants are [deprecated](https://shopify.dev/changelog/deprecating-explicit-access-grants-for-app-owned-metafields).
 */
export type MetafieldAccessGrant = {
/**
 * The level of access the grantee has.
 */
access: { baseType: BaseTypes.MetafieldGrantAccessLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The grantee being granted access.
 */
grantee: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldAccessGrant", returnType: "MetafieldAccessGrant", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Metafields.
 */
export type MetafieldConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MetafieldEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MetafieldEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Metafield, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldConnection", returnType: "MetafieldConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Metafield definitions enable you to define additional validation constraints for metafields, and enable the
 * merchant to edit metafield values in context.
 */
export type MetafieldDefinition = {
/**
 * The access settings associated with the metafield definition.
 */
access: { baseType: MetafieldAccess, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [constraints](https://shopify.dev/apps/build/custom-data/metafields/conditional-metafield-definitions)
 * that determine what subtypes of resources a metafield definition applies to.
 */
constraints: { baseType: MetafieldDefinitionConstraints, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The description of the metafield definition.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique identifier for the metafield definition within its namespace.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The metafields that belong to the metafield definition.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; validationStatus?: BaseTypes.MetafieldValidationStatus | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The count of the metafields that belong to the metafield definition.
 */
metafieldsCount: { baseType: BaseTypes.Int, arguments: { validationStatus?: BaseTypes.MetafieldValidationStatus | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The human-readable name of the metafield definition.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The container for a group of metafields that the metafield definition is associated with.
 */
namespace: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The resource type that the metafield definition is attached to.
 */
ownerType: { baseType: BaseTypes.MetafieldOwnerType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The position of the metafield definition in the pinned list.
 */
pinnedPosition: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The standard metafield definition template associated with the metafield definition.
 */
standardTemplate: { baseType: StandardMetafieldDefinitionTemplate, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The type of data that each of the metafields that belong to the metafield definition will store.
 * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
 */
type: { baseType: MetafieldDefinitionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the metafield definition can be used as a collection condition.
 */
useAsCollectionCondition: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The validation status for the metafields that belong to the metafield definition.
 */
validationStatus: { baseType: BaseTypes.MetafieldDefinitionValidationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
 * the metafields that belong to the metafield definition. For example, for a metafield definition with the
 * type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
 * store dates after the specified minimum.
 */
validations: { baseType: MetafieldDefinitionValidation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether each of the metafields that belong to the metafield definition are visible from the Storefront API.
 */
visibleToStorefrontApi: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinition", returnType: "MetafieldDefinition", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple MetafieldDefinitions.
 */
export type MetafieldDefinitionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MetafieldDefinitionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MetafieldDefinitionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: MetafieldDefinition, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionConnection", returnType: "MetafieldDefinitionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A constraint subtype value that the metafield definition applies to.
 */
export type MetafieldDefinitionConstraintValue = {
/**
 * The subtype value of the constraint.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionConstraintValue", returnType: "MetafieldDefinitionConstraintValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple MetafieldDefinitionConstraintValues.
 */
export type MetafieldDefinitionConstraintValueConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MetafieldDefinitionConstraintValueEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MetafieldDefinitionConstraintValueEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: MetafieldDefinitionConstraintValue, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionConstraintValueConnection", returnType: "MetafieldDefinitionConstraintValueConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MetafieldDefinitionConstraintValue and a cursor during pagination.
 */
export type MetafieldDefinitionConstraintValueEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MetafieldDefinitionConstraintValueEdge.
 */
node: { baseType: MetafieldDefinitionConstraintValue, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionConstraintValueEdge", returnType: "MetafieldDefinitionConstraintValueEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The [constraints](https://shopify.dev/apps/build/custom-data/metafields/conditional-metafield-definitions)
 * that determine what subtypes of resources a metafield definition applies to.
 */
export type MetafieldDefinitionConstraints = {
/**
 * The category of resource subtypes that the definition applies to.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The specific constraint subtype values that the definition applies to.
 */
values: { baseType: MetafieldDefinitionConstraintValueConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionConstraints", returnType: "MetafieldDefinitionConstraints", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metafieldDefinitionCreate` mutation.
 */
export type MetafieldDefinitionCreatePayload = {
/**
 * The metafield definition that was created.
 */
createdDefinition: { baseType: MetafieldDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetafieldDefinitionCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetafieldDefinitionCreatePayload", returnType: "MetafieldDefinitionCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `MetafieldDefinitionCreate`.
 */
export type MetafieldDefinitionCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MetafieldDefinitionCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The index of the array element that's causing the error.
 */
elementIndex: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionCreateUserError", returnType: "MetafieldDefinitionCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `metafieldDefinitionDelete` mutation.
 */
export type MetafieldDefinitionDeletePayload = {
/**
 * The ID of the deleted metafield definition.
 */
deletedDefinitionId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetafieldDefinitionDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetafieldDefinitionDeletePayload", returnType: "MetafieldDefinitionDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `MetafieldDefinitionDelete`.
 */
export type MetafieldDefinitionDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MetafieldDefinitionDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionDeleteUserError", returnType: "MetafieldDefinitionDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.
 */
export type MetafieldDefinitionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MetafieldDefinitionEdge.
 */
node: { baseType: MetafieldDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionEdge", returnType: "MetafieldDefinitionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metafieldDefinitionPin` mutation.
 */
export type MetafieldDefinitionPinPayload = {
/**
 * The metafield definition that was pinned.
 */
pinnedDefinition: { baseType: MetafieldDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetafieldDefinitionPinUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetafieldDefinitionPinPayload", returnType: "MetafieldDefinitionPinPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `MetafieldDefinitionPin`.
 */
export type MetafieldDefinitionPinUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MetafieldDefinitionPinUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionPinUserError", returnType: "MetafieldDefinitionPinUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The type and name for the optional validation configuration of a metafield.
 *
 * For example, a supported validation might consist of a `max` name and a `number_integer` type.
 * This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
 */
export type MetafieldDefinitionSupportedValidation = {
/**
 * The name of the metafield definition validation.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of input for the validation.
 */
type: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionSupportedValidation", returnType: "MetafieldDefinitionSupportedValidation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A metafield definition type provides basic foundation and validation for a metafield.
 */
export type MetafieldDefinitionType = {
/**
 * The category associated with the metafield definition type.
 */
category: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the type for the metafield definition.
 * See the list of [supported types](https://shopify.dev/apps/metafields/types).
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The supported validations for a metafield definition type.
 */
supportedValidations: { baseType: MetafieldDefinitionSupportedValidation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether metafields without a definition can be migrated to a definition of this type.
 */
supportsDefinitionMigrations: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value type for a metafield created with this definition type.
 */
valueType: { baseType: BaseTypes.MetafieldValueType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionType", returnType: "MetafieldDefinitionType", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metafieldDefinitionUnpin` mutation.
 */
export type MetafieldDefinitionUnpinPayload = {
/**
 * The metafield definition that was unpinned.
 */
unpinnedDefinition: { baseType: MetafieldDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetafieldDefinitionUnpinUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetafieldDefinitionUnpinPayload", returnType: "MetafieldDefinitionUnpinPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `MetafieldDefinitionUnpin`.
 */
export type MetafieldDefinitionUnpinUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MetafieldDefinitionUnpinUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionUnpinUserError", returnType: "MetafieldDefinitionUnpinUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `metafieldDefinitionUpdate` mutation.
 */
export type MetafieldDefinitionUpdatePayload = {
/**
 * The metafield definition that was updated.
 */
updatedDefinition: { baseType: MetafieldDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetafieldDefinitionUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The asynchronous job updating the metafield definition's validation_status.
 */
validationJob: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MetafieldDefinitionUpdatePayload", returnType: "MetafieldDefinitionUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `MetafieldDefinitionUpdate`.
 */
export type MetafieldDefinitionUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MetafieldDefinitionUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The index of the array element that's causing the error.
 */
elementIndex: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldDefinitionUpdateUserError", returnType: "MetafieldDefinitionUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A configured metafield definition validation.
 *
 * For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
 * and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.
 *
 * Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
 */
export type MetafieldDefinitionValidation = {
/**
 * The validation name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name for the metafield type of this validation.
 */
type: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The validation value.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MetafieldDefinitionValidation", returnType: "MetafieldDefinitionValidation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metafieldDelete` mutation.
 */
export type MetafieldDeletePayload = {
/**
 * The ID of the deleted metafield.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetafieldDeletePayload", returnType: "MetafieldDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Metafield and a cursor during pagination.
 */
export type MetafieldEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MetafieldEdge.
 */
node: { baseType: Metafield, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldEdge", returnType: "MetafieldEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Identifies a metafield by its owner resource, namespace, and key.
 */
export type MetafieldIdentifier = {
/**
 * The key of the metafield.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The namespace of the metafield.
 */
namespace: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * GID of the owner resource that the metafield belongs to.
 */
ownerId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldIdentifier", returnType: "MetafieldIdentifier", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The resource referenced by the metafield value.
 */
export type MetafieldReference = Collection | Company | Customer | GenericFile | MediaImage | Metaobject | Model3d | OnlineStorePage | Order | Product | ProductVariant | TaxonomyValue | Video

/**
 * An auto-generated type for paginating through multiple MetafieldReferences.
 */
export type MetafieldReferenceConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MetafieldReferenceEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MetafieldReferenceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { Collection: Collection; Company: Company; Customer: Customer; GenericFile: GenericFile; MediaImage: MediaImage; Metaobject: Metaobject; Model3d: Model3d; OnlineStorePage: OnlineStorePage; Order: Order; Product: Product; ProductVariant: ProductVariant; TaxonomyValue: TaxonomyValue; Video: Video }, arguments: never, isArray: true, itemsAreNullable: true, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldReferenceConnection", returnType: "MetafieldReferenceConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MetafieldReference and a cursor during pagination.
 */
export type MetafieldReferenceEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MetafieldReferenceEdge.
 */
node: { members: { Collection: Collection; Company: Company; Customer: Customer; GenericFile: GenericFile; MediaImage: MediaImage; Metaobject: Metaobject; Model3d: Model3d; OnlineStorePage: OnlineStorePage; Order: Order; Product: Product; ProductVariant: ProductVariant; TaxonomyValue: TaxonomyValue; Video: Video }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MetafieldReferenceEdge", returnType: "MetafieldReferenceEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Types of resources that may use metafields to reference other resources.
 */
export type MetafieldReferencer = AppInstallation | Collection | Company | CompanyLocation | Customer | DeliveryCustomization | DiscountAutomaticNode | DiscountCodeNode | DiscountNode | DraftOrder | FulfillmentOrder | Location | Market | Metaobject | OnlineStoreArticle | OnlineStoreBlog | OnlineStorePage | Order | PaymentCustomization | Product | ProductVariant | Shop

/**
 * Defines a relation between two resources via a reference metafield.
 * The referencer owns the joining field with a given namespace and key,
 * while the target is referenced by the field.
 */
export type MetafieldRelation = {
/**
 * The key of the field making the reference.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the field making the reference.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The namespace of the metafield making the reference, or type of the metaobject.
 */
namespace: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The resource making the reference.
 */
referencer: { members: { AppInstallation: AppInstallation; Collection: Collection; Company: Company; CompanyLocation: CompanyLocation; Customer: Customer; DeliveryCustomization: DeliveryCustomization; DiscountAutomaticNode: DiscountAutomaticNode; DiscountCodeNode: DiscountCodeNode; DiscountNode: DiscountNode; DraftOrder: DraftOrder; FulfillmentOrder: FulfillmentOrder; Location: Location; Market: Market; Metaobject: Metaobject; OnlineStoreArticle: OnlineStoreArticle; OnlineStoreBlog: OnlineStoreBlog; OnlineStorePage: OnlineStorePage; Order: Order; PaymentCustomization: PaymentCustomization; Product: Product; ProductVariant: ProductVariant; Shop: Shop }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The referenced resource.
 */
target: { members: { Collection: Collection; Company: Company; Customer: Customer; GenericFile: GenericFile; MediaImage: MediaImage; Metaobject: Metaobject; Model3d: Model3d; OnlineStorePage: OnlineStorePage; Order: Order; Product: Product; ProductVariant: ProductVariant; TaxonomyValue: TaxonomyValue; Video: Video }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldRelation", returnType: "MetafieldRelation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple MetafieldRelations.
 */
export type MetafieldRelationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MetafieldRelationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MetafieldRelationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: MetafieldRelation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldRelationConnection", returnType: "MetafieldRelationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MetafieldRelation and a cursor during pagination.
 */
export type MetafieldRelationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MetafieldRelationEdge.
 */
node: { baseType: MetafieldRelation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldRelationEdge", returnType: "MetafieldRelationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * By default, the Storefront API can't read metafields. To make specific metafields visible in the Storefront API,
 * you need to create a `MetafieldStorefrontVisibility` record. A `MetafieldStorefrontVisibility` record is a list
 * of the metafields, defined by the `owner_type`, `namespace`, and `key`, to make visible in the Storefront API.
 *
 * Learn about [exposing metafields in the Storefront API]
 * (https://shopify.dev/custom-storefronts/products-collections/metafields)
 * for more details.
 */
export type MetafieldStorefrontVisibility = {
/**
 * The date and time when the metafield was set to visible in the Storefront API.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The key of a metafield to make visible in the Storefront API.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The namespace of a metafield to make visible in the Storefront API.
 */
namespace: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The owner type of a metafield to make visible in the Storefront API.
 */
ownerType: { baseType: BaseTypes.MetafieldOwnerType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the `MetafieldStorefrontVisilibty` record was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldStorefrontVisibility", returnType: "MetafieldStorefrontVisibility", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & LegacyInteroperability & Node

/**
 * An auto-generated type for paginating through multiple MetafieldStorefrontVisibilities.
 */
export type MetafieldStorefrontVisibilityConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MetafieldStorefrontVisibilityEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MetafieldStorefrontVisibilityEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: MetafieldStorefrontVisibility, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldStorefrontVisibilityConnection", returnType: "MetafieldStorefrontVisibilityConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metafieldStorefrontVisibilityCreate` mutation.
 */
export type MetafieldStorefrontVisibilityCreatePayload = {
/**
 * The `MetafieldStorefrontVisibility` that was created.
 */
metafieldStorefrontVisibility: { baseType: MetafieldStorefrontVisibility, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetafieldStorefrontVisibilityCreatePayload", returnType: "MetafieldStorefrontVisibilityCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metafieldStorefrontVisibilityDelete` mutation.
 */
export type MetafieldStorefrontVisibilityDeletePayload = {
/**
 * The ID of the deleted `MetafieldStorefrontVisibility` record.
 */
deletedMetafieldStorefrontVisibilityId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetafieldStorefrontVisibilityDeletePayload", returnType: "MetafieldStorefrontVisibilityDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MetafieldStorefrontVisibility and a cursor during pagination.
 */
export type MetafieldStorefrontVisibilityEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MetafieldStorefrontVisibilityEdge.
 */
node: { baseType: MetafieldStorefrontVisibility, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldStorefrontVisibilityEdge", returnType: "MetafieldStorefrontVisibilityEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metafieldsDelete` mutation.
 */
export type MetafieldsDeletePayload = {
/**
 * List of metafield identifiers that were deleted, null if the corresponding metafield isn't found.
 */
deletedMetafields: { baseType: MetafieldIdentifier, arguments: never, isArray: true, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetafieldsDeletePayload", returnType: "MetafieldsDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metafieldsSet` mutation.
 */
export type MetafieldsSetPayload = {
/**
 * The list of metafields that were set.
 */
metafields: { baseType: Metafield, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetafieldsSetUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetafieldsSetPayload", returnType: "MetafieldsSetPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `MetafieldsSet`.
 */
export type MetafieldsSetUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MetafieldsSetUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The index of the array element that's causing the error.
 */
elementIndex: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetafieldsSetUserError", returnType: "MetafieldsSetUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Provides an object instance represented by a MetaobjectDefinition.
 */
export type Metaobject = {
/**
 * Metaobject capabilities for this Metaobject.
 */
capabilities: { baseType: MetaobjectCapabilityData, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The app used to create the object.
 */
createdBy: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The app used to create the object.
 */
createdByApp: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member who created the metaobject.
 */
createdByStaff: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The MetaobjectDefinition that models this object type.
 */
definition: { baseType: MetaobjectDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The preferred display name field value of the metaobject.
 */
displayName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The field for an object key, or null if the key has no field definition.
 */
field: { baseType: MetaobjectField, arguments: { key: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All ordered fields of the metaobject with their definitions and values.
 */
fields: { baseType: MetaobjectField, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The unique handle of the object, useful as a custom ID.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of back references metafields that belong to the resource.
 */
referencedBy: { baseType: MetafieldRelationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member who created the metaobject.
 */
staffMember: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The recommended field to visually represent this metaobject. May be a file reference or color         field.
 */
thumbnailField: { baseType: MetaobjectField, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The type of the metaobject.
 */
type: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * When the object was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Metaobject", returnType: "Metaobject", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Access permissions for the definition's metaobjects.
 */
export type MetaobjectAccess = {
/**
 * The access permitted on the Admin API.
 */
admin: { baseType: BaseTypes.MetaobjectAdminAccess, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The access permitted on the Storefront API.
 */
storefront: { baseType: BaseTypes.MetaobjectStorefrontAccess, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectAccess", returnType: "MetaobjectAccess", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metaobjectBulkDelete` mutation.
 */
export type MetaobjectBulkDeletePayload = {
/**
 * The asynchronous job that deletes the metaobjects.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetaobjectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetaobjectBulkDeletePayload", returnType: "MetaobjectBulkDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Provides the capabilities of a metaobject definition.
 */
export type MetaobjectCapabilities = {
/**
 * Indicates whether a metaobject definition can be displayed as a page on the Online Store.
 */
onlineStore: { baseType: MetaobjectCapabilitiesOnlineStore, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Indicate whether a metaobject definition is publishable.
 */
publishable: { baseType: MetaobjectCapabilitiesPublishable, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Indicate whether a metaobject definition is renderable and exposes SEO data.
 */
renderable: { baseType: MetaobjectCapabilitiesRenderable, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Indicate whether a metaobject definition is translatable.
 */
translatable: { baseType: MetaobjectCapabilitiesTranslatable, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectCapabilities", returnType: "MetaobjectCapabilities", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The Online Store capability of a metaobject definition.
 */
export type MetaobjectCapabilitiesOnlineStore = {
/**
 * The data associated with the Online Store capability.
 */
data: { baseType: MetaobjectCapabilityDefinitionDataOnlineStore, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Indicates if the capability is enabled.
 */
enabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectCapabilitiesOnlineStore", returnType: "MetaobjectCapabilitiesOnlineStore", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The publishable capability of a metaobject definition.
 */
export type MetaobjectCapabilitiesPublishable = {
/**
 * Indicates if the capability is enabled.
 */
enabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectCapabilitiesPublishable", returnType: "MetaobjectCapabilitiesPublishable", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The renderable capability of a metaobject definition.
 */
export type MetaobjectCapabilitiesRenderable = {
/**
 * The data associated with the renderable capability.
 */
data: { baseType: MetaobjectCapabilityDefinitionDataRenderable, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Indicates if the capability is enabled.
 */
enabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectCapabilitiesRenderable", returnType: "MetaobjectCapabilitiesRenderable", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The translatable capability of a metaobject definition.
 */
export type MetaobjectCapabilitiesTranslatable = {
/**
 * Indicates if the capability is enabled.
 */
enabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectCapabilitiesTranslatable", returnType: "MetaobjectCapabilitiesTranslatable", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Provides the capabilities of a metaobject.
 */
export type MetaobjectCapabilityData = {
/**
 * The Online Store capability for this metaobject.
 */
onlineStore: { baseType: MetaobjectCapabilityDataOnlineStore, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The publishable capability for this metaobject.
 */
publishable: { baseType: MetaobjectCapabilityDataPublishable, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MetaobjectCapabilityData", returnType: "MetaobjectCapabilityData", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The Online Store capability for the parent metaobject.
 */
export type MetaobjectCapabilityDataOnlineStore = {
/**
 * The theme template used when viewing the metaobject in a store.
 */
templateSuffix: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MetaobjectCapabilityDataOnlineStore", returnType: "MetaobjectCapabilityDataOnlineStore", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The publishable capability for the parent metaobject.
 */
export type MetaobjectCapabilityDataPublishable = {
/**
 * The visibility status of this metaobject across all channels.
 */
status: { baseType: BaseTypes.MetaobjectStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectCapabilityDataPublishable", returnType: "MetaobjectCapabilityDataPublishable", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The Online Store capability data for the metaobject definition.
 */
export type MetaobjectCapabilityDefinitionDataOnlineStore = {
/**
 * Flag indicating if a sufficient number of redirects are available to redirect all published entries.
 */
canCreateRedirects: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL handle for accessing pages of this metaobject type in the Online Store.
 */
urlHandle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectCapabilityDefinitionDataOnlineStore", returnType: "MetaobjectCapabilityDefinitionDataOnlineStore", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The renderable capability data for the metaobject definition.
 */
export type MetaobjectCapabilityDefinitionDataRenderable = {
/**
 * The metaobject field used as an alias for the SEO page description.
 */
metaDescriptionKey: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The metaobject field used as an alias for the SEO page title.
 */
metaTitleKey: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MetaobjectCapabilityDefinitionDataRenderable", returnType: "MetaobjectCapabilityDefinitionDataRenderable", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Metaobjects.
 */
export type MetaobjectConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MetaobjectEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MetaobjectEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Metaobject, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectConnection", returnType: "MetaobjectConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metaobjectCreate` mutation.
 */
export type MetaobjectCreatePayload = {
/**
 * The created metaobject.
 */
metaobject: { baseType: Metaobject, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetaobjectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetaobjectCreatePayload", returnType: "MetaobjectCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Provides the definition of a generic object structure composed of metafields.
 */
export type MetaobjectDefinition = {
/**
 * Access configuration for the metaobject definition.
 */
access: { baseType: MetaobjectAccess, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The capabilities of the metaobject definition.
 */
capabilities: { baseType: MetaobjectCapabilities, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The app used to create the metaobject definition.
 */
createdByApp: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member who created the metaobject definition.
 */
createdByStaff: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The administrative description.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The key of a field to reference as the display name for each object.
 */
displayNameKey: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The fields defined for this object type.
 */
fieldDefinitions: { baseType: MetaobjectFieldDefinition, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether this metaobject definition has field whose type can visually represent a metaobject with        the `thumbnailField`.
 */
hasThumbnailField: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A paginated connection to the metaobjects associated with the definition.
 */
metaobjects: { baseType: MetaobjectConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The count of metaobjects created for the definition.
 */
metaobjectsCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The human-readable name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of the object definition. Defines the namespace of associated metafields.
 */
type: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectDefinition", returnType: "MetaobjectDefinition", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple MetaobjectDefinitions.
 */
export type MetaobjectDefinitionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MetaobjectDefinitionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MetaobjectDefinitionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: MetaobjectDefinition, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectDefinitionConnection", returnType: "MetaobjectDefinitionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metaobjectDefinitionCreate` mutation.
 */
export type MetaobjectDefinitionCreatePayload = {
/**
 * The created metaobject definition.
 */
metaobjectDefinition: { baseType: MetaobjectDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetaobjectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetaobjectDefinitionCreatePayload", returnType: "MetaobjectDefinitionCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metaobjectDefinitionDelete` mutation.
 */
export type MetaobjectDefinitionDeletePayload = {
/**
 * The ID of the deleted metaobjects definition.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetaobjectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetaobjectDefinitionDeletePayload", returnType: "MetaobjectDefinitionDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MetaobjectDefinition and a cursor during pagination.
 */
export type MetaobjectDefinitionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MetaobjectDefinitionEdge.
 */
node: { baseType: MetaobjectDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectDefinitionEdge", returnType: "MetaobjectDefinitionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metaobjectDefinitionUpdate` mutation.
 */
export type MetaobjectDefinitionUpdatePayload = {
/**
 * The updated metaobject definition.
 */
metaobjectDefinition: { baseType: MetaobjectDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetaobjectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetaobjectDefinitionUpdatePayload", returnType: "MetaobjectDefinitionUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metaobjectDelete` mutation.
 */
export type MetaobjectDeletePayload = {
/**
 * The ID of the deleted metaobject.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetaobjectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetaobjectDeletePayload", returnType: "MetaobjectDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Metaobject and a cursor during pagination.
 */
export type MetaobjectEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MetaobjectEdge.
 */
node: { baseType: Metaobject, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectEdge", returnType: "MetaobjectEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Provides a field definition and the data value assigned to it.
 */
export type MetaobjectField = {
/**
 * The field definition for this object key.
 */
definition: { baseType: MetaobjectFieldDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The assigned field value in JSON format.
 */
jsonValue: { baseType: BaseTypes.JSON, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The object key of this field.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * For resource reference fields, provides the referenced object.
 */
reference: { members: { Collection: Collection; Company: Company; Customer: Customer; GenericFile: GenericFile; MediaImage: MediaImage; Metaobject: Metaobject; Model3d: Model3d; OnlineStorePage: OnlineStorePage; Order: Order; Product: Product; ProductVariant: ProductVariant; TaxonomyValue: TaxonomyValue; Video: Video }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * For resource reference list fields, provides the list of referenced objects.
 */
references: { baseType: MetafieldReferenceConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * For file reference or color fields, provides visual attributes for this field.
 */
thumbnail: { baseType: MetaobjectThumbnail, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The type of the field.
 */
type: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The assigned field value, always stored as a string regardless of the field type.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MetaobjectField", returnType: "MetaobjectField", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Defines a field for a MetaobjectDefinition with properties
 * such as the field's data type and validations.
 */
export type MetaobjectFieldDefinition = {
/**
 * The administrative description.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A key name used to identify the field within the metaobject composition.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The human-readable name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Required status of the field within the metaobject composition.
 */
required: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of data that the field stores.
 */
type: { baseType: MetafieldDefinitionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
 * the field. For example, a field with the type `date` can set a minimum date requirement.
 */
validations: { baseType: MetafieldDefinitionValidation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetaobjectFieldDefinition", returnType: "MetaobjectFieldDefinition", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Provides attributes for visual representation.
 */
export type MetaobjectThumbnail = {
/**
 * The file to be used for visual representation of this metaobject.
 */
file: { members: { ExternalVideo: ExternalVideo; GenericFile: GenericFile; MediaImage: MediaImage; Model3d: Model3d; Video: Video }, fields: { alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The hexadecimal color code to be used for respresenting this metaobject.
 */
hex: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "MetaobjectThumbnail", returnType: "MetaobjectThumbnail", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metaobjectUpdate` mutation.
 */
export type MetaobjectUpdatePayload = {
/**
 * The updated metaobject.
 */
metaobject: { baseType: Metaobject, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetaobjectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetaobjectUpdatePayload", returnType: "MetaobjectUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `metaobjectUpsert` mutation.
 */
export type MetaobjectUpsertPayload = {
/**
 * The created or updated metaobject.
 */
metaobject: { baseType: Metaobject, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetaobjectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MetaobjectUpsertPayload", returnType: "MetaobjectUpsertPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Defines errors encountered while managing metaobject resources.
 */
export type MetaobjectUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MetaobjectUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The index of the failing list element in an array.
 */
elementIndex: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The key of the failing object element.
 */
elementKey: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MetaobjectUserError", returnType: "MetaobjectUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * You can use the `MobilePlatformApplication` resource to enable
 * [shared web credentials](https://developer.apple.com/documentation/security/shared_web_credentials) for Shopify iOS apps,
 * as well as to create [iOS universal link](https://developer.apple.com/ios/universal-links/)
 * or [Android app link](https://developer.android.com/training/app-links/) verification endpoints for merchant Shopify iOS or Android apps.
 * Shared web credentials let iOS users access a native app after logging into the respective website in Safari without re-entering
 * their username and password. If a user changes their credentials in the app, then those changes are reflected in Safari.
 * You must use a custom domain to integrate shared web credentials with Shopify. With each platform's link system,
 * users can tap a link to a shop's website and get seamlessly redirected to a merchant's installed app without going
 * through a browser or manually selecting an app.
 *
 * For full configuration instructions on iOS shared web credentials,
 * see the [associated domains setup](https://developer.apple.com/documentation/security/password_autofill/setting_up_an_app_s_associated_domains) technical documentation.
 *
 * For full configuration instructions on iOS universal links or Android App Links,
 * see the respective [iOS universal link](https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content)
 * or [Android app link](https://developer.android.com/training/app-links) technical documentation.
 */
export type MobilePlatformApplication = AndroidApplication | AppleApplication

/**
 * An auto-generated type for paginating through multiple MobilePlatformApplications.
 */
export type MobilePlatformApplicationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: MobilePlatformApplicationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in MobilePlatformApplicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { AndroidApplication: AndroidApplication; AppleApplication: AppleApplication }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MobilePlatformApplicationConnection", returnType: "MobilePlatformApplicationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `mobilePlatformApplicationCreate` mutation.
 */
export type MobilePlatformApplicationCreatePayload = {
/**
 * Created mobile platform application.
 */
mobilePlatformApplication: { members: { AndroidApplication: AndroidApplication; AppleApplication: AppleApplication }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MobilePlatformApplicationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MobilePlatformApplicationCreatePayload", returnType: "MobilePlatformApplicationCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `mobilePlatformApplicationDelete` mutation.
 */
export type MobilePlatformApplicationDeletePayload = {
/**
 * The ID of the mobile platform application that was just deleted.
 */
deletedMobilePlatformApplicationId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MobilePlatformApplicationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MobilePlatformApplicationDeletePayload", returnType: "MobilePlatformApplicationDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one MobilePlatformApplication and a cursor during pagination.
 */
export type MobilePlatformApplicationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of MobilePlatformApplicationEdge.
 */
node: { members: { AndroidApplication: AndroidApplication; AppleApplication: AppleApplication }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MobilePlatformApplicationEdge", returnType: "MobilePlatformApplicationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `mobilePlatformApplicationUpdate` mutation.
 */
export type MobilePlatformApplicationUpdatePayload = {
/**
 * Created mobile platform application.
 */
mobilePlatformApplication: { members: { AndroidApplication: AndroidApplication; AppleApplication: AppleApplication }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MobilePlatformApplicationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "MobilePlatformApplicationUpdatePayload", returnType: "MobilePlatformApplicationUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an error in the input of a mutation.
 */
export type MobilePlatformApplicationUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.MobilePlatformApplicationUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MobilePlatformApplicationUserError", returnType: "MobilePlatformApplicationUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a Shopify hosted 3D model.
 */
export type Model3d = {
/**
 * A word or phrase to describe the contents or the function of a file.
 */
alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The 3d model's bounding box information.
 */
boundingBox: { baseType: Model3dBoundingBox, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Any errors that have occurred on the file.
 */
fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The status of the file.
 */
fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The 3d model's filename.
 */
filename: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The media content type.
 */
mediaContentType: { baseType: BaseTypes.MediaContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Any errors which have occurred on the media.
 */
mediaErrors: { baseType: MediaError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The warnings attached to the media.
 */
mediaWarnings: { baseType: MediaWarning, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The 3d model's original source.
 */
originalSource: { baseType: Model3dSource, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The preview image for the media.
 */
preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The 3d model's sources.
 */
sources: { baseType: Model3dSource, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Current status of the media.
 */
status: { baseType: BaseTypes.MediaStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Model3d", returnType: "Model3d", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & File & Media & Node

/**
 * Bounding box information of a 3d model.
 */
export type Model3dBoundingBox = {
/**
 * Size in meters of the smallest volume which contains the 3d model.
 */
size: { baseType: Vector3, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Model3dBoundingBox", returnType: "Model3dBoundingBox", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A source for a Shopify-hosted 3d model.
 *
 * Types of sources include GLB and USDZ formatted 3d models, where the former
 * is an original 3d model and the latter has been converted from the original.
 *
 * If the original source is in GLB format and over 15 MBs in size, then both the
 * original and the USDZ formatted source are optimized to reduce the file size.
 */
export type Model3dSource = {
/**
 * The 3d model source's filesize.
 */
filesize: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The 3d model source's format.
 */
format: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The 3d model source's MIME type.
 */
mimeType: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The 3d model source's URL.
 */
url: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Model3dSource", returnType: "Model3dSource", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,
 * when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
 */
export type MoneyBag = {
/**
 * Amount in presentment currency.
 */
presentmentMoney: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Amount in shop currency.
 */
shopMoney: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MoneyBag", returnType: "MoneyBag", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A monetary value with currency.
 */
export type MoneyV2 = {
/**
 * Decimal money amount.
 */
amount: { baseType: BaseTypes.Decimal, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Currency of the money.
 */
currencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MoneyV2", returnType: "MoneyV2", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The schema's entry point for all mutation operations.
 */
export type Mutation = {
/**
 * Updates the email state value for an abandonment.
 */
abandonmentEmailStateUpdate: { baseType: AbandonmentEmailStateUpdatePayload, arguments: { emailSentAt?: BaseTypes.DateTime | null; emailState: BaseTypes.AbandonmentEmailState; emailStateChangeReason?: BaseTypes.String | null; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates the marketing activities delivery statuses for an abandonment.
 */
abandonmentUpdateActivitiesDeliveryStatuses: { baseType: AbandonmentUpdateActivitiesDeliveryStatusesPayload, arguments: { abandonmentId: BaseTypes.ID; deliveredAt?: BaseTypes.DateTime | null; deliveryStatus: BaseTypes.AbandonmentDeliveryState; deliveryStatusChangeReason?: BaseTypes.String | null; marketingActivityId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Charges a shop for features or services one time.
 * This type of charge is recommended for apps that aren't billed on a recurring basis.
 * Test and demo shops aren't charged.
 */
appPurchaseOneTimeCreate: { baseType: AppPurchaseOneTimeCreatePayload, arguments: { name: BaseTypes.String; price: InputTypes.MoneyInput; returnUrl: BaseTypes.URL; test?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Cancels an app subscription on a store.
 */
appSubscriptionCancel: { baseType: AppSubscriptionCancelPayload, arguments: { id: BaseTypes.ID; prorate?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Allows an app to charge a store for features or services on a recurring basis.
 */
appSubscriptionCreate: { baseType: AppSubscriptionCreatePayload, arguments: { lineItems: Array<InputTypes.AppSubscriptionLineItemInput>; name: BaseTypes.String; replacementBehavior?: BaseTypes.AppSubscriptionReplacementBehavior | null; returnUrl: BaseTypes.URL; test?: BaseTypes.Boolean | null; trialDays?: BaseTypes.Int | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates the capped amount on the usage pricing plan of an app subscription line item.
 */
appSubscriptionLineItemUpdate: { baseType: AppSubscriptionLineItemUpdatePayload, arguments: { cappedAmount: InputTypes.MoneyInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Extends the trial of an app subscription.
 */
appSubscriptionTrialExtend: { baseType: AppSubscriptionTrialExtendPayload, arguments: { days: BaseTypes.Int; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Enables an app to charge a store for features or services on a per-use basis.
 * The usage charge value is counted towards the `cappedAmount` limit that was specified in the `appUsagePricingDetails` field when the app subscription was created.
 * If you create an app usage charge that causes the total usage charges in a billing interval to exceed the capped amount, then a `Total price exceeds balance remaining` error is returned.
 */
appUsageRecordCreate: { baseType: AppUsageRecordCreatePayload, arguments: { description: BaseTypes.String; idempotencyKey?: BaseTypes.String | null; price: InputTypes.MoneyInput; subscriptionLineItemId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Starts the cancelation process of a running bulk operation.
 *
 * There may be a short delay from when a cancelation starts until the operation is actually canceled.
 */
bulkOperationCancel: { baseType: BulkOperationCancelPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates and runs a bulk operation mutation.
 *
 * To learn how to bulk import large volumes of data asynchronously, refer to the
 * [bulk import data guide](https://shopify.dev/api/usage/bulk-operations/imports).
 */
bulkOperationRunMutation: { baseType: BulkOperationRunMutationPayload, arguments: { clientIdentifier?: BaseTypes.String | null; mutation: BaseTypes.String; stagedUploadPath: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates and runs a bulk operation query.
 *
 * See the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/queries) for more details.
 */
bulkOperationRunQuery: { baseType: BulkOperationRunQueryPayload, arguments: { query: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates product feedback for multiple products.
 */
bulkProductResourceFeedbackCreate: { baseType: BulkProductResourceFeedbackCreatePayload, arguments: { feedbackInput: Array<InputTypes.ProductResourceFeedbackInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new carrier service.
 */
carrierServiceCreate: { baseType: CarrierServiceCreatePayload, arguments: { input: InputTypes.DeliveryCarrierServiceCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes an existing carrier service.
 */
carrierServiceDelete: { baseType: CarrierServiceDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a carrier service. Only the app that creates a carrier service can update it.
 */
carrierServiceUpdate: { baseType: CarrierServiceUpdatePayload, arguments: { input: InputTypes.DeliveryCarrierServiceUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create a CartTransform function to the Shop.
 */
cartTransformCreate: { baseType: CartTransformCreatePayload, arguments: { blockOnFailure?: BaseTypes.Boolean | null; functionId: BaseTypes.String; metafields?: Array<InputTypes.MetafieldInput> | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Destroy a cart transform function from the Shop.
 */
cartTransformDelete: { baseType: CartTransformDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates the context of a catalog.
 */
catalogContextUpdate: { baseType: CatalogContextUpdatePayload, arguments: { catalogId: BaseTypes.ID; contextsToAdd?: InputTypes.CatalogContextInput | null; contextsToRemove?: InputTypes.CatalogContextInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new catalog.
 */
catalogCreate: { baseType: CatalogCreatePayload, arguments: { input: InputTypes.CatalogCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Delete a catalog.
 */
catalogDelete: { baseType: CatalogDeletePayload, arguments: { deleteDependentResources?: BaseTypes.Boolean | null; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an existing catalog.
 */
catalogUpdate: { baseType: CatalogUpdatePayload, arguments: { id: BaseTypes.ID; input: InputTypes.CatalogUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates the checkout branding settings for a
 * [checkout profile](https://shopify.dev/api/admin-graphql/unstable/queries/checkoutProfile).
 *
 * If the settings don't exist, then new settings are created. The checkout branding settings applied to a
 * published checkout profile will be immediately visible within the store's checkout. The checkout branding
 * settings applied to a draft checkout profile could be previewed within the admin checkout editor.
 *
 * To learn more about updating checkout branding settings, refer to the checkout branding
 * [tutorial](https://shopify.dev/docs/apps/checkout/styling).
 */
checkoutBrandingUpsert: { baseType: CheckoutBrandingUpsertPayload, arguments: { checkoutBrandingInput?: InputTypes.CheckoutBrandingInput | null; checkoutProfileId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds products to a collection.
 */
collectionAddProducts: { baseType: CollectionAddProductsPayload, arguments: { id: BaseTypes.ID; productIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously adds a set of products to a given collection. It can take a long time to run. Instead of returning a collection, it returns a job which should be polled.
 */
collectionAddProductsV2: { baseType: CollectionAddProductsV2Payload, arguments: { id: BaseTypes.ID; productIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a collection.
 */
collectionCreate: { baseType: CollectionCreatePayload, arguments: { input: InputTypes.CollectionInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a collection.
 */
collectionDelete: { baseType: CollectionDeletePayload, arguments: { input: InputTypes.CollectionDeleteInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Publishes a collection to a channel.
 */
collectionPublish: { baseType: CollectionPublishPayload, arguments: { input: InputTypes.CollectionPublishInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes a set of products from a given collection. The mutation can take a long time to run. Instead of returning an updated collection the mutation returns a job, which should be [polled](https://shopify.dev/api/admin-graphql/latest/queries/job). For use with manual collections only.
 */
collectionRemoveProducts: { baseType: CollectionRemoveProductsPayload, arguments: { id: BaseTypes.ID; productIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously reorders a set of products within a specified collection. Instead of returning an updated collection, this mutation returns a job, which should be [polled](https://shopify.dev/api/admin-graphql/latest/queries/job). The [`Collection.sortOrder`](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-collection-sortorder) must be `MANUAL`. Displaced products will have their position altered in a consistent manner, with no gaps.
 */
collectionReorderProducts: { baseType: CollectionReorderProductsPayload, arguments: { id: BaseTypes.ID; moves: Array<InputTypes.MoveInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Unpublishes a collection.
 */
collectionUnpublish: { baseType: CollectionUnpublishPayload, arguments: { input: InputTypes.CollectionUnpublishInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a collection.
 */
collectionUpdate: { baseType: CollectionUpdatePayload, arguments: { input: InputTypes.CollectionInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Add, remove and update `CombinedListing`s of a given Product.
 *
 * `CombinedListing`s are comprised of multiple products to create a single listing. There are two kinds of products used in a `CombinedListing`:
 *
 * 1. Parent products
 * 2. Child products
 *
 * The parent product is created with a `productCreate` with a `CombinedListingRole` of `PARENT`. Once created, you can associate child products with the parent product using this mutation. Parent products represent the idea of a product (e.g. Shoe).
 *
 * Child products represent a particular option value (or combination of option values) of a parent product. For instance, with your Shoe parent product, you may have several child products representing specific colors of the shoe (e.g. Shoe - Blue). You could also have child products representing more than a single option (e.g. Shoe - Blue/Canvas, Shoe - Blue/Leather, etc...).
 *
 * The combined listing is the association of parent product to one or more child products.
 *
 * Learn more about [Combined Listings](https://shopify.dev/apps/selling-strategies/combined-listings).
 */
combinedListingUpdate: { baseType: CombinedListingUpdatePayload, arguments: { optionsAndValues?: Array<InputTypes.OptionAndValueInput> | null; parentProductId: BaseTypes.ID; productsAdded?: Array<InputTypes.ChildProductRelationInput> | null; productsEdited?: Array<InputTypes.ChildProductRelationInput> | null; productsRemovedIds?: Array<BaseTypes.ID> | null; title?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a list of companies.
 */
companiesDelete: { baseType: CompaniesDeletePayload, arguments: { companyIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a company address.
 */
companyAddressDelete: { baseType: CompanyAddressDeletePayload, arguments: { addressId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Assigns the customer as a company contact.
 */
companyAssignCustomerAsContact: { baseType: CompanyAssignCustomerAsContactPayload, arguments: { companyId: BaseTypes.ID; customerId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Assigns the main contact for the company.
 */
companyAssignMainContact: { baseType: CompanyAssignMainContactPayload, arguments: { companyContactId: BaseTypes.ID; companyId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Assigns a role to a contact for a location.
 */
companyContactAssignRole: { baseType: CompanyContactAssignRolePayload, arguments: { companyContactId: BaseTypes.ID; companyContactRoleId: BaseTypes.ID; companyLocationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Assigns roles on a company contact.
 */
companyContactAssignRoles: { baseType: CompanyContactAssignRolesPayload, arguments: { companyContactId: BaseTypes.ID; rolesToAssign: Array<InputTypes.CompanyContactRoleAssign> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a company contact and the associated customer.
 */
companyContactCreate: { baseType: CompanyContactCreatePayload, arguments: { companyId: BaseTypes.ID; input: InputTypes.CompanyContactInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a company contact.
 */
companyContactDelete: { baseType: CompanyContactDeletePayload, arguments: { companyContactId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes a company contact from a Company.
 */
companyContactRemoveFromCompany: { baseType: CompanyContactRemoveFromCompanyPayload, arguments: { companyContactId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Revokes a role on a company contact.
 */
companyContactRevokeRole: { baseType: CompanyContactRevokeRolePayload, arguments: { companyContactId: BaseTypes.ID; companyContactRoleAssignmentId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Revokes roles on a company contact.
 */
companyContactRevokeRoles: { baseType: CompanyContactRevokeRolesPayload, arguments: { companyContactId: BaseTypes.ID; revokeAll?: BaseTypes.Boolean | null; roleAssignmentIds?: Array<BaseTypes.ID> | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Sends the company contact a welcome email.
 */
companyContactSendWelcomeEmail: { baseType: CompanyContactSendWelcomeEmailPayload, arguments: { companyContactId: BaseTypes.ID; email?: InputTypes.EmailInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a company contact.
 */
companyContactUpdate: { baseType: CompanyContactUpdatePayload, arguments: { companyContactId: BaseTypes.ID; input: InputTypes.CompanyContactInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes one or more company contacts.
 */
companyContactsDelete: { baseType: CompanyContactsDeletePayload, arguments: { companyContactIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a company.
 */
companyCreate: { baseType: CompanyCreatePayload, arguments: { input: InputTypes.CompanyCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a company.
 */
companyDelete: { baseType: CompanyDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an address on a company location.
 */
companyLocationAssignAddress: { baseType: CompanyLocationAssignAddressPayload, arguments: { address: InputTypes.CompanyAddressInput; addressTypes: Array<BaseTypes.CompanyAddressType>; locationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Assigns roles on a company location.
 */
companyLocationAssignRoles: { baseType: CompanyLocationAssignRolesPayload, arguments: { companyLocationId: BaseTypes.ID; rolesToAssign: Array<InputTypes.CompanyLocationRoleAssign> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Assigns tax exemptions to the company location.
 */
companyLocationAssignTaxExemptions: { baseType: CompanyLocationAssignTaxExemptionsPayload, arguments: { companyLocationId: BaseTypes.ID; taxExemptions: Array<BaseTypes.TaxExemption> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a company location.
 */
companyLocationCreate: { baseType: CompanyLocationCreatePayload, arguments: { companyId: BaseTypes.ID; input: InputTypes.CompanyLocationInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a tax registration for a company location.
 */
companyLocationCreateTaxRegistration: { baseType: CompanyLocationCreateTaxRegistrationPayload, arguments: { locationId: BaseTypes.ID; taxId: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a company location.
 */
companyLocationDelete: { baseType: CompanyLocationDeletePayload, arguments: { companyLocationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Revokes roles on a company location.
 */
companyLocationRevokeRoles: { baseType: CompanyLocationRevokeRolesPayload, arguments: { companyLocationId: BaseTypes.ID; rolesToRevoke: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Revokes tax exemptions from the company location.
 */
companyLocationRevokeTaxExemptions: { baseType: CompanyLocationRevokeTaxExemptionsPayload, arguments: { companyLocationId: BaseTypes.ID; taxExemptions: Array<BaseTypes.TaxExemption> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Revokes tax registration on a company location.
 */
companyLocationRevokeTaxRegistration: { baseType: CompanyLocationRevokeTaxRegistrationPayload, arguments: { companyLocationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a company location.
 */
companyLocationUpdate: { baseType: CompanyLocationUpdatePayload, arguments: { companyLocationId: BaseTypes.ID; input: InputTypes.CompanyLocationUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a list of company locations.
 */
companyLocationsDelete: { baseType: CompanyLocationsDeletePayload, arguments: { companyLocationIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Revokes the main contact from the company.
 */
companyRevokeMainContact: { baseType: CompanyRevokeMainContactPayload, arguments: { companyId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a company.
 */
companyUpdate: { baseType: CompanyUpdatePayload, arguments: { companyId: BaseTypes.ID; input: InputTypes.CompanyInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Add tax exemptions for the customer.
 */
customerAddTaxExemptions: { baseType: CustomerAddTaxExemptionsPayload, arguments: { customerId: BaseTypes.ID; taxExemptions: Array<BaseTypes.TaxExemption> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Cancels a pending erasure of a customer's data.
 *
 * To request an erasure of a customer's data use the [customerRequestDataErasure mutation](https://shopify.dev/api/admin-graphql/unstable/mutations/customerRequestDataErasure).
 */
customerCancelDataErasure: { baseType: CustomerCancelDataErasurePayload, arguments: { customerId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create a new customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
 */
customerCreate: { baseType: CustomerCreatePayload, arguments: { input: InputTypes.CustomerInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Delete a customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
 */
customerDelete: { baseType: CustomerDeletePayload, arguments: { input: InputTypes.CustomerDeleteInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Update a customer's email marketing information information.
 */
customerEmailMarketingConsentUpdate: { baseType: CustomerEmailMarketingConsentUpdatePayload, arguments: { input: InputTypes.CustomerEmailMarketingConsentUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Generate an account activation URL for a customer.
 */
customerGenerateAccountActivationUrl: { baseType: CustomerGenerateAccountActivationUrlPayload, arguments: { customerId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Merges two customers.
 */
customerMerge: { baseType: CustomerMergePayload, arguments: { customerOneId: BaseTypes.ID; customerTwoId: BaseTypes.ID; overrideFields?: InputTypes.CustomerMergeOverrideFields | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a vaulted payment method for a customer from duplication data.
 *
 * This data must be obtained from another shop within the same organization.
 *
 * Currently, this only supports Shop Pay payment methods. This is only available for selected partner apps.
 */
customerPaymentMethodCreateFromDuplicationData: { baseType: CustomerPaymentMethodCreateFromDuplicationDataPayload, arguments: { billingAddress: InputTypes.MailingAddressInput; customerId: BaseTypes.ID; encryptedDuplicationData: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a credit card payment method for a customer using a session id.
 * These values are only obtained through card imports happening from a PCI compliant environment.
 * Please use customerPaymentMethodRemoteCreate if you are not managing credit cards directly.
 */
customerPaymentMethodCreditCardCreate: { baseType: CustomerPaymentMethodCreditCardCreatePayload, arguments: { billingAddress: InputTypes.MailingAddressInput; customerId: BaseTypes.ID; sessionId: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates the credit card payment method for a customer.
 */
customerPaymentMethodCreditCardUpdate: { baseType: CustomerPaymentMethodCreditCardUpdatePayload, arguments: { billingAddress: InputTypes.MailingAddressInput; id: BaseTypes.ID; sessionId: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns encrypted data that can be used to duplicate the payment method in another shop within the same organization.
 *
 * Currently, this only supports Shop Pay payment methods. This is only available for selected partner apps.
 */
customerPaymentMethodGetDuplicationData: { baseType: CustomerPaymentMethodGetDuplicationDataPayload, arguments: { customerPaymentMethodId: BaseTypes.ID; targetCustomerId: BaseTypes.ID; targetShopId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a URL that allows the customer to update a specific payment method.
 *
 * Currently, `customerPaymentMethodGetUpdateUrl` only supports Shop Pay.
 */
customerPaymentMethodGetUpdateUrl: { baseType: CustomerPaymentMethodGetUpdateUrlPayload, arguments: { customerPaymentMethodId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a PayPal billing agreement for a customer.
 */
customerPaymentMethodPaypalBillingAgreementCreate: { baseType: CustomerPaymentMethodPaypalBillingAgreementCreatePayload, arguments: { billingAddress?: InputTypes.MailingAddressInput | null; billingAgreementId: BaseTypes.String; customerId: BaseTypes.ID; inactive?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a PayPal billing agreement for a customer.
 */
customerPaymentMethodPaypalBillingAgreementUpdate: { baseType: CustomerPaymentMethodPaypalBillingAgreementUpdatePayload, arguments: { billingAddress: InputTypes.MailingAddressInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create a payment method from remote gateway identifiers. NOTE: This operation processes payment methods asynchronously. The returned payment method will initially have incomplete details. Developers must poll this payment method using customerPaymentMethod query until all payment method details are available, or the payment method is revoked (usually within seconds).
 */
customerPaymentMethodRemoteCreate: { baseType: CustomerPaymentMethodRemoteCreatePayload, arguments: { customerId: BaseTypes.ID; remoteReference: InputTypes.CustomerPaymentMethodRemoteInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create a payment method from a credit card stored by Stripe.
 */
customerPaymentMethodRemoteCreditCardCreate: { baseType: CustomerPaymentMethodRemoteCreditCardCreatePayload, arguments: { customerId: BaseTypes.ID; stripeCustomerId: BaseTypes.String; stripePaymentMethodId?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Revokes a customer's payment method.
 */
customerPaymentMethodRevoke: { baseType: CustomerPaymentMethodRevokePayload, arguments: { customerPaymentMethodId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Sends a link to the customer so they can update a specific payment method.
 */
customerPaymentMethodSendUpdateEmail: { baseType: CustomerPaymentMethodSendUpdateEmailPayload, arguments: { customerPaymentMethodId: BaseTypes.ID; email?: InputTypes.EmailInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Remove tax exemptions from a customer.
 */
customerRemoveTaxExemptions: { baseType: CustomerRemoveTaxExemptionsPayload, arguments: { customerId: BaseTypes.ID; taxExemptions: Array<BaseTypes.TaxExemption> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Replace tax exemptions for a customer.
 */
customerReplaceTaxExemptions: { baseType: CustomerReplaceTaxExemptionsPayload, arguments: { customerId: BaseTypes.ID; taxExemptions: Array<BaseTypes.TaxExemption> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Enqueues a request to erase customer's data. Read more [here](https://help.shopify.com/manual/privacy-and-security/privacy/processing-customer-data-requests#erase-customer-personal-data).
 *
 * To cancel the data erasure request use the [customerCancelDataErasure mutation](https://shopify.dev/api/admin-graphql/unstable/mutations/customerCancelDataErasure).
 */
customerRequestDataErasure: { baseType: CustomerRequestDataErasurePayload, arguments: { customerId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a customer segment members query.
 */
customerSegmentMembersQueryCreate: { baseType: CustomerSegmentMembersQueryCreatePayload, arguments: { input: InputTypes.CustomerSegmentMembersQueryInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Update a customer's SMS marketing consent information.
 */
customerSmsMarketingConsentUpdate: { baseType: CustomerSmsMarketingConsentUpdatePayload, arguments: { input: InputTypes.CustomerSmsMarketingConsentUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Update a customer's attributes. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
 */
customerUpdate: { baseType: CustomerUpdatePayload, arguments: { input: InputTypes.CustomerInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a customer's default address.
 */
customerUpdateDefaultAddress: { baseType: CustomerUpdateDefaultAddressPayload, arguments: { addressId: BaseTypes.ID; customerId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Opt out a customer from data sale.
 */
dataSaleOptOut: { baseType: DataSaleOptOutPayload, arguments: { email: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a delegate access token.
 *
 * To learn more about creating delegate access tokens, refer to
 * [Delegate OAuth access tokens to subsystems](https://shopify.dev/docs/apps/build/authentication-authorization/access-tokens/use-delegate-tokens).
 */
delegateAccessTokenCreate: { baseType: DelegateAccessTokenCreatePayload, arguments: { input: InputTypes.DelegateAccessTokenInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Destroys a delegate access token.
 */
delegateAccessTokenDestroy: { baseType: DelegateAccessTokenDestroyPayload, arguments: { accessToken: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activates and deactivates delivery customizations.
 */
deliveryCustomizationActivation: { baseType: DeliveryCustomizationActivationPayload, arguments: { enabled: BaseTypes.Boolean; ids: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a delivery customization.
 */
deliveryCustomizationCreate: { baseType: DeliveryCustomizationCreatePayload, arguments: { deliveryCustomization: InputTypes.DeliveryCustomizationInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a delivery customization.
 */
deliveryCustomizationDelete: { baseType: DeliveryCustomizationDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a delivery customization.
 */
deliveryCustomizationUpdate: { baseType: DeliveryCustomizationUpdatePayload, arguments: { deliveryCustomization: InputTypes.DeliveryCustomizationInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create a delivery profile.
 */
deliveryProfileCreate: { baseType: DeliveryProfileCreatePayload, arguments: { profile: InputTypes.DeliveryProfileInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Enqueue the removal of a delivery profile.
 */
deliveryProfileRemove: { baseType: DeliveryProfileRemovePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Update a delivery profile.
 */
deliveryProfileUpdate: { baseType: DeliveryProfileUpdatePayload, arguments: { id: BaseTypes.ID; leaveLegacyModeProfiles?: BaseTypes.Boolean | null; profile: InputTypes.DeliveryProfileInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates or updates a delivery promise provider. Currently restricted to select approved delivery promise partners.
 */
deliveryPromiseProviderUpsert: { baseType: DeliveryPromiseProviderUpsertPayload, arguments: { active?: BaseTypes.Boolean | null; fulfillmentDelay?: BaseTypes.Int | null; locationId: BaseTypes.ID; timeZone?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Set the delivery settings for a shop.
 */
deliverySettingUpdate: { baseType: DeliverySettingUpdatePayload, arguments: { setting: InputTypes.DeliverySettingInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Assigns a location as the shipping origin while using legacy compatibility mode for multi-location delivery profiles.
 */
deliveryShippingOriginAssign: { baseType: DeliveryShippingOriginAssignPayload, arguments: { locationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activates an automatic discount.
 */
discountAutomaticActivate: { baseType: DiscountAutomaticActivatePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates an automatic discount that's managed by an app.
 * Use this mutation with [Shopify Functions](https://shopify.dev/docs/apps/build/functions)
 * when you need advanced, custom, or dynamic discount capabilities that aren't supported by
 * [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
 *
 * For example, use this mutation to create an automatic discount using an app's
 * "Volume" discount type that applies a percentage
 * off when customers purchase more than the minimum quantity of a product. For an example implementation,
 * refer to [our tutorial](https://shopify.dev/docs/apps/build/discounts/build-discount-function).
 *
 * > Note:
 * > To create code discounts with custom logic, use the
 * [`discountCodeAppCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeAppCreate)
 * mutation.
 */
discountAutomaticAppCreate: { baseType: DiscountAutomaticAppCreatePayload, arguments: { automaticAppDiscount: InputTypes.DiscountAutomaticAppInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an existing automatic discount that's managed by an app using
 * [Shopify Functions](https://shopify.dev/docs/apps/build/functions).
 * Use this mutation when you need advanced, custom, or
 * dynamic discount capabilities that aren't supported by
 * [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
 *
 * For example, use this mutation to update a new "Volume" discount type that applies a percentage
 * off when customers purchase more than the minimum quantity of a product. For an example implementation,
 * refer to [our tutorial](https://shopify.dev/docs/apps/build/discounts/build-discount-function).
 *
 * > Note:
 * > To update code discounts with custom logic, use the
 * [`discountCodeAppUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeAppUpdate)
 * mutation instead.
 */
discountAutomaticAppUpdate: { baseType: DiscountAutomaticAppUpdatePayload, arguments: { automaticAppDiscount: InputTypes.DiscountAutomaticAppInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates an
 * [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
 * that's automatically applied on a cart and at checkout.
 *
 * > Note:
 * > To create code discounts, use the
 * [`discountCodeBasicCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBasicCreate)
 * mutation.
 */
discountAutomaticBasicCreate: { baseType: DiscountAutomaticBasicCreatePayload, arguments: { automaticBasicDiscount: InputTypes.DiscountAutomaticBasicInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an existing
 * [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
 * that's automatically applied on a cart and at checkout.
 *
 * > Note:
 * > To update code discounts, use the
 * [`discountCodeBasicUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBasicUpdate)
 * mutation instead.
 */
discountAutomaticBasicUpdate: { baseType: DiscountAutomaticBasicUpdatePayload, arguments: { automaticBasicDiscount: InputTypes.DiscountAutomaticBasicInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously delete automatic discounts in bulk if a `search` or `saved_search_id` argument is provided or if a
 * maximum discount threshold is reached (1,000). Otherwise, deletions will occur inline.
 * **Warning:** All automatic discounts will be deleted if a blank `search` argument is provided.
 */
discountAutomaticBulkDelete: { baseType: DiscountAutomaticBulkDeletePayload, arguments: { ids?: Array<BaseTypes.ID> | null; savedSearchId?: BaseTypes.ID | null; search?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a
 * [buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that's automatically applied on a cart and at checkout.
 *
 * > Note:
 * > To create code discounts, use the
 * [`discountCodeBxgyCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBxgyCreate)
 * mutation.
 */
discountAutomaticBxgyCreate: { baseType: DiscountAutomaticBxgyCreatePayload, arguments: { automaticBxgyDiscount: InputTypes.DiscountAutomaticBxgyInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an existing
 * [buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that's automatically applied on a cart and at checkout.
 *
 * > Note:
 * > To update code discounts, use the
 * [`discountCodeBxgyUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBxgyUpdate)
 * mutation instead.
 */
discountAutomaticBxgyUpdate: { baseType: DiscountAutomaticBxgyUpdatePayload, arguments: { automaticBxgyDiscount: InputTypes.DiscountAutomaticBxgyInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deactivates an automatic discount.
 */
discountAutomaticDeactivate: { baseType: DiscountAutomaticDeactivatePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes an
 * [automatic discount](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts).
 */
discountAutomaticDelete: { baseType: DiscountAutomaticDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a
 * [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
 * that's automatically applied on a cart and at checkout.
 *
 * > Note:
 * > To create code discounts, use the
 * [`discountCodeFreeShippingCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeFreeShippingCreate)
 * mutation.
 */
discountAutomaticFreeShippingCreate: { baseType: DiscountAutomaticFreeShippingCreatePayload, arguments: { freeShippingAutomaticDiscount: InputTypes.DiscountAutomaticFreeShippingInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an existing
 * [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
 * that's automatically applied on a cart and at checkout.
 *
 * > Note:
 * > To update code discounts, use the
 * [`discountCodeFreeShippingUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeFreeShippingUpdate)
 * mutation instead.
 */
discountAutomaticFreeShippingUpdate: { baseType: DiscountAutomaticFreeShippingUpdatePayload, arguments: { freeShippingAutomaticDiscount: InputTypes.DiscountAutomaticFreeShippingInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activates a code discount.
 */
discountCodeActivate: { baseType: DiscountCodeActivatePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a code discount. The discount type must be provided by an app extension that uses [Shopify Functions](https://shopify.dev/docs/apps/build/functions). Functions can implement [order](https://shopify.dev/docs/api/functions/reference/order-discounts), [product](https://shopify.dev/docs/api/functions/reference/product-discounts), or [shipping](https://shopify.dev/docs/api/functions/reference/shipping-discounts) discount functions. Use this mutation with Shopify Functions when you need custom logic beyond [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
 *
 * For example, use this mutation to create a code discount using an app's "Volume" discount type that applies a percentage off when customers purchase more than the minimum quantity
 * of a product. For an example implementation, refer to [our tutorial](https://shopify.dev/docs/apps/build/discounts/build-discount-function).
 *
 * > Note:
 * > To create automatic discounts with custom logic, use [`discountAutomaticAppCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticAppCreate).
 */
discountCodeAppCreate: { baseType: DiscountCodeAppCreatePayload, arguments: { codeAppDiscount: InputTypes.DiscountCodeAppInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a code discount, where the discount type is provided by an app extension that uses [Shopify Functions](https://shopify.dev/docs/apps/build/functions). Use this mutation when you need advanced, custom, or dynamic discount capabilities that aren't supported by [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
 *
 * > Note:
 * > To update automatic discounts, use [`discountAutomaticAppUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticAppUpdate).
 */
discountCodeAppUpdate: { baseType: DiscountCodeAppUpdatePayload, arguments: { codeAppDiscount: InputTypes.DiscountCodeAppInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates an [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount) that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.
 *
 * > Note:
 * > To create discounts that are automatically applied on a cart and at checkout, use the [`discountAutomaticBasicCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBasicCreate) mutation.
 */
discountCodeBasicCreate: { baseType: DiscountCodeBasicCreatePayload, arguments: { basicCodeDiscount: InputTypes.DiscountCodeBasicInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount) that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.
 *
 * > Note:
 * > To update discounts that are automatically applied on a cart and at checkout, use the [`discountAutomaticBasicUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBasicUpdate) mutation.
 */
discountCodeBasicUpdate: { baseType: DiscountCodeBasicUpdatePayload, arguments: { basicCodeDiscount: InputTypes.DiscountCodeBasicInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activates multiple [code discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) asynchronously using one of the following:
 * - A search query
 * - A saved search ID
 * - A list of discount code IDs
 *
 * For example, you can activate discounts for all codes that match a search criteria, or activate a predefined set of discount codes.
 */
discountCodeBulkActivate: { baseType: DiscountCodeBulkActivatePayload, arguments: { ids?: Array<BaseTypes.ID> | null; savedSearchId?: BaseTypes.ID | null; search?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deactivates multiple [code-based discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) asynchronously using one of the following:
 * - A search query
 * - A saved search ID
 * - A list of discount code IDs
 *
 * For example, you can deactivate discounts for all codes that match a search criteria, or deactivate a predefined set of discount codes.
 */
discountCodeBulkDeactivate: { baseType: DiscountCodeBulkDeactivatePayload, arguments: { ids?: Array<BaseTypes.ID> | null; savedSearchId?: BaseTypes.ID | null; search?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes multiple [code-based discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) asynchronously using one of the following:
 * - A search query
 * - A saved search ID
 * - A list of discount code IDs
 *
 * For example, you can delete discounts for all codes that match a search criteria, or delete a predefined set of discount codes.
 */
discountCodeBulkDelete: { baseType: DiscountCodeBulkDeletePayload, arguments: { ids?: Array<BaseTypes.ID> | null; savedSearchId?: BaseTypes.ID | null; search?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a
 * [buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that's applied on a cart and at checkout when a customer enters a code.
 *
 * > Note:
 * > To create discounts that are automatically applied on a cart and at checkout, use the
 * [`discountAutomaticBxgyCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBxgyCreate)
 * mutation.
 */
discountCodeBxgyCreate: { baseType: DiscountCodeBxgyCreatePayload, arguments: { bxgyCodeDiscount: InputTypes.DiscountCodeBxgyInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a
 * [buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that's applied on a cart and at checkout when a customer enters a code.
 *
 * > Note:
 * > To update discounts that are automatically applied on a cart and at checkout, use the
 * [`discountAutomaticBxgyUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBxgyUpdate)
 * mutation.
 */
discountCodeBxgyUpdate: { baseType: DiscountCodeBxgyUpdatePayload, arguments: { bxgyCodeDiscount: InputTypes.DiscountCodeBxgyInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deactivates a code discount.
 */
discountCodeDeactivate: { baseType: DiscountCodeDeactivatePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a
 * [code discount](https://help.shopify.com/manual/discounts/discount-types#discount-codes).
 */
discountCodeDelete: { baseType: DiscountCodeDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates an [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping) that's applied on a cart and at checkout when a customer enters a code.
 *
 * > Note:
 * > To create discounts that are automatically applied on a cart and at checkout, use the [`discountAutomaticFreeShippingCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticFreeShippingCreate) mutation.
 */
discountCodeFreeShippingCreate: { baseType: DiscountCodeFreeShippingCreatePayload, arguments: { freeShippingCodeDiscount: InputTypes.DiscountCodeFreeShippingInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping) that's applied on a cart and at checkout when a customer enters a code.
 *
 * > Note:
 * > To update a free shipping discount that's automatically applied on a cart and at checkout, use the [`discountAutomaticFreeShippingUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticFreeShippingUpdate) mutation.
 */
discountCodeFreeShippingUpdate: { baseType: DiscountCodeFreeShippingUpdatePayload, arguments: { freeShippingCodeDiscount: InputTypes.DiscountCodeFreeShippingInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously delete
 * [discount codes](https://help.shopify.com/manual/discounts/discount-types#discount-codes)
 * in bulk that customers can use to redeem a discount.
 */
discountCodeRedeemCodeBulkDelete: { baseType: DiscountCodeRedeemCodeBulkDeletePayload, arguments: { discountId: BaseTypes.ID; ids?: Array<BaseTypes.ID> | null; savedSearchId?: BaseTypes.ID | null; search?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously add
 * [discount codes](https://help.shopify.com/manual/discounts/discount-types#discount-codes)
 * in bulk that customers can use to redeem a discount. You can use the `discountRedeemCodeBulkAdd` mutation
 * to automate the distribution of discount codes through emails or other
 * marketing channels.
 */
discountRedeemCodeBulkAdd: { baseType: DiscountRedeemCodeBulkAddPayload, arguments: { codes: Array<InputTypes.DiscountRedeemCodeInput>; discountId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a dispute evidence.
 */
disputeEvidenceUpdate: { baseType: DisputeEvidenceUpdatePayload, arguments: { id: BaseTypes.ID; input: InputTypes.ShopifyPaymentsDisputeEvidenceUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds tags to multiple draft orders.
 */
draftOrderBulkAddTags: { baseType: DraftOrderBulkAddTagsPayload, arguments: { ids?: Array<BaseTypes.ID> | null; savedSearchId?: BaseTypes.ID | null; search?: BaseTypes.String | null; tags: Array<BaseTypes.String> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes multiple draft orders.
 */
draftOrderBulkDelete: { baseType: DraftOrderBulkDeletePayload, arguments: { ids?: Array<BaseTypes.ID> | null; savedSearchId?: BaseTypes.ID | null; search?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes tags from multiple draft orders.
 */
draftOrderBulkRemoveTags: { baseType: DraftOrderBulkRemoveTagsPayload, arguments: { ids?: Array<BaseTypes.ID> | null; savedSearchId?: BaseTypes.ID | null; search?: BaseTypes.String | null; tags: Array<BaseTypes.String> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Calculates the properties of a draft order. Useful for determining information
 * such as total taxes or price without actually creating a draft order.
 */
draftOrderCalculate: { baseType: DraftOrderCalculatePayload, arguments: { input: InputTypes.DraftOrderInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Completes a draft order and creates an order.
 */
draftOrderComplete: { baseType: DraftOrderCompletePayload, arguments: { id: BaseTypes.ID; paymentGatewayId?: BaseTypes.ID | null; sourceName?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a draft order.
 */
draftOrderCreate: { baseType: DraftOrderCreatePayload, arguments: { input: InputTypes.DraftOrderInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a draft order from order.
 */
draftOrderCreateFromOrder: { baseType: DraftOrderCreateFromOrderPayload, arguments: { orderId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a merchant checkout for the given draft order.
 */
draftOrderCreateMerchantCheckout: { baseType: DraftOrderCreateMerchantCheckoutPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a draft order.
 */
draftOrderDelete: { baseType: DraftOrderDeletePayload, arguments: { input: InputTypes.DraftOrderDeleteInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Duplicates a draft order.
 */
draftOrderDuplicate: { baseType: DraftOrderDuplicatePayload, arguments: { id?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Previews a draft order invoice email.
 */
draftOrderInvoicePreview: { baseType: DraftOrderInvoicePreviewPayload, arguments: { email?: InputTypes.EmailInput | null; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Sends an email invoice for a draft order.
 */
draftOrderInvoiceSend: { baseType: DraftOrderInvoiceSendPayload, arguments: { email?: InputTypes.EmailInput | null; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a draft order.
 *
 * If a checkout has been started for a draft order, any update to the draft will unlink the checkout. Checkouts
 * are created but not immediately completed when opening the merchant credit card modal in the admin, and when a
 * buyer opens the invoice URL. This is usually fine, but there is an edge case where a checkout is in progress
 * and the draft is updated before the checkout completes. This will not interfere with the checkout and order
 * creation, but if the link from draft to checkout is broken the draft will remain open even after the order is
 * created.
 */
draftOrderUpdate: { baseType: DraftOrderUpdatePayload, arguments: { id: BaseTypes.ID; input: InputTypes.DraftOrderInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates the server pixel to connect to an EventBridge endpoint.
 * Running this mutation deletes any previous subscriptions for the server pixel.
 */
eventBridgeServerPixelUpdate: { baseType: EventBridgeServerPixelUpdatePayload, arguments: { arn: BaseTypes.ARN }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new Amazon EventBridge webhook subscription.
 *
 * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
 */
eventBridgeWebhookSubscriptionCreate: { baseType: EventBridgeWebhookSubscriptionCreatePayload, arguments: { topic: BaseTypes.WebhookSubscriptionTopic; webhookSubscription: InputTypes.EventBridgeWebhookSubscriptionInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an Amazon EventBridge webhook subscription.
 *
 * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
 */
eventBridgeWebhookSubscriptionUpdate: { baseType: EventBridgeWebhookSubscriptionUpdatePayload, arguments: { id: BaseTypes.ID; webhookSubscription: InputTypes.EventBridgeWebhookSubscriptionInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Acknowledges file update failure by resetting FAILED status to READY and clearing any media errors.
 */
fileAcknowledgeUpdateFailed: { baseType: FileAcknowledgeUpdateFailedPayload, arguments: { fileIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates file assets using an external URL or for files that were previously uploaded using the
 * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
 * These files are added to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin.
 *
 * Files are processed asynchronously. Some data is not available until processing is completed.
 * Check [fileStatus](https://shopify.dev/api/admin-graphql/latest/interfaces/File#field-file-filestatus)
 * to know when the files are READY or FAILED. See the [FileStatus](https://shopify.dev/api/admin-graphql/latest/enums/filestatus)
 * for the complete set of possible fileStatus values.
 *
 * To get a list of all files, use the [files query](https://shopify.dev/api/admin-graphql/latest/queries/files).
 */
fileCreate: { baseType: FileCreatePayload, arguments: { files: Array<InputTypes.FileCreateInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes existing file assets that were uploaded to Shopify.
 */
fileDelete: { baseType: FileDeletePayload, arguments: { fileIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an existing file asset that was uploaded to Shopify.
 */
fileUpdate: { baseType: FileUpdatePayload, arguments: { files: Array<InputTypes.FileUpdateInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Generates a signature for a Flow action payload.
 */
flowGenerateSignature: { baseType: FlowGenerateSignaturePayload, arguments: { id: BaseTypes.ID; payload: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Triggers any workflows that begin with the trigger specified in the request body. To learn more, refer to [_Create Shopify Flow triggers_](https://shopify.dev/apps/flow/triggers).
 */
flowTriggerReceive: { baseType: FlowTriggerReceivePayload, arguments: { handle?: BaseTypes.String | null; payload?: BaseTypes.JSON | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Cancels a fulfillment.
 */
fulfillmentCancel: { baseType: FulfillmentCancelPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a fulfillment constraint rule and its metafield.
 */
fulfillmentConstraintRuleCreate: { baseType: FulfillmentConstraintRuleCreatePayload, arguments: { functionId: BaseTypes.String; metafields?: Array<InputTypes.MetafieldInput> | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a fulfillment constraint rule and its metafields.
 */
fulfillmentConstraintRuleDelete: { baseType: FulfillmentConstraintRuleDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a fulfillment for one or many fulfillment orders.
 * The fulfillment orders are associated with the same order and are assigned to the same location.
 */
fulfillmentCreateV2: { baseType: FulfillmentCreateV2Payload, arguments: { fulfillment: InputTypes.FulfillmentV2Input; message?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a fulfillment event for a specified fulfillment.
 */
fulfillmentEventCreate: { baseType: FulfillmentEventCreatePayload, arguments: { fulfillmentEvent: InputTypes.FulfillmentEventInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Accept a cancellation request sent to a fulfillment service for a fulfillment order.
 */
fulfillmentOrderAcceptCancellationRequest: { baseType: FulfillmentOrderAcceptCancellationRequestPayload, arguments: { id: BaseTypes.ID; message?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Accepts a fulfillment request sent to a fulfillment service for a fulfillment order.
 */
fulfillmentOrderAcceptFulfillmentRequest: { baseType: FulfillmentOrderAcceptFulfillmentRequestPayload, arguments: { id: BaseTypes.ID; message?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Marks a fulfillment order as canceled.
 */
fulfillmentOrderCancel: { baseType: FulfillmentOrderCancelPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Marks an in-progress fulfillment order as incomplete,
 * indicating the fulfillment service is unable to ship any remaining items,
 * and closes the fulfillment request.
 *
 * This mutation can only be called for fulfillment orders that meet the following criteria:
 * - Assigned to a fulfillment service location,
 * - The fulfillment request has been accepted,
 * - The fulfillment order status is `IN_PROGRESS`.
 *
 * This mutation can only be called by the fulfillment service app that accepted the fulfillment request.
 * Calling this mutation returns the control of the fulfillment order to the merchant, allowing them to
 * move the fulfillment order line items to another location and fulfill from there,
 * remove and refund the line items, or to request fulfillment from the same fulfillment service again.
 *
 * Closing a fulfillment order is explained in
 * [the fulfillment service guide](https://shopify.dev/apps/build/orders-fulfillment/fulfillment-service-apps/build-for-fulfillment-services#step-7-optional-close-a-fulfillment-order).
 */
fulfillmentOrderClose: { baseType: FulfillmentOrderClosePayload, arguments: { id: BaseTypes.ID; message?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Applies a fulfillment hold on a fulfillment order.
 *
 * As of the
 * [2025-01 API version](https://shopify.dev/changelog/apply-multiple-holds-to-a-single-fulfillment-order),
 * the mutation can be successfully executed on fulfillment orders that are already on hold.
 * To place multiple holds on a fulfillment order, apps need to supply the
 * [handle](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentHold#field-handle)
 * field. Each app can place up to
 * 10 active holds
 * per fulfillment order. If an app attempts to place more than this, the mutation will return
 * [a user error indicating that the limit has been reached](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderHoldUserErrorCode#value-fulfillmentorderholdlimitreached).
 * The app would need to release one of its existing holds before being able to apply a new one.
 */
fulfillmentOrderHold: { baseType: FulfillmentOrderHoldPayload, arguments: { fulfillmentHold: InputTypes.FulfillmentOrderHoldInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Mark line items associated with a fulfillment order as being ready for pickup by a customer.
 *
 * Sends a Ready For Pickup notification to the customer to let them know that their order is ready
 * to be picked up.
 */
fulfillmentOrderLineItemsPreparedForPickup: { baseType: FulfillmentOrderLineItemsPreparedForPickupPayload, arguments: { input: InputTypes.FulfillmentOrderLineItemsPreparedForPickupInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Merges a set or multiple sets of fulfillment orders together into one based on
 * line item inputs and quantities.
 */
fulfillmentOrderMerge: { baseType: FulfillmentOrderMergePayload, arguments: { fulfillmentOrderMergeInputs: Array<InputTypes.FulfillmentOrderMergeInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.
 *
 * Moving a fulfillment order will fail in the following circumstances:
 *
 * * The fulfillment order is closed.
 * * The destination location has never stocked the requested inventory item.
 * * The API client doesn't have the correct permissions.
 *
 * Line items which have already been fulfilled can't be re-assigned
 * and will always remain assigned to the original location.
 *
 * You can't change the assigned location while a fulfillment order has a
 * [request status](https://shopify.dev/docs/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus)
 * of `SUBMITTED`, `ACCEPTED`, `CANCELLATION_REQUESTED`, or `CANCELLATION_REJECTED`.
 * These request statuses mean that a fulfillment order is awaiting action by a fulfillment service
 * and can't be re-assigned without first having the fulfillment service accept a cancellation request.
 * This behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.
 *
 * ### How re-assigning line items affects fulfillment orders
 *
 * **First scenario:** Re-assign all line items belonging to a fulfillment order to a new location.
 *
 * In this case, the
 * [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)
 * of the original fulfillment order will be updated to the new location.
 *
 * **Second scenario:** Re-assign a subset of the line items belonging to a fulfillment order to a new location.
 * You can specify a subset of line items using the `fulfillmentOrderLineItems` parameter
 * (available as of the `2023-04` API version),
 * or specify that the original fulfillment order contains line items which have already been fulfilled.
 *
 * If the new location is already assigned to another active fulfillment order, on the same order, then
 * a new fulfillment order is created. The existing fulfillment order is closed and line items are recreated
 * in a new fulfillment order.
 */
fulfillmentOrderMove: { baseType: FulfillmentOrderMovePayload, arguments: { fulfillmentOrderLineItems?: Array<InputTypes.FulfillmentOrderLineItemInput> | null; id: BaseTypes.ID; newLocationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Marks a scheduled fulfillment order as open.
 */
fulfillmentOrderOpen: { baseType: FulfillmentOrderOpenPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Rejects a cancellation request sent to a fulfillment service for a fulfillment order.
 */
fulfillmentOrderRejectCancellationRequest: { baseType: FulfillmentOrderRejectCancellationRequestPayload, arguments: { id: BaseTypes.ID; message?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Rejects a fulfillment request sent to a fulfillment service for a fulfillment order.
 */
fulfillmentOrderRejectFulfillmentRequest: { baseType: FulfillmentOrderRejectFulfillmentRequestPayload, arguments: { id: BaseTypes.ID; lineItems?: Array<InputTypes.IncomingRequestLineItemInput> | null; message?: BaseTypes.String | null; reason?: BaseTypes.FulfillmentOrderRejectionReason | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Releases the fulfillment hold on a fulfillment order.
 */
fulfillmentOrderReleaseHold: { baseType: FulfillmentOrderReleaseHoldPayload, arguments: { externalId?: BaseTypes.String | null; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Reschedules a scheduled fulfillment order.
 *
 * Updates the value of the `fulfillAt` field on a scheduled fulfillment order.
 *
 * The fulfillment order will be marked as ready for fulfillment at this date and time.
 */
fulfillmentOrderReschedule: { baseType: FulfillmentOrderReschedulePayload, arguments: { fulfillAt: BaseTypes.DateTime; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Splits a fulfillment order or orders based on line item inputs and quantities.
 */
fulfillmentOrderSplit: { baseType: FulfillmentOrderSplitPayload, arguments: { fulfillmentOrderSplits: Array<InputTypes.FulfillmentOrderSplitInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Sends a cancellation request to the fulfillment service of a fulfillment order.
 */
fulfillmentOrderSubmitCancellationRequest: { baseType: FulfillmentOrderSubmitCancellationRequestPayload, arguments: { id: BaseTypes.ID; message?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Sends a fulfillment request to the fulfillment service of a fulfillment order.
 */
fulfillmentOrderSubmitFulfillmentRequest: { baseType: FulfillmentOrderSubmitFulfillmentRequestPayload, arguments: { fulfillmentOrderLineItems?: Array<InputTypes.FulfillmentOrderLineItemInput> | null; id: BaseTypes.ID; message?: BaseTypes.String | null; notifyCustomer?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Releases the fulfillment holds on a list of fulfillment orders.
 */
fulfillmentOrdersReleaseHolds: { baseType: FulfillmentOrdersReleaseHoldsPayload, arguments: { externalId?: BaseTypes.String | null; ids: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Sets the latest date and time by which the fulfillment orders need to be fulfilled.
 */
fulfillmentOrdersSetFulfillmentDeadline: { baseType: FulfillmentOrdersSetFulfillmentDeadlinePayload, arguments: { fulfillmentDeadline: BaseTypes.DateTime; fulfillmentOrderIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a fulfillment service.
 *
 * ## Fulfillment service location
 *
 * When creating a fulfillment service, a new location will be automatically created on the shop
 * and will be associated with this fulfillment service.
 * This location will be named after the fulfillment service and inherit the shop's address.
 *
 * If you are using API version `2023-10` or later, and you need to specify custom attributes for the fulfillment service location
 * (for example, to change its address to a country different from the shop's country),
 * use the
 * [LocationEdit](https://shopify.dev/api/admin-graphql/latest/mutations/locationEdit)
 * mutation after creating the fulfillment service.
 */
fulfillmentServiceCreate: { baseType: FulfillmentServiceCreatePayload, arguments: { callbackUrl: BaseTypes.URL; inventoryManagement?: BaseTypes.Boolean | null; name: BaseTypes.String; trackingSupport?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a fulfillment service.
 */
fulfillmentServiceDelete: { baseType: FulfillmentServiceDeletePayload, arguments: { destinationLocationId?: BaseTypes.ID | null; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a fulfillment service.
 *
 * If you are using API version `2023-10` or later,
 * and you need to update the location managed by the fulfillment service
 * (for example, to change the address of a fulfillment service),
 * use the
 * [LocationEdit](https://shopify.dev/api/admin-graphql/latest/mutations/locationEdit)
 * mutation.
 */
fulfillmentServiceUpdate: { baseType: FulfillmentServiceUpdatePayload, arguments: { callbackUrl?: BaseTypes.URL | null; id: BaseTypes.ID; inventoryManagement?: BaseTypes.Boolean | null; name?: BaseTypes.String | null; trackingSupport?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates tracking information for a fulfillment.
 */
fulfillmentTrackingInfoUpdateV2: { baseType: FulfillmentTrackingInfoUpdateV2Payload, arguments: { fulfillmentId: BaseTypes.ID; notifyCustomer?: BaseTypes.Boolean | null; trackingInfoInput: InputTypes.FulfillmentTrackingInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create a gift card.
 */
giftCardCreate: { baseType: GiftCardCreatePayload, arguments: { input: InputTypes.GiftCardCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Disable a gift card. A disabled gift card cannot be used by a customer. A disabled gift card cannot be re-enabled.
 */
giftCardDisable: { baseType: GiftCardDisablePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Update a gift card.
 */
giftCardUpdate: { baseType: GiftCardUpdatePayload, arguments: { id: BaseTypes.ID; input: InputTypes.GiftCardUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activate an inventory item at a location.
 */
inventoryActivate: { baseType: InventoryActivatePayload, arguments: { available?: BaseTypes.Int | null; inventoryItemId: BaseTypes.ID; locationId: BaseTypes.ID; onHand?: BaseTypes.Int | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Apply changes to inventory quantities.
 */
inventoryAdjustQuantities: { baseType: InventoryAdjustQuantitiesPayload, arguments: { input: InputTypes.InventoryAdjustQuantitiesInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Modify the activation status of an inventory item at locations. Activating an inventory item at a particular location allows that location to stock that inventory item. Deactivating an inventory item at a location removes the inventory item's quantities and turns off the inventory item from that location.
 */
inventoryBulkToggleActivation: { baseType: InventoryBulkToggleActivationPayload, arguments: { inventoryItemId: BaseTypes.ID; inventoryItemUpdates: Array<InputTypes.InventoryBulkToggleActivationInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes an inventory item's quantities from a location, and turns off inventory at the location.
 */
inventoryDeactivate: { baseType: InventoryDeactivatePayload, arguments: { inventoryLevelId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an inventory item.
 */
inventoryItemUpdate: { baseType: InventoryItemUpdatePayload, arguments: { id: BaseTypes.ID; input: InputTypes.InventoryItemInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Moves inventory between inventory quantity names at a single location.
 */
inventoryMoveQuantities: { baseType: InventoryMoveQuantitiesPayload, arguments: { input: InputTypes.InventoryMoveQuantitiesInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Set inventory on-hand quantities using absolute values.
 */
inventorySetOnHandQuantities: { baseType: InventorySetOnHandQuantitiesPayload, arguments: { input: InputTypes.InventorySetOnHandQuantitiesInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Set quantities of specified name using absolute values. This mutation supports compare-and-set functionality to handle
 * concurrent requests properly. If `ignoreCompareQuantity` is not set to true,
 * the mutation will only update the quantity if the persisted quantity matches the `compareQuantity` value.
 * If the `compareQuantity` value does not match the persisted value, the mutation will return an error. In order to opt out
 * of the `compareQuantity` check, the `ignoreCompareQuantity` argument can be set to true.
 *
 * > Note:
 * > Only use this mutation if calling on behalf of a system that acts as the source of truth for inventory quantities,
 * > otherwise please consider using the [inventoryAdjustQuantities](https://shopify.dev/api/admin-graphql/latest/mutations/inventoryAdjustQuantities) mutation.
 * >
 * >
 * > Opting out of the `compareQuantity` check can lead to inaccurate inventory quantities if multiple requests are made concurrently.
 * > It is recommended to always include the `compareQuantity` value to ensure the accuracy of the inventory quantities and to opt out
 * > of the check using `ignoreCompareQuantity` only when necessary.
 */
inventorySetQuantities: { baseType: InventorySetQuantitiesPayload, arguments: { input: InputTypes.InventorySetQuantitiesInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Set up scheduled changes of inventory items.
 */
inventorySetScheduledChanges: { baseType: InventorySetScheduledChangesPayload, arguments: { input: InputTypes.InventorySetScheduledChangesInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activates a location so that you can stock inventory at the location. Refer to the
 * [`isActive`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Location#field-isactive) and
 * [`activatable`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Location#field-activatable)
 * fields on the `Location` object.
 */
locationActivate: { baseType: LocationActivatePayload, arguments: { locationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds a new location.
 */
locationAdd: { baseType: LocationAddPayload, arguments: { input: InputTypes.LocationAddInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deactivates a location and moves inventory, pending orders, and moving transfers to a destination location.
 */
locationDeactivate: { baseType: LocationDeactivatePayload, arguments: { destinationLocationId?: BaseTypes.ID | null; locationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a location.
 */
locationDelete: { baseType: LocationDeletePayload, arguments: { locationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Edits an existing location.
 *
 * [As of the 2023-10 API version](https://shopify.dev/changelog/apps-can-now-change-the-name-and-address-of-their-fulfillment-service-locations), apps can change the name and address of their fulfillment service locations.
 */
locationEdit: { baseType: LocationEditPayload, arguments: { id: BaseTypes.ID; input: InputTypes.LocationEditInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Disables local pickup for a location.
 */
locationLocalPickupDisable: { baseType: LocationLocalPickupDisablePayload, arguments: { locationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Enables local pickup for a location.
 */
locationLocalPickupEnable: { baseType: LocationLocalPickupEnablePayload, arguments: { localPickupSettings: InputTypes.DeliveryLocationLocalPickupEnableInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new market.
 */
marketCreate: { baseType: MarketCreatePayload, arguments: { input: InputTypes.MarketCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates currency settings of a market.
 */
marketCurrencySettingsUpdate: { baseType: MarketCurrencySettingsUpdatePayload, arguments: { input: InputTypes.MarketCurrencySettingsUpdateInput; marketId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a market definition.
 */
marketDelete: { baseType: MarketDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates or updates market localizations.
 */
marketLocalizationsRegister: { baseType: MarketLocalizationsRegisterPayload, arguments: { marketLocalizations: Array<InputTypes.MarketLocalizationRegisterInput>; resourceId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes market localizations.
 */
marketLocalizationsRemove: { baseType: MarketLocalizationsRemovePayload, arguments: { marketIds: Array<BaseTypes.ID>; marketLocalizationKeys: Array<BaseTypes.String>; resourceId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a market region.
 */
marketRegionDelete: { baseType: MarketRegionDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates regions that belong to an existing market.
 */
marketRegionsCreate: { baseType: MarketRegionsCreatePayload, arguments: { marketId: BaseTypes.ID; regions: Array<InputTypes.MarketRegionCreateInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a list of market regions.
 */
marketRegionsDelete: { baseType: MarketRegionsDeletePayload, arguments: { ids: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates the properties of a market.
 */
marketUpdate: { baseType: MarketUpdatePayload, arguments: { id: BaseTypes.ID; input: InputTypes.MarketUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a web presence for a market.
 */
marketWebPresenceCreate: { baseType: MarketWebPresenceCreatePayload, arguments: { marketId: BaseTypes.ID; webPresence: InputTypes.MarketWebPresenceCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a market web presence.
 */
marketWebPresenceDelete: { baseType: MarketWebPresenceDeletePayload, arguments: { webPresenceId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a market web presence.
 */
marketWebPresenceUpdate: { baseType: MarketWebPresenceUpdatePayload, arguments: { webPresence: InputTypes.MarketWebPresenceUpdateInput; webPresenceId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes all external marketing activities. Deletion is performed by a background job, as it may take a bit of time to complete if a large number of activities are to be deleted. Attempting to create or modify external activities before the job has completed will result in the create/update/upsert mutation returning an error.
 */
marketingActivitiesDeleteAllExternal: { baseType: MarketingActivitiesDeleteAllExternalPayload, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create new marketing activity.
 */
marketingActivityCreate: { baseType: MarketingActivityCreatePayload, arguments: { input: InputTypes.MarketingActivityCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new external marketing activity.
 */
marketingActivityCreateExternal: { baseType: MarketingActivityCreateExternalPayload, arguments: { input: InputTypes.MarketingActivityCreateExternalInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes an external marketing activity.
 */
marketingActivityDeleteExternal: { baseType: MarketingActivityDeleteExternalPayload, arguments: { marketingActivityId?: BaseTypes.ID | null; remoteId?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a marketing activity with the latest information.
 */
marketingActivityUpdate: { baseType: MarketingActivityUpdatePayload, arguments: { input: InputTypes.MarketingActivityUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Update an external marketing activity.
 */
marketingActivityUpdateExternal: { baseType: MarketingActivityUpdateExternalPayload, arguments: { input: InputTypes.MarketingActivityUpdateExternalInput; marketingActivityId?: BaseTypes.ID | null; remoteId?: BaseTypes.String | null; utm?: InputTypes.UTMInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new external marketing activity or updates an existing one. When optional fields are absent or null, associated information will be removed from an existing marketing activity.
 */
marketingActivityUpsertExternal: { baseType: MarketingActivityUpsertExternalPayload, arguments: { input: InputTypes.MarketingActivityUpsertExternalInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new marketing engagement for a marketing activity or a marketing channel.
 */
marketingEngagementCreate: { baseType: MarketingEngagementCreatePayload, arguments: { channelHandle?: BaseTypes.String | null; marketingActivityId?: BaseTypes.ID | null; marketingEngagement: InputTypes.MarketingEngagementInput; remoteId?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Marks channel-level engagement data such that it no longer appears in reports.
 * Activity-level data cannot be deleted directly, instead the MarketingActivity itself should be deleted to
 * hide it from reports.
 */
marketingEngagementsDelete: { baseType: MarketingEngagementsDeletePayload, arguments: { channelHandle?: BaseTypes.String | null; deleteEngagementsForAllChannels?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a menu.
 */
menuCreate: { baseType: MenuCreatePayload, arguments: { handle: BaseTypes.String; items: Array<InputTypes.MenuItemCreateInput>; title: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a menu.
 */
menuDelete: { baseType: MenuDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a menu.
 */
menuUpdate: { baseType: MenuUpdatePayload, arguments: { handle?: BaseTypes.String | null; id: BaseTypes.ID; items: Array<InputTypes.MenuItemUpdateInput>; title: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a metafield definition. Any metafields existing under the same owner type, namespace, and key will be
 * checked against this definition and will have their type updated accordingly. For metafields that are not
 * valid, they will remain unchanged but any attempts to update them must align with this definition.
 */
metafieldDefinitionCreate: { baseType: MetafieldDefinitionCreatePayload, arguments: { definition: InputTypes.MetafieldDefinitionInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Delete a metafield definition.
 * Optionally deletes all associated metafields asynchronously when specified.
 */
metafieldDefinitionDelete: { baseType: MetafieldDefinitionDeletePayload, arguments: { deleteAllAssociatedMetafields?: BaseTypes.Boolean | null; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.
 * The order of your pinned metafield definitions determines the order in which your metafields are displayed
 * on the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.
 */
metafieldDefinitionPin: { baseType: MetafieldDefinitionPinPayload, arguments: { definitionId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.
 * The order of your pinned metafield definitions determines the order in which your metafields are displayed
 * on the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.
 */
metafieldDefinitionUnpin: { baseType: MetafieldDefinitionUnpinPayload, arguments: { definitionId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a metafield definition.
 */
metafieldDefinitionUpdate: { baseType: MetafieldDefinitionUpdatePayload, arguments: { definition: InputTypes.MetafieldDefinitionUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a metafield.
 */
metafieldDelete: { baseType: MetafieldDeletePayload, arguments: { input: InputTypes.MetafieldDeleteInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a `MetafieldStorefrontVisibility` record to make all metafields that belong to the specified resource
 * and have the established `namespace` and `key` combination visible in the Storefront API.
 */
metafieldStorefrontVisibilityCreate: { baseType: MetafieldStorefrontVisibilityCreatePayload, arguments: { input: InputTypes.MetafieldStorefrontVisibilityInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a `MetafieldStorefrontVisibility` record. All metafields that belongs to the specified record will no
 * longer be visible in the Storefront API.
 */
metafieldStorefrontVisibilityDelete: { baseType: MetafieldStorefrontVisibilityDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes multiple metafields in bulk.
 */
metafieldsDelete: { baseType: MetafieldsDeletePayload, arguments: { metafields: Array<InputTypes.MetafieldIdentifierInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Sets metafield values. Metafield values will be set regardless if they were previously created or not.
 *
 * Allows a maximum of 25 metafields to be set at a time.
 *
 * This operation is atomic, meaning no changes are persisted if an error is encountered.
 *
 * As of `2024-07`, this operation supports compare-and-set functionality to better handle concurrent requests.
 * If `compareDigest` is set for any metafield, the mutation will only set that metafield if the persisted metafield value matches the digest used on `compareDigest`.
 * If the metafield doesn't exist yet, but you want to guarantee that the operation will run in a safe manner, set `compareDigest` to `null`.
 * The `compareDigest` value can be acquired by querying the metafield object and selecting `compareDigest` as a field.
 * If the `compareDigest` value does not match the digest for the persisted value, the mutation will return an error.
 * You can opt out of write guarantees by not sending `compareDigest` in the request.
 */
metafieldsSet: { baseType: MetafieldsSetPayload, arguments: { metafields: Array<InputTypes.MetafieldsSetInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously delete metaobjects and their associated metafields in bulk.
 */
metaobjectBulkDelete: { baseType: MetaobjectBulkDeletePayload, arguments: { where: InputTypes.MetaobjectBulkDeleteWhereCondition }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new metaobject.
 */
metaobjectCreate: { baseType: MetaobjectCreatePayload, arguments: { metaobject: InputTypes.MetaobjectCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new metaobject definition.
 */
metaobjectDefinitionCreate: { baseType: MetaobjectDefinitionCreatePayload, arguments: { definition: InputTypes.MetaobjectDefinitionCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes the specified metaobject definition.
 * Also deletes all related metafield definitions, metaobjects, and metafields asynchronously.
 */
metaobjectDefinitionDelete: { baseType: MetaobjectDefinitionDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a metaobject definition with new settings and metafield definitions.
 */
metaobjectDefinitionUpdate: { baseType: MetaobjectDefinitionUpdatePayload, arguments: { definition: InputTypes.MetaobjectDefinitionUpdateInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes the specified metaobject and its associated metafields.
 */
metaobjectDelete: { baseType: MetaobjectDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an existing metaobject.
 */
metaobjectUpdate: { baseType: MetaobjectUpdatePayload, arguments: { id: BaseTypes.ID; metaobject: InputTypes.MetaobjectUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Retrieves a metaobject by handle, then updates it with the provided input values.
 * If no matching metaobject is found, a new metaobject is created with the provided input values.
 */
metaobjectUpsert: { baseType: MetaobjectUpsertPayload, arguments: { handle: InputTypes.MetaobjectHandleInput; metaobject: InputTypes.MetaobjectUpsertInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create a mobile platform application.
 */
mobilePlatformApplicationCreate: { baseType: MobilePlatformApplicationCreatePayload, arguments: { input: InputTypes.MobilePlatformApplicationCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Delete a mobile platform application.
 */
mobilePlatformApplicationDelete: { baseType: MobilePlatformApplicationDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Update a mobile platform application.
 */
mobilePlatformApplicationUpdate: { baseType: MobilePlatformApplicationUpdatePayload, arguments: { id: BaseTypes.ID; input: InputTypes.MobilePlatformApplicationUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Cancels an order.
 */
orderCancel: { baseType: OrderCancelPayload, arguments: { notifyCustomer?: BaseTypes.Boolean | null; orderId: BaseTypes.ID; reason: BaseTypes.OrderCancelReason; refund: BaseTypes.Boolean; restock: BaseTypes.Boolean; staffNote?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Captures payment for an authorized transaction on an order. An order can only be captured if it has a successful authorization transaction. Capturing an order will claim the money reserved by the authorization. orderCapture can be used to capture multiple times as long as the OrderTransaction is multi-capturable. To capture a partial payment, the included `amount` value should be less than the total order amount. Multi-capture is available only to stores on a Shopify Plus plan.
 */
orderCapture: { baseType: OrderCapturePayload, arguments: { input: InputTypes.OrderCaptureInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Closes an open order.
 */
orderClose: { baseType: OrderClosePayload, arguments: { input: InputTypes.OrderCloseInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a payment for an order by mandate.
 */
orderCreateMandatePayment: { baseType: OrderCreateMandatePaymentPayload, arguments: { amount?: InputTypes.MoneyInput | null; autoCapture?: BaseTypes.Boolean | null; id: BaseTypes.ID; idempotencyKey: BaseTypes.String; mandateId: BaseTypes.ID; paymentScheduleId?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes an order. For more information on which orders can be deleted, refer to [Delete an order](https://help.shopify.com/manual/orders/cancel-delete-order#delete-an-order).
 */
orderDelete: { baseType: OrderDeletePayload, arguments: { orderId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds a custom line item to an existing order. For example, you could add a gift wrapping service as a [custom line item](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing#add-a-custom-line-item). To learn how to edit existing orders, refer to [Edit an existing order with Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 */
orderEditAddCustomItem: { baseType: OrderEditAddCustomItemPayload, arguments: { id: BaseTypes.ID; locationId?: BaseTypes.ID | null; price: InputTypes.MoneyInput; quantity: BaseTypes.Int; requiresShipping?: BaseTypes.Boolean | null; taxable?: BaseTypes.Boolean | null; title: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds a discount to a line item on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 */
orderEditAddLineItemDiscount: { baseType: OrderEditAddLineItemDiscountPayload, arguments: { discount: InputTypes.OrderEditAppliedDiscountInput; id: BaseTypes.ID; lineItemId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds a shipping line to an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 */
orderEditAddShippingLine: { baseType: OrderEditAddShippingLinePayload, arguments: { id: BaseTypes.ID; shippingLine: InputTypes.OrderEditAddShippingLineInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds a line item from an existing product variant. As of API version 2025-04, the [orderEditAddVariant](https://shopify.dev/api/admin-graphql/latest/mutations/ordereditaddvariant) API will respect the contextual pricing of the variant.
 */
orderEditAddVariant: { baseType: OrderEditAddVariantPayload, arguments: { allowDuplicates?: BaseTypes.Boolean | null; id: BaseTypes.ID; locationId?: BaseTypes.ID | null; quantity: BaseTypes.Int; variantId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Starts editing an order. Mutations are operating on `OrderEdit`.
 * All order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.
 */
orderEditBegin: { baseType: OrderEditBeginPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Applies and saves staged changes to an order. Mutations are operating on `OrderEdit`.
 * All order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.
 */
orderEditCommit: { baseType: OrderEditCommitPayload, arguments: { id: BaseTypes.ID; notifyCustomer?: BaseTypes.Boolean | null; staffNote?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes a discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 */
orderEditRemoveDiscount: { baseType: OrderEditRemoveDiscountPayload, arguments: { discountApplicationId: BaseTypes.ID; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes a line item discount that was applied as part of an order edit.
 */
orderEditRemoveLineItemDiscount: { baseType: OrderEditRemoveLineItemDiscountPayload, arguments: { discountApplicationId: BaseTypes.ID; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes a shipping line from an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 */
orderEditRemoveShippingLine: { baseType: OrderEditRemoveShippingLinePayload, arguments: { id: BaseTypes.ID; shippingLineId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Sets the quantity of a line item on an order that is being edited. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 */
orderEditSetQuantity: { baseType: OrderEditSetQuantityPayload, arguments: { id: BaseTypes.ID; lineItemId: BaseTypes.ID; quantity: BaseTypes.Int; restock?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a manual line level discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 */
orderEditUpdateDiscount: { baseType: OrderEditUpdateDiscountPayload, arguments: { discount: InputTypes.OrderEditAppliedDiscountInput; discountApplicationId: BaseTypes.ID; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a shipping line on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 */
orderEditUpdateShippingLine: { baseType: OrderEditUpdateShippingLinePayload, arguments: { id: BaseTypes.ID; shippingLine: InputTypes.OrderEditUpdateShippingLineInput; shippingLineId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Sends an email invoice for an order.
 */
orderInvoiceSend: { baseType: OrderInvoiceSendPayload, arguments: { email?: InputTypes.EmailInput | null; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Marks an order as paid. You can only mark an order as paid if it isn't already fully paid.
 */
orderMarkAsPaid: { baseType: OrderMarkAsPaidPayload, arguments: { input: InputTypes.OrderMarkAsPaidInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Opens a closed order.
 */
orderOpen: { baseType: OrderOpenPayload, arguments: { input: InputTypes.OrderOpenInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create a risk assessment for an order.
 */
orderRiskAssessmentCreate: { baseType: OrderRiskAssessmentCreatePayload, arguments: { orderRiskAssessmentInput: InputTypes.OrderRiskAssessmentCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates the fields of an order.
 */
orderUpdate: { baseType: OrderUpdatePayload, arguments: { input: InputTypes.OrderInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activates and deactivates payment customizations.
 */
paymentCustomizationActivation: { baseType: PaymentCustomizationActivationPayload, arguments: { enabled: BaseTypes.Boolean; ids: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a payment customization.
 */
paymentCustomizationCreate: { baseType: PaymentCustomizationCreatePayload, arguments: { paymentCustomization: InputTypes.PaymentCustomizationInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a payment customization.
 */
paymentCustomizationDelete: { baseType: PaymentCustomizationDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a payment customization.
 */
paymentCustomizationUpdate: { baseType: PaymentCustomizationUpdatePayload, arguments: { id: BaseTypes.ID; paymentCustomization: InputTypes.PaymentCustomizationInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Sends an email payment reminder for a payment schedule.
 */
paymentReminderSend: { baseType: PaymentReminderSendPayload, arguments: { paymentScheduleId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create payment terms on an order. To create payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.
 */
paymentTermsCreate: { baseType: PaymentTermsCreatePayload, arguments: { paymentTermsAttributes: InputTypes.PaymentTermsCreateInput; referenceId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Delete payment terms for an order. To delete payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.
 */
paymentTermsDelete: { baseType: PaymentTermsDeletePayload, arguments: { input: InputTypes.PaymentTermsDeleteInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Update payment terms on an order. To update payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.
 */
paymentTermsUpdate: { baseType: PaymentTermsUpdatePayload, arguments: { input: InputTypes.PaymentTermsUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a price list. You can use the `priceListCreate` mutation to create a new price list and associate it with a catalog. This enables you to sell your products with contextual pricing.
 */
priceListCreate: { baseType: PriceListCreatePayload, arguments: { input: InputTypes.PriceListCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a price list. For example, you can delete a price list so that it no longer applies for products in the associated market.
 */
priceListDelete: { baseType: PriceListDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates or updates fixed prices on a price list. You can use the `priceListFixedPricesAdd` mutation to set a fixed price for specific product variants. This lets you change product variant pricing on a per country basis. Any existing fixed price list prices for these variants will be overwritten.
 */
priceListFixedPricesAdd: { baseType: PriceListFixedPricesAddPayload, arguments: { priceListId: BaseTypes.ID; prices: Array<InputTypes.PriceListPriceInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates the fixed prices for all variants for a product on a price list. You can use the `priceListFixedPricesByProductUpdate` mutation to set or remove a fixed price for all variants of a product associated with the price list.
 */
priceListFixedPricesByProductUpdate: { baseType: PriceListFixedPricesByProductUpdatePayload, arguments: { priceListId: BaseTypes.ID; pricesToAdd?: Array<InputTypes.PriceListProductPriceInput> | null; pricesToDeleteByProductIds?: Array<BaseTypes.ID> | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes specific fixed prices from a price list using a product variant ID. You can use the `priceListFixedPricesDelete` mutation to delete a set of fixed prices from a price list. After deleting the set of fixed prices from the price list, the price of each product variant reverts to the original price that was determined by the price list adjustment.
 */
priceListFixedPricesDelete: { baseType: PriceListFixedPricesDeletePayload, arguments: { priceListId: BaseTypes.ID; variantIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates fixed prices on a price list. You can use the `priceListFixedPricesUpdate` mutation to set a fixed price for specific product variants or to delete prices for variants associated with the price list.
 */
priceListFixedPricesUpdate: { baseType: PriceListFixedPricesUpdatePayload, arguments: { priceListId: BaseTypes.ID; pricesToAdd: Array<InputTypes.PriceListPriceInput>; variantIdsToDelete: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a price list.
 * If you modify the currency, then any fixed prices set on the price list will be deleted.
 */
priceListUpdate: { baseType: PriceListUpdatePayload, arguments: { id: BaseTypes.ID; input: InputTypes.PriceListUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activate a price rule.
 */
priceRuleActivate: { baseType: PriceRuleActivatePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create a price rule using the input.
 */
priceRuleCreate: { baseType: PriceRuleCreatePayload, arguments: { priceRule: InputTypes.PriceRuleInput; priceRuleDiscountCode?: InputTypes.PriceRuleDiscountCodeInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deactivate a price rule.
 */
priceRuleDeactivate: { baseType: PriceRuleDeactivatePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Delete a price rule.
 */
priceRuleDelete: { baseType: PriceRuleDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Create a discount code for a price rule.
 */
priceRuleDiscountCodeCreate: { baseType: PriceRuleDiscountCodeCreatePayload, arguments: { code: BaseTypes.String; priceRuleId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Update a discount code for a price rule.
 */
priceRuleDiscountCodeUpdate: { baseType: PriceRuleDiscountCodeUpdatePayload, arguments: { code: BaseTypes.String; priceRuleId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a price rule using its ID and an input.
 */
priceRuleUpdate: { baseType: PriceRuleUpdatePayload, arguments: { id: BaseTypes.ID; priceRule: InputTypes.PriceRuleInput; priceRuleDiscountCode?: InputTypes.PriceRuleDiscountCodeInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a private metafield.
 * Private metafields are automatically deleted when the app that created them is uninstalled.
 */
privateMetafieldDelete: { baseType: PrivateMetafieldDeletePayload, arguments: { input: InputTypes.PrivateMetafieldDeleteInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates or updates a private metafield. Use private metafields when you don't want the metafield data to be accessible by merchants or other apps.
 * Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.
 *
 * An application can create a maximum of 10 private metafields per shop resource.
 */
privateMetafieldUpsert: { baseType: PrivateMetafieldUpsertPayload, arguments: { input: InputTypes.PrivateMetafieldInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Appends images to a product.
 */
productAppendImages: { baseType: ProductAppendImagesPayload, arguments: { input: InputTypes.ProductAppendImagesInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new componentized product.
 */
productBundleCreate: { baseType: ProductBundleCreatePayload, arguments: { input: InputTypes.ProductBundleCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a componentized product.
 */
productBundleUpdate: { baseType: ProductBundleUpdatePayload, arguments: { input: InputTypes.ProductBundleUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Changes the status of a product. This allows you to set the availability of the product across all channels.
 */
productChangeStatus: { baseType: ProductChangeStatusPayload, arguments: { productId: BaseTypes.ID; status: BaseTypes.ProductStatus }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * with attributes such as title, description, and vendor.
 * You can use the `productCreate` mutation to define
 * [options](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption) and
 * [values](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOptionValue)
 * for products with
 * [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant),
 * such as different sizes or colors.
 *
 * To create multiple product variants for a single product and manage prices, use the
 * [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)
 * mutation.
 *
 * To create or update a product in a single request, use the
 * [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet) mutation.
 *
 * Learn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)
 * and [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).
 */
productCreate: { baseType: ProductCreatePayload, arguments: { input: InputTypes.ProductInput; media?: Array<InputTypes.CreateMediaInput> | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates media for a product.
 */
productCreateMedia: { baseType: ProductCreateMediaPayload, arguments: { media: Array<InputTypes.CreateMediaInput>; productId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a product, including all associated variants and media.
 *
 * As of API version `2023-01`, if you need to delete a large product, such as one that has many
 * [variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
 * that are active at several
 * [locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
 * you may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous
 * [ProductDeleteAsync](https://shopify.dev/api/admin-graphql/latest/mutations/productDeleteAsync)
 * mutation.
 */
productDelete: { baseType: ProductDeletePayload, arguments: { input: InputTypes.ProductDeleteInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a product asynchronously, including all associated variants and media.
 */
productDeleteAsync: { baseType: ProductDeleteAsyncPayload, arguments: { productId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes product images from the product.
 */
productDeleteImages: { baseType: ProductDeleteImagesPayload, arguments: { id: BaseTypes.ID; imageIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes media for a product.
 */
productDeleteMedia: { baseType: ProductDeleteMediaPayload, arguments: { mediaIds: Array<BaseTypes.ID>; productId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Duplicates a product.
 *
 * If you need to duplicate a large product, such as one that has many
 * [variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
 * that are active at several
 * [locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
 * you might encounter timeout errors.
 *
 * To avoid these timeout errors, you can instead duplicate the product asynchronously.
 *
 * In API version 2024-10 and higher, include `synchronous: false` argument in this mutation to perform the duplication asynchronously.
 *
 * In API version 2024-07 and lower, use the asynchronous [`ProductDuplicateAsyncV2`](https://shopify.dev/api/admin-graphql/2024-07/mutations/productDuplicateAsyncV2).
 *
 * Metafield values are not duplicated if the unique values capability is enabled.
 */
productDuplicate: { baseType: ProductDuplicatePayload, arguments: { includeImages?: BaseTypes.Boolean | null; includeTranslations?: BaseTypes.Boolean | null; newStatus?: BaseTypes.ProductStatus | null; newTitle: BaseTypes.String; productId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously duplicate a single product.
 *
 * For API version 2024-10 and higher, use the `productDuplicate` mutation with the `synchronous: false` argument instead.
 */
productDuplicateAsyncV2: { baseType: ProductDuplicateAsyncV2Payload, arguments: { input: InputTypes.ProductDuplicateAsyncInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a product feed for a specific publication.
 */
productFeedCreate: { baseType: ProductFeedCreatePayload, arguments: { input?: InputTypes.ProductFeedInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a product feed for a specific publication.
 */
productFeedDelete: { baseType: ProductFeedDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Runs the full product sync for a given shop.
 */
productFullSync: { baseType: ProductFullSyncPayload, arguments: { beforeUpdatedAt?: BaseTypes.DateTime | null; id: BaseTypes.ID; updatedAtSince?: BaseTypes.DateTime | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates an image of a product.
 */
productImageUpdate: { baseType: ProductImageUpdatePayload, arguments: { image: InputTypes.ImageInput; productId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds multiple selling plan groups to a product.
 */
productJoinSellingPlanGroups: { baseType: ProductJoinSellingPlanGroupsPayload, arguments: { id: BaseTypes.ID; sellingPlanGroupIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes multiple groups from a product.
 */
productLeaveSellingPlanGroups: { baseType: ProductLeaveSellingPlanGroupsPayload, arguments: { id: BaseTypes.ID; sellingPlanGroupIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a product option.
 */
productOptionUpdate: { baseType: ProductOptionUpdatePayload, arguments: { option: InputTypes.OptionUpdateInput; optionValuesToAdd?: Array<InputTypes.OptionValueCreateInput> | null; optionValuesToDelete?: Array<BaseTypes.ID> | null; optionValuesToUpdate?: Array<InputTypes.OptionValueUpdateInput> | null; productId: BaseTypes.ID; variantStrategy?: BaseTypes.ProductOptionUpdateVariantStrategy | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates options on a product.
 */
productOptionsCreate: { baseType: ProductOptionsCreatePayload, arguments: { options: Array<InputTypes.OptionCreateInput>; productId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes the specified options.
 */
productOptionsDelete: { baseType: ProductOptionsDeletePayload, arguments: { options: Array<BaseTypes.ID>; productId: BaseTypes.ID; strategy?: BaseTypes.ProductOptionDeleteStrategy | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Reorders options and option values on a product, causing product variants to alter their position.
 *
 * Options order take precedence over option values order. Depending on the existing product variants,
 * some input orders might not be achieved.
 *
 * Example:
 * Existing product variants:
 * ["Red / Small", "Green / Medium", "Blue / Small"].
 *
 * New order:
 * [
 * {
 * name: "Size", values: [{ name: "Small" }, { name: "Medium" }],
 * name: "Color", values: [{ name: "Green" }, { name: "Red" }, { name: "Blue" }]
 * }
 * ].
 *
 * Description:
 * Variants with "Green" value are expected to appear before variants with "Red" and "Blue" values.
 * However, "Size" option appears before "Color".
 *
 * Therefore, output will be:
 * ["Small / "Red", "Small / Blue", "Medium / Green"].
 */
productOptionsReorder: { baseType: ProductOptionsReorderPayload, arguments: { options: Array<InputTypes.OptionReorderInput>; productId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Publishes a product. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can only be published on online stores.
 */
productPublish: { baseType: ProductPublishPayload, arguments: { input: InputTypes.ProductPublishInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously reorders a set of images for a given product.
 */
productReorderImages: { baseType: ProductReorderImagesPayload, arguments: { id: BaseTypes.ID; moves: Array<InputTypes.MoveInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously reorders the media attached to a product.
 */
productReorderMedia: { baseType: ProductReorderMediaPayload, arguments: { id: BaseTypes.ID; moves: Array<InputTypes.MoveInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates or updates a product in a single request.
 *
 * Use this mutation when syncing information from an external data source into Shopify.
 *
 * When using this mutation to update a product, specify that product's `id` in the input.
 *
 * Any list field (e.g.
 * [collections](https://shopify.dev/api/admin-graphql/current/input-objects/ProductSetInput#field-productsetinput-collections),
 * [metafields](https://shopify.dev/api/admin-graphql/current/input-objects/ProductSetInput#field-productsetinput-metafields),
 * [variants](https://shopify.dev/api/admin-graphql/current/input-objects/ProductSetInput#field-productsetinput-variants))
 * will be updated so that all included entries are either created or updated, and all existing entries not
 * included will be deleted.
 *
 * All other fields will be updated to the value passed. Omitted fields will not be updated.
 *
 * When run in synchronous mode, you will get the product back in the response.
 * For versions `2024-04` and earlier, the synchronous mode has an input limit of 100 variants.
 * This limit has been removed for versions `2024-07` and later.
 *
 * In asynchronous mode, you will instead get a
 * [ProductSetOperation](https://shopify.dev/api/admin-graphql/current/objects/ProductSetOperation)
 * object back. You can then use the
 * [productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query to
 * retrieve the updated product data. This query uses the `ProductSetOperation` object to
 * check the status of the operation and to retrieve the details of the updated product and its variants.
 *
 * If you need to update a subset of variants, use one of the bulk variant mutations:
 * - [productVariantsBulkCreate](https://shopify.dev/api/admin-graphql/current/mutations/productVariantsBulkCreate)
 * - [productVariantsBulkUpdate](https://shopify.dev/api/admin-graphql/current/mutations/productVariantsBulkUpdate)
 * - [productVariantsBulkDelete](https://shopify.dev/api/admin-graphql/current/mutations/productVariantsBulkDelete)
 *
 * If you need to update options, use one of the product option mutations:
 * - [productOptionsCreate](https://shopify.dev/api/admin-graphql/current/mutations/productOptionsCreate)
 * - [productOptionUpdate](https://shopify.dev/api/admin-graphql/current/mutations/productOptionUpdate)
 * - [productOptionsDelete](https://shopify.dev/api/admin-graphql/current/mutations/productOptionsDelete)
 * - [productOptionsReorder](https://shopify.dev/api/admin-graphql/current/mutations/productOptionsReorder)
 *
 * See our guide to
 * [sync product data from an external source](https://shopify.dev/api/admin/migrate/new-product-model/sync-data)
 * for more.
 */
productSet: { baseType: ProductSetPayload, arguments: { input: InputTypes.ProductSetInput; synchronous?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Unpublishes a product.
 */
productUnpublish: { baseType: ProductUnpublishPayload, arguments: { input: InputTypes.ProductUnpublishInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a product.
 *
 * For versions `2024-01` and older:
 * If you update a product and only include some variants in the update,
 * then any variants not included will be deleted.
 *
 * To safely manage variants without the risk of
 * deleting excluded variants, use
 * [productVariantsBulkUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantsbulkupdate).
 *
 * If you want to update a single variant, then use
 * [productVariantUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantupdate).
 */
productUpdate: { baseType: ProductUpdatePayload, arguments: { input: InputTypes.ProductInput; media?: Array<InputTypes.CreateMediaInput> | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates media for a product.
 */
productUpdateMedia: { baseType: ProductUpdateMediaPayload, arguments: { media: Array<InputTypes.UpdateMediaInput>; productId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Appends media from a product to variants of the product.
 */
productVariantAppendMedia: { baseType: ProductVariantAppendMediaPayload, arguments: { productId: BaseTypes.ID; variantMedia: Array<InputTypes.ProductVariantAppendMediaInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a product variant.
 */
productVariantCreate: { baseType: ProductVariantCreatePayload, arguments: { input: InputTypes.ProductVariantInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a product variant.
 */
productVariantDelete: { baseType: ProductVariantDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Detaches media from product variants.
 */
productVariantDetachMedia: { baseType: ProductVariantDetachMediaPayload, arguments: { productId: BaseTypes.ID; variantMedia: Array<InputTypes.ProductVariantDetachMediaInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds multiple selling plan groups to a product variant.
 */
productVariantJoinSellingPlanGroups: { baseType: ProductVariantJoinSellingPlanGroupsPayload, arguments: { id: BaseTypes.ID; sellingPlanGroupIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Remove multiple groups from a product variant.
 */
productVariantLeaveSellingPlanGroups: { baseType: ProductVariantLeaveSellingPlanGroupsPayload, arguments: { id: BaseTypes.ID; sellingPlanGroupIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates new bundles, updates existing bundles, and removes bundle components for one or multiple bundles.
 */
productVariantRelationshipBulkUpdate: { baseType: ProductVariantRelationshipBulkUpdatePayload, arguments: { input: Array<InputTypes.ProductVariantRelationshipUpdateInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a product variant.
 */
productVariantUpdate: { baseType: ProductVariantUpdatePayload, arguments: { input: InputTypes.ProductVariantInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.
 */
productVariantsBulkCreate: { baseType: ProductVariantsBulkCreatePayload, arguments: { media?: Array<InputTypes.CreateMediaInput> | null; productId: BaseTypes.ID; strategy?: BaseTypes.ProductVariantsBulkCreateStrategy | null; variants: Array<InputTypes.ProductVariantsBulkInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes multiple variants in a single product. This mutation can be called directly or via the bulkOperation.
 */
productVariantsBulkDelete: { baseType: ProductVariantsBulkDeletePayload, arguments: { productId: BaseTypes.ID; variantsIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Reorders multiple variants in a single product. This mutation can be called directly or via the bulkOperation.
 */
productVariantsBulkReorder: { baseType: ProductVariantsBulkReorderPayload, arguments: { positions: Array<InputTypes.ProductVariantPositionInput>; productId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.
 */
productVariantsBulkUpdate: { baseType: ProductVariantsBulkUpdatePayload, arguments: { allowPartialUpdates?: BaseTypes.Boolean | null; media?: Array<InputTypes.CreateMediaInput> | null; productId: BaseTypes.ID; variants: Array<InputTypes.ProductVariantsBulkInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates the server pixel to connect to a Google PubSub endpoint.
 * Running this mutation deletes any previous subscriptions for the server pixel.
 */
pubSubServerPixelUpdate: { baseType: PubSubServerPixelUpdatePayload, arguments: { pubSubProject: BaseTypes.String; pubSubTopic: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new Google Cloud Pub/Sub webhook subscription.
 *
 * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
 */
pubSubWebhookSubscriptionCreate: { baseType: PubSubWebhookSubscriptionCreatePayload, arguments: { topic: BaseTypes.WebhookSubscriptionTopic; webhookSubscription: InputTypes.PubSubWebhookSubscriptionInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a Google Cloud Pub/Sub webhook subscription.
 *
 * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
 */
pubSubWebhookSubscriptionUpdate: { baseType: PubSubWebhookSubscriptionUpdatePayload, arguments: { id: BaseTypes.ID; webhookSubscription?: InputTypes.PubSubWebhookSubscriptionInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a publication.
 */
publicationCreate: { baseType: PublicationCreatePayload, arguments: { input: InputTypes.PublicationCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a publication.
 */
publicationDelete: { baseType: PublicationDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a publication.
 */
publicationUpdate: { baseType: PublicationUpdatePayload, arguments: { id: BaseTypes.ID; input: InputTypes.PublicationUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Publishes a resource to a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores.
 */
publishablePublish: { baseType: PublishablePublishPayload, arguments: { id: BaseTypes.ID; input: Array<InputTypes.PublicationInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Publishes a resource to current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores.
 */
publishablePublishToCurrentChannel: { baseType: PublishablePublishToCurrentChannelPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Unpublishes a resource from a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`.
 */
publishableUnpublish: { baseType: PublishableUnpublishPayload, arguments: { id: BaseTypes.ID; input: Array<InputTypes.PublicationInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Unpublishes a resource from the current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`.
 */
publishableUnpublishToCurrentChannel: { baseType: PublishableUnpublishToCurrentChannelPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates quantity pricing on a price list. You can use the `quantityPricingByVariantUpdate` mutation to set fixed prices, quantity rules, and quantity price breaks. This mutation does not allow partial successes. If any of the requested resources fail to update, none of the requested resources will be updated. Delete operations are executed before create operations.
 */
quantityPricingByVariantUpdate: { baseType: QuantityPricingByVariantUpdatePayload, arguments: { input: InputTypes.QuantityPricingByVariantUpdateInput; priceListId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates or updates existing quantity rules on a price list.
 * You can use the `quantityRulesAdd` mutation to set order level minimums, maximumums and increments for specific product variants.
 */
quantityRulesAdd: { baseType: QuantityRulesAddPayload, arguments: { priceListId: BaseTypes.ID; quantityRules: Array<InputTypes.QuantityRuleInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes specific quantity rules from a price list using a product variant ID.
 * You can use the `quantityRulesDelete` mutation to delete a set of quantity rules from a price list.
 */
quantityRulesDelete: { baseType: QuantityRulesDeletePayload, arguments: { priceListId: BaseTypes.ID; variantIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a refund.
 */
refundCreate: { baseType: RefundCreatePayload, arguments: { input: InputTypes.RefundInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Approves a customer's return request.
 * If this mutation is successful, then the `Return.status` field of the
 * approved return is set to `OPEN`.
 */
returnApproveRequest: { baseType: ReturnApproveRequestPayload, arguments: { input: InputTypes.ReturnApproveRequestInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Cancels a return and restores the items back to being fulfilled.
 * Canceling a return is only available before any work has been done
 * on the return (such as an inspection or refund).
 */
returnCancel: { baseType: ReturnCancelPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Indicates a return is complete, either when a refund has been made and items restocked,
 * or simply when it has been marked as returned in the system.
 */
returnClose: { baseType: ReturnClosePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a return.
 */
returnCreate: { baseType: ReturnCreatePayload, arguments: { returnInput: InputTypes.ReturnInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Declines a return on an order.
 * When a return is declined, each `ReturnLineItem.fulfillmentLineItem` can be associated to a new return.
 * Use the `ReturnCreate` or `ReturnRequest` mutation to initiate a new return.
 */
returnDeclineRequest: { baseType: ReturnDeclineRequestPayload, arguments: { input: InputTypes.ReturnDeclineRequestInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes return lines from a return.
 */
returnLineItemRemoveFromReturn: { baseType: ReturnLineItemRemoveFromReturnPayload, arguments: { returnId: BaseTypes.ID; returnLineItems: Array<InputTypes.ReturnLineItemRemoveFromReturnInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Refunds a return when its status is `OPEN` or `CLOSED` and associates it with the related return request.
 */
returnRefund: { baseType: ReturnRefundPayload, arguments: { returnRefundInput: InputTypes.ReturnRefundInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Reopens a closed return.
 */
returnReopen: { baseType: ReturnReopenPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A customer's return request that hasn't been approved or declined.
 * This mutation sets the value of the `Return.status` field to `REQUESTED`.
 * To create a return that has the `Return.status` field set to `OPEN`, use the `returnCreate` mutation.
 */
returnRequest: { baseType: ReturnRequestPayload, arguments: { input: InputTypes.ReturnRequestInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new reverse delivery with associated external shipping information.
 */
reverseDeliveryCreateWithShipping: { baseType: ReverseDeliveryCreateWithShippingPayload, arguments: { labelInput?: InputTypes.ReverseDeliveryLabelInput | null; notifyCustomer?: BaseTypes.Boolean | null; reverseDeliveryLineItems: Array<InputTypes.ReverseDeliveryLineItemInput>; reverseFulfillmentOrderId: BaseTypes.ID; trackingInput?: InputTypes.ReverseDeliveryTrackingInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Disposes reverse delivery line items for a reverse delivery on the same shop.
 */
reverseDeliveryDispose: { baseType: ReverseDeliveryDisposePayload, arguments: { dispositionInputs: Array<InputTypes.ReverseDeliveryDisposeInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a reverse delivery with associated external shipping information.
 */
reverseDeliveryShippingUpdate: { baseType: ReverseDeliveryShippingUpdatePayload, arguments: { labelInput?: InputTypes.ReverseDeliveryLabelInput | null; notifyCustomer?: BaseTypes.Boolean | null; reverseDeliveryId: BaseTypes.ID; trackingInput?: InputTypes.ReverseDeliveryTrackingInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Disposes reverse fulfillment order line items.
 */
reverseFulfillmentOrderDispose: { baseType: ReverseFulfillmentOrderDisposePayload, arguments: { dispositionInputs: Array<InputTypes.ReverseFulfillmentOrderDisposeInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a saved search.
 */
savedSearchCreate: { baseType: SavedSearchCreatePayload, arguments: { input: InputTypes.SavedSearchCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Delete a saved search.
 */
savedSearchDelete: { baseType: SavedSearchDeletePayload, arguments: { input: InputTypes.SavedSearchDeleteInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a saved search.
 */
savedSearchUpdate: { baseType: SavedSearchUpdatePayload, arguments: { input: InputTypes.SavedSearchUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * <div class="note"><h4>Theme app extensions</h4>
 * <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
 *
 * <div class="note"><h4>Script tag deprecation</h4>
 * <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
 *
 *
 * Creates a new script tag.
 */
scriptTagCreate: { baseType: ScriptTagCreatePayload, arguments: { input: InputTypes.ScriptTagInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * <div class="note"><h4>Theme app extensions</h4>
 * <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
 *
 * <div class="note"><h4>Script tag deprecation</h4>
 * <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
 *
 *
 * Deletes a script tag.
 */
scriptTagDelete: { baseType: ScriptTagDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * <div class="note"><h4>Theme app extensions</h4>
 * <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
 *
 * <div class="note"><h4>Script tag deprecation</h4>
 * <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
 *
 *
 * Updates a script tag.
 */
scriptTagUpdate: { baseType: ScriptTagUpdatePayload, arguments: { id: BaseTypes.ID; input: InputTypes.ScriptTagInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a segment.
 */
segmentCreate: { baseType: SegmentCreatePayload, arguments: { name: BaseTypes.String; query: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a segment.
 */
segmentDelete: { baseType: SegmentDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a segment.
 */
segmentUpdate: { baseType: SegmentUpdatePayload, arguments: { id: BaseTypes.ID; name?: BaseTypes.String | null; query?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds multiple product variants to a selling plan group.
 */
sellingPlanGroupAddProductVariants: { baseType: SellingPlanGroupAddProductVariantsPayload, arguments: { id: BaseTypes.ID; productVariantIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds multiple products to a selling plan group.
 */
sellingPlanGroupAddProducts: { baseType: SellingPlanGroupAddProductsPayload, arguments: { id: BaseTypes.ID; productIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a Selling Plan Group.
 */
sellingPlanGroupCreate: { baseType: SellingPlanGroupCreatePayload, arguments: { input: InputTypes.SellingPlanGroupInput; resources?: InputTypes.SellingPlanGroupResourceInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Delete a Selling Plan Group. This does not affect subscription contracts.
 */
sellingPlanGroupDelete: { baseType: SellingPlanGroupDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes multiple product variants from a selling plan group.
 */
sellingPlanGroupRemoveProductVariants: { baseType: SellingPlanGroupRemoveProductVariantsPayload, arguments: { id: BaseTypes.ID; productVariantIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes multiple products from a selling plan group.
 */
sellingPlanGroupRemoveProducts: { baseType: SellingPlanGroupRemoveProductsPayload, arguments: { id: BaseTypes.ID; productIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Update a Selling Plan Group.
 */
sellingPlanGroupUpdate: { baseType: SellingPlanGroupUpdatePayload, arguments: { id: BaseTypes.ID; input: InputTypes.SellingPlanGroupInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new unconfigured server pixel. A single server pixel can exist for an app and shop combination. If you call this mutation when a server pixel already exists, then an error will return.
 */
serverPixelCreate: { baseType: ServerPixelCreatePayload, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes the Server Pixel associated with the current app & shop.
 */
serverPixelDelete: { baseType: ServerPixelDeletePayload, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a shipping package.
 */
shippingPackageDelete: { baseType: ShippingPackageDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Set a shipping package as the default.
 * The default shipping package is the one used to calculate shipping costs on checkout.
 */
shippingPackageMakeDefault: { baseType: ShippingPackageMakeDefaultPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a shipping package.
 */
shippingPackageUpdate: { baseType: ShippingPackageUpdatePayload, arguments: { id: BaseTypes.ID; shippingPackage: InputTypes.CustomShippingPackageInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a locale for a shop. This also deletes all translations of this locale.
 */
shopLocaleDisable: { baseType: ShopLocaleDisablePayload, arguments: { locale: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds a locale for a shop. The newly added locale is in the unpublished state.
 */
shopLocaleEnable: { baseType: ShopLocaleEnablePayload, arguments: { locale: BaseTypes.String; marketWebPresenceIds?: Array<BaseTypes.ID> | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a locale for a shop.
 */
shopLocaleUpdate: { baseType: ShopLocaleUpdatePayload, arguments: { locale: BaseTypes.String; shopLocale: InputTypes.ShopLocaleInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a shop policy.
 */
shopPolicyUpdate: { baseType: ShopPolicyUpdatePayload, arguments: { shopPolicy: InputTypes.ShopPolicyInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The `ResourceFeedback` object lets your app report the status of shops and their resources. For example, if
 * your app is a marketplace channel, then you can use resource feedback to alert merchants that they need to connect their marketplace account by signing in.
 *
 * Resource feedback notifications are displayed to the merchant on the home screen of their Shopify admin, and in the product details view for any products that are published to your app.
 *
 * This resource should be used only in cases where you're describing steps that a merchant is required to complete. If your app offers optional or promotional set-up steps, or if it makes recommendations, then don't use resource feedback to let merchants know about them.
 *
 * ## Sending feedback on a shop
 *
 * You can send resource feedback on a shop to let the merchant know what steps they need to take to make sure that your app is set up correctly. Feedback can have one of two states: `requires_action` or `success`. You need to send a `requires_action` feedback request for each step that the merchant is required to complete.
 *
 * If there are multiple set-up steps that require merchant action, then send feedback with a state of `requires_action` as merchants complete prior steps. And to remove the feedback message from the Shopify admin, send a `success` feedback request.
 *
 * #### Important
 * Sending feedback replaces previously sent feedback for the shop. Send a new `shopResourceFeedbackCreate` mutation to push the latest state of a shop or its resources to Shopify.
 */
shopResourceFeedbackCreate: { baseType: ShopResourceFeedbackCreatePayload, arguments: { input: InputTypes.ResourceFeedbackCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates an alternate currency payout for a Shopify Payments account.
 */
shopifyPaymentsPayoutAlternateCurrencyCreate: { baseType: ShopifyPaymentsPayoutAlternateCurrencyCreatePayload, arguments: { accountId?: BaseTypes.ID | null; currency: BaseTypes.CurrencyCode }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Generates the URL and signed paramaters needed to upload an asset to Shopify.
 */
stagedUploadTargetGenerate: { baseType: StagedUploadTargetGeneratePayload, arguments: { input: InputTypes.StagedUploadTargetGenerateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Uploads multiple images.
 */
stagedUploadTargetsGenerate: { baseType: StagedUploadTargetsGeneratePayload, arguments: { input: Array<InputTypes.StageImageInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates staged upload targets for each input. This is the first step in the upload process.
 * The returned staged upload targets' URL and parameter fields can be used to send a request
 * to upload the file described in the corresponding input.
 *
 * For more information on the upload process, refer to
 * [Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
 */
stagedUploadsCreate: { baseType: StagedUploadsCreatePayload, arguments: { input: Array<InputTypes.StagedUploadInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activates the specified standard metafield definition from its template.
 *
 * Refer to the [list of standard metafield definition templates](https://shopify.dev/apps/metafields/definitions/standard-definitions).
 */
standardMetafieldDefinitionEnable: { baseType: StandardMetafieldDefinitionEnablePayload, arguments: { id?: BaseTypes.ID | null; key?: BaseTypes.String | null; namespace?: BaseTypes.String | null; ownerType: BaseTypes.MetafieldOwnerType; pin?: BaseTypes.Boolean; visibleToStorefrontApi?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Enables the specified standard metaobject definition from its template.
 */
standardMetaobjectDefinitionEnable: { baseType: StandardMetaobjectDefinitionEnablePayload, arguments: { type: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a credit transaction that increases the store credit account balance by the given amount.
 * This operation will create an account if one does not already exist.
 * A store credit account owner can hold multiple accounts each with a different currency.
 * Use the most appropriate currency for the given store credit account owner.
 */
storeCreditAccountCredit: { baseType: StoreCreditAccountCreditPayload, arguments: { creditInput: InputTypes.StoreCreditAccountCreditInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a debit transaction that decreases the store credit account balance by the given amount.
 */
storeCreditAccountDebit: { baseType: StoreCreditAccountDebitPayload, arguments: { debitInput: InputTypes.StoreCreditAccountDebitInput; id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a storefront access token for use with the [Storefront API](https://shopify.dev/docs/api/storefront).
 *
 * An app can have a maximum of 100 active storefront access tokens for each shop.
 *
 * [Get started with the Storefront API](https://shopify.dev/docs/storefronts/headless/building-with-the-storefront-api/getting-started).
 */
storefrontAccessTokenCreate: { baseType: StorefrontAccessTokenCreatePayload, arguments: { input: InputTypes.StorefrontAccessTokenInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a storefront access token.
 */
storefrontAccessTokenDelete: { baseType: StorefrontAccessTokenDeletePayload, arguments: { input: InputTypes.StorefrontAccessTokenDeleteInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new subscription billing attempt. For more information, refer to [Create a subscription contract](https://shopify.dev/docs/apps/selling-strategies/subscriptions/contracts/create#step-4-create-a-billing-attempt).
 */
subscriptionBillingAttemptCreate: { baseType: SubscriptionBillingAttemptCreatePayload, arguments: { subscriptionBillingAttemptInput: InputTypes.SubscriptionBillingAttemptInput; subscriptionContractId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously queries and charges all subscription billing cycles whose [billingAttemptExpectedDate](https://shopify.dev/api/admin-graphql/latest/objects/SubscriptionBillingCycle#field-billingattemptexpecteddate) values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the [subscriptionBillingCycleBulkResults](https://shopify.dev/api/admin-graphql/latest/queries/subscriptionBillingCycleBulkResults) query.
 */
subscriptionBillingCycleBulkCharge: { baseType: SubscriptionBillingCycleBulkChargePayload, arguments: { billingAttemptExpectedDateRange: InputTypes.SubscriptionBillingCyclesDateRangeSelector; filters?: InputTypes.SubscriptionBillingCycleBulkFilters | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously queries all subscription billing cycles whose [billingAttemptExpectedDate](https://shopify.dev/api/admin-graphql/latest/objects/SubscriptionBillingCycle#field-billingattemptexpecteddate) values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the [subscriptionBillingCycleBulkResults](https://shopify.dev/api/admin-graphql/latest/queries/subscriptionBillingCycleBulkResults) query.
 */
subscriptionBillingCycleBulkSearch: { baseType: SubscriptionBillingCycleBulkSearchPayload, arguments: { billingAttemptExpectedDateRange: InputTypes.SubscriptionBillingCyclesDateRangeSelector; filters?: InputTypes.SubscriptionBillingCycleBulkFilters | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new subscription billing attempt for a specified billing cycle. This is the alternative mutation for [subscriptionBillingAttemptCreate](https://shopify.dev/docs/api/admin-graphql/latest/mutations/subscriptionBillingAttemptCreate). For more information, refer to [Create a subscription contract](https://shopify.dev/docs/apps/selling-strategies/subscriptions/contracts/create#step-4-create-a-billing-attempt).
 */
subscriptionBillingCycleCharge: { baseType: SubscriptionBillingCycleChargePayload, arguments: { billingCycleSelector: InputTypes.SubscriptionBillingCycleSelector; subscriptionContractId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Commits the updates of a Subscription Billing Cycle Contract draft.
 */
subscriptionBillingCycleContractDraftCommit: { baseType: SubscriptionBillingCycleContractDraftCommitPayload, arguments: { draftId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Concatenates a contract to a Subscription Draft.
 */
subscriptionBillingCycleContractDraftConcatenate: { baseType: SubscriptionBillingCycleContractDraftConcatenatePayload, arguments: { concatenatedBillingCycleContracts: Array<InputTypes.SubscriptionBillingCycleInput>; draftId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Edit the contents of a subscription contract for the specified billing cycle.
 */
subscriptionBillingCycleContractEdit: { baseType: SubscriptionBillingCycleContractEditPayload, arguments: { billingCycleInput: InputTypes.SubscriptionBillingCycleInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Delete the schedule and contract edits of the selected subscription billing cycle.
 */
subscriptionBillingCycleEditDelete: { baseType: SubscriptionBillingCycleEditDeletePayload, arguments: { billingCycleInput: InputTypes.SubscriptionBillingCycleInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Delete the current and future schedule and contract edits of a list of subscription billing cycles.
 */
subscriptionBillingCycleEditsDelete: { baseType: SubscriptionBillingCycleEditsDeletePayload, arguments: { contractId: BaseTypes.ID; targetSelection: BaseTypes.SubscriptionBillingCyclesTargetSelection }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Modify the schedule of a specific billing cycle.
 */
subscriptionBillingCycleScheduleEdit: { baseType: SubscriptionBillingCycleScheduleEditPayload, arguments: { billingCycleInput: InputTypes.SubscriptionBillingCycleInput; input: InputTypes.SubscriptionBillingCycleScheduleEditInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Skips a Subscription Billing Cycle.
 */
subscriptionBillingCycleSkip: { baseType: SubscriptionBillingCycleSkipPayload, arguments: { billingCycleInput: InputTypes.SubscriptionBillingCycleInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Unskips a Subscription Billing Cycle.
 */
subscriptionBillingCycleUnskip: { baseType: SubscriptionBillingCycleUnskipPayload, arguments: { billingCycleInput: InputTypes.SubscriptionBillingCycleInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activates a Subscription Contract. Contract status must be either active, paused, or failed.
 */
subscriptionContractActivate: { baseType: SubscriptionContractActivatePayload, arguments: { subscriptionContractId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a Subscription Contract.
 */
subscriptionContractAtomicCreate: { baseType: SubscriptionContractAtomicCreatePayload, arguments: { input: InputTypes.SubscriptionContractAtomicCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Cancels a Subscription Contract.
 */
subscriptionContractCancel: { baseType: SubscriptionContractCancelPayload, arguments: { subscriptionContractId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a Subscription Contract Draft.
 * You can submit all the desired information for the draft using [Subscription Draft Input object](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/SubscriptionDraftInput).
 * You can also update the draft using the [Subscription Contract Update](https://shopify.dev/docs/api/admin-graphql/latest/mutations/subscriptionContractUpdate) mutation.
 * The draft is not saved until you call the [Subscription Draft Commit](https://shopify.dev/docs/api/admin-graphql/latest/mutations/subscriptionDraftCommit) mutation.
 */
subscriptionContractCreate: { baseType: SubscriptionContractCreatePayload, arguments: { input: InputTypes.SubscriptionContractCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Expires a Subscription Contract.
 */
subscriptionContractExpire: { baseType: SubscriptionContractExpirePayload, arguments: { subscriptionContractId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Fails a Subscription Contract.
 */
subscriptionContractFail: { baseType: SubscriptionContractFailPayload, arguments: { subscriptionContractId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Pauses a Subscription Contract.
 */
subscriptionContractPause: { baseType: SubscriptionContractPausePayload, arguments: { subscriptionContractId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Allows for the easy change of a Product in a Contract or a Product price change.
 */
subscriptionContractProductChange: { baseType: SubscriptionContractProductChangePayload, arguments: { input: InputTypes.SubscriptionContractProductChangeInput; lineId: BaseTypes.ID; subscriptionContractId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Sets the next billing date of a Subscription Contract. This field is managed by the apps.
 * Alternatively you can utilize our
 * [Billing Cycles APIs](https://shopify.dev/docs/apps/selling-strategies/subscriptions/billing-cycles),
 * which provide auto-computed billing dates and additional functionalities.
 */
subscriptionContractSetNextBillingDate: { baseType: SubscriptionContractSetNextBillingDatePayload, arguments: { contractId: BaseTypes.ID; date: BaseTypes.DateTime }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The subscriptionContractUpdate mutation allows you to create a draft of an existing subscription contract. This [draft](https://shopify.dev/api/admin-graphql/latest/objects/SubscriptionDraft) can be reviewed and modified as needed. Once the draft is committed with [subscriptionDraftCommit](https://shopify.dev/api/admin-graphql/latest/mutations/subscriptionDraftCommit), the changes are applied to the original subscription contract.
 */
subscriptionContractUpdate: { baseType: SubscriptionContractUpdatePayload, arguments: { contractId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Commits the updates of a Subscription Contract draft.
 */
subscriptionDraftCommit: { baseType: SubscriptionDraftCommitPayload, arguments: { draftId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds a subscription discount to a subscription draft.
 */
subscriptionDraftDiscountAdd: { baseType: SubscriptionDraftDiscountAddPayload, arguments: { draftId: BaseTypes.ID; input: InputTypes.SubscriptionManualDiscountInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Applies a code discount on the subscription draft.
 */
subscriptionDraftDiscountCodeApply: { baseType: SubscriptionDraftDiscountCodeApplyPayload, arguments: { draftId: BaseTypes.ID; redeemCode: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes a subscription discount from a subscription draft.
 */
subscriptionDraftDiscountRemove: { baseType: SubscriptionDraftDiscountRemovePayload, arguments: { discountId: BaseTypes.ID; draftId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a subscription discount on a subscription draft.
 */
subscriptionDraftDiscountUpdate: { baseType: SubscriptionDraftDiscountUpdatePayload, arguments: { discountId: BaseTypes.ID; draftId: BaseTypes.ID; input: InputTypes.SubscriptionManualDiscountInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds a subscription free shipping discount to a subscription draft.
 */
subscriptionDraftFreeShippingDiscountAdd: { baseType: SubscriptionDraftFreeShippingDiscountAddPayload, arguments: { draftId: BaseTypes.ID; input: InputTypes.SubscriptionFreeShippingDiscountInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a subscription free shipping discount on a subscription draft.
 */
subscriptionDraftFreeShippingDiscountUpdate: { baseType: SubscriptionDraftFreeShippingDiscountUpdatePayload, arguments: { discountId: BaseTypes.ID; draftId: BaseTypes.ID; input: InputTypes.SubscriptionFreeShippingDiscountInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Adds a subscription line to a subscription draft.
 */
subscriptionDraftLineAdd: { baseType: SubscriptionDraftLineAddPayload, arguments: { draftId: BaseTypes.ID; input: InputTypes.SubscriptionLineInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Removes a subscription line from a subscription draft.
 */
subscriptionDraftLineRemove: { baseType: SubscriptionDraftLineRemovePayload, arguments: { draftId: BaseTypes.ID; lineId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a subscription line on a subscription draft.
 */
subscriptionDraftLineUpdate: { baseType: SubscriptionDraftLineUpdatePayload, arguments: { draftId: BaseTypes.ID; input: InputTypes.SubscriptionLineUpdateInput; lineId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a Subscription Draft.
 */
subscriptionDraftUpdate: { baseType: SubscriptionDraftUpdatePayload, arguments: { draftId: BaseTypes.ID; input: InputTypes.SubscriptionDraftInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Add tags to an order, a draft order, a customer, a product, or an online store article.
 */
tagsAdd: { baseType: TagsAddPayload, arguments: { id: BaseTypes.ID; tags: Array<BaseTypes.String> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Remove tags from an order, a draft order, a customer, a product, or an online store article.
 */
tagsRemove: { baseType: TagsRemovePayload, arguments: { id: BaseTypes.ID; tags: Array<BaseTypes.String> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Allows tax app configurations for tax partners.
 */
taxAppConfigure: { baseType: TaxAppConfigurePayload, arguments: { ready: BaseTypes.Boolean }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Trigger the voiding of an uncaptured authorization transaction.
 */
transactionVoid: { baseType: TransactionVoidPayload, arguments: { parentTransactionId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates or updates translations.
 */
translationsRegister: { baseType: TranslationsRegisterPayload, arguments: { resourceId: BaseTypes.ID; translations: Array<InputTypes.TranslationInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes translations.
 */
translationsRemove: { baseType: TranslationsRemovePayload, arguments: { locales: Array<BaseTypes.String>; marketIds?: Array<BaseTypes.ID> | null; resourceId: BaseTypes.ID; translationKeys: Array<BaseTypes.String> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously delete [URL redirects](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) in bulk.
 */
urlRedirectBulkDeleteAll: { baseType: UrlRedirectBulkDeleteAllPayload, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously delete [URLRedirect](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect)
 * objects in bulk by IDs.
 * Learn more about [URLRedirect](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)
 * objects.
 */
urlRedirectBulkDeleteByIds: { baseType: UrlRedirectBulkDeleteByIdsPayload, arguments: { ids: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously delete redirects in bulk.
 */
urlRedirectBulkDeleteBySavedSearch: { baseType: UrlRedirectBulkDeleteBySavedSearchPayload, arguments: { savedSearchId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Asynchronously delete redirects in bulk.
 */
urlRedirectBulkDeleteBySearch: { baseType: UrlRedirectBulkDeleteBySearchPayload, arguments: { search: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.
 */
urlRedirectCreate: { baseType: UrlRedirectCreatePayload, arguments: { urlRedirect: InputTypes.UrlRedirectInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.
 */
urlRedirectDelete: { baseType: UrlRedirectDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a [`UrlRedirectImport`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirectImport) object.
 *
 * After creating the `UrlRedirectImport` object, the `UrlRedirectImport` request can be performed using the [`urlRedirectImportSubmit`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportSubmit) mutation.
 */
urlRedirectImportCreate: { baseType: UrlRedirectImportCreatePayload, arguments: { url: BaseTypes.URL }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Submits a `UrlRedirectImport` request to be processed.
 *
 * The `UrlRedirectImport` request is first created with the [`urlRedirectImportCreate`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate) mutation.
 */
urlRedirectImportSubmit: { baseType: UrlRedirectImportSubmitPayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a URL redirect.
 */
urlRedirectUpdate: { baseType: UrlRedirectUpdatePayload, arguments: { id: BaseTypes.ID; urlRedirect: InputTypes.UrlRedirectInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a validation.
 */
validationCreate: { baseType: ValidationCreatePayload, arguments: { validation: InputTypes.ValidationCreateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a validation.
 */
validationDelete: { baseType: ValidationDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Update a validation.
 */
validationUpdate: { baseType: ValidationUpdatePayload, arguments: { id: BaseTypes.ID; validation: InputTypes.ValidationUpdateInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activate a [web pixel extension](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)
 * by creating a web pixel record on the store where you installed your app.
 *
 * When you run the `webPixelCreate` mutation, Shopify validates it
 * against the settings definition in `shopify.extension.toml`. If the `settings` input field doesn't match
 * the schema that you defined, then the mutation fails. Learn how to
 * define [web pixel settings](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels#step-2-define-your-web-pixel-settings).
 */
webPixelCreate: { baseType: WebPixelCreatePayload, arguments: { webPixel: InputTypes.WebPixelInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes the web pixel shop settings.
 */
webPixelDelete: { baseType: WebPixelDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Activate a [web pixel extension](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)
 * by updating a web pixel record on the store where you installed your app.
 *
 * When you run the `webPixelUpdate` mutation, Shopify validates it
 * against the settings definition in `shopify.extension.toml`. If the `settings` input field doesn't match
 * the schema that you defined, then the mutation fails. Learn how to
 * define [web pixel settings](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels#step-2-define-your-web-pixel-settings).
 */
webPixelUpdate: { baseType: WebPixelUpdatePayload, arguments: { id: BaseTypes.ID; webPixel: InputTypes.WebPixelInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Creates a new webhook subscription.
 *
 * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
 */
webhookSubscriptionCreate: { baseType: WebhookSubscriptionCreatePayload, arguments: { topic: BaseTypes.WebhookSubscriptionTopic; webhookSubscription: InputTypes.WebhookSubscriptionInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Deletes a webhook subscription.
 *
 * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
 */
webhookSubscriptionDelete: { baseType: WebhookSubscriptionDeletePayload, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Updates a webhook subscription.
 *
 * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
 */
webhookSubscriptionUpdate: { baseType: WebhookSubscriptionUpdatePayload, arguments: { id: BaseTypes.ID; webhookSubscription: InputTypes.WebhookSubscriptionInput }, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "Mutation", returnType: "Mutation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A signed upload parameter for uploading an asset to Shopify.
 *
 * Deprecated in favor of
 * [StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
 * which is used in
 * [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
 * and returned by the
 * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
 */
export type MutationsStagedUploadTargetGenerateUploadParameter = {
/**
 * The upload parameter name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The upload parameter value.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "MutationsStagedUploadTargetGenerateUploadParameter", returnType: "MutationsStagedUploadTargetGenerateUploadParameter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A default cursor that you can use in queries to paginate your results. Each edge in a connection can
 * return a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as
 * the starting point to retrieve the nodes before or after it in a connection.
 *
 * To learn more about using cursor-based pagination, refer to
 * [Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).
 */
export type Navigable = {
/**
 * A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID.
 */
defaultCursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A navigation item, holding basic link attributes.
 */
export type NavigationItem = {
/**
 * The unique identifier of the navigation item.
 */
id: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the navigation item.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL of the page that the navigation item links to.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "NavigationItem", returnType: "NavigationItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An object with an ID field to support global identification, in accordance with the
 * [Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
 * This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
 * and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
 */
export type Node = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The shop's online store channel.
 */
export type OnlineStore = {
/**
 * Storefront password information.
 */
passwordProtection: { baseType: OnlineStorePasswordProtection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OnlineStore", returnType: "OnlineStore", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An article in the blogging system.
 */
export type OnlineStoreArticle = {
/**
 * A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID.
 */
defaultCursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OnlineStoreArticle", returnType: "OnlineStoreArticle", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Navigable & Node

/**
 * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
 * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
 */
export type OnlineStoreBlog = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OnlineStoreBlog", returnType: "OnlineStoreBlog", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Node

/**
 * A page on the Online Store.
 */
export type OnlineStorePage = {
/**
 * A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID.
 */
defaultCursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OnlineStorePage", returnType: "OnlineStorePage", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Navigable & Node

/**
 * Storefront password information.
 */
export type OnlineStorePasswordProtection = {
/**
 * Whether the storefront password is enabled.
 */
enabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OnlineStorePasswordProtection", returnType: "OnlineStorePasswordProtection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Online Store preview URL of the object.
 */
export type OnlineStorePreviewable = {
/**
 * The [preview URL](https://help.shopify.com/manual/online-store/setting-up#preview-your-store) for the online store.
 */
onlineStorePreviewUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }
}

/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Order = {
/**
 * A list of additional fees applied to the order.
 */
additionalFees: { baseType: AdditionalFee, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of sales agreements associated with the order.
 */
agreements: { baseType: SalesAgreementConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of messages that appear on the order page in the Shopify admin.
 */
alerts: { baseType: ResourceAlert, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The application that created the order.
 */
app: { baseType: OrderApp, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The billing address of the customer.
 */
billingAddress: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the billing address matches the shipping address.
 */
billingAddressMatchesShippingAddress: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the order can be manually marked as paid.
 */
canMarkAsPaid: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a customer email exists for the order.
 */
canNotifyCustomer: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason provided when the order was canceled.
 * Returns `null` if the order wasn't canceled.
 */
cancelReason: { baseType: BaseTypes.OrderCancelReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Cancellation details for the order.
 */
cancellation: { baseType: OrderCancellation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the order was canceled.
 * Returns `null` if the order wasn't canceled.
 */
cancelledAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether payment for the order can be captured.
 */
capturable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total order-level discount amount, before returns, in shop currency.
 */
cartDiscountAmount: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total order-level discount amount, before returns, in shop and presentment currencies.
 */
cartDiscountAmountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The channel that created the order.
 */
channel: { baseType: Channel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Details about the channel that created the order.
 */
channelInformation: { baseType: ChannelInformation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The IP address of the API client that created the order.
 */
clientIp: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the order is closed.
 */
closed: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the order was closed.
 * Returns `null` if the order isn't closed.
 */
closedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A randomly generated alpha-numeric identifier for the order that may be shown to the customer
 * instead of the sequential order name. For example, "XPAV284CT", "R50KELTJP" or "35PKUN0UJ".
 * This value isn't guaranteed to be unique.
 */
confirmationNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether inventory has been reserved for the order.
 */
confirmed: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Date and time when the order was created in Shopify.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop currency when the order was placed.
 */
currencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The current order-level discount amount after all order updates, in shop and presentment currencies.
 */
currentCartDiscountAmountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of the quantities for all line items that contribute to the order's current subtotal price.
 */
currentSubtotalLineItemsQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
 * If `taxesIncluded` is `true`, then the subtotal also includes tax.
 */
currentSubtotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of all tax lines applied to line items on the order, after returns.
 * Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
 */
currentTaxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total amount of additional fees after returns, in shop and presentment currencies.
 * Returns `null` if there are no additional fees for the order.
 */
currentTotalAdditionalFeesSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total amount discounted on the order after returns, in shop and presentment currencies.
 * This includes both order and line level discounts.
 */
currentTotalDiscountsSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of duties after returns, in shop and presentment currencies.
 * Returns `null` if duties aren't applicable.
 */
currentTotalDutiesSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total price of the order, after returns, in shop and presentment currencies.
 * This includes taxes and discounts.
 */
currentTotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of the prices of all tax lines applied to line items on the order, after returns, in shop and presentment currencies.
 */
currentTotalTaxSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total weight of the order after returns, in grams.
 */
currentTotalWeight: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of additional merchant-facing details that have been added to the order. For example, whether an order is a customer's first.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The customer that placed the order.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the customer agreed to receive marketing materials.
 */
customerAcceptsMarketing: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer's visits and interactions with the online store before placing the order.
 */
customerJourney: { baseType: CustomerJourney, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer's visits and interactions with the online store before placing the order.
 */
customerJourneySummary: { baseType: CustomerJourneySummary, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A two-letter or three-letter language code, optionally followed by a region modifier.
 */
customerLocale: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of discounts that are applied to the order, not including order edits and refunds.
 */
discountApplications: { baseType: DiscountApplicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The discount code used for the order.
 */
discountCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The discount codes used for the order.
 */
discountCodes: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The primary address of the customer.
 * Returns `null` if neither the shipping address nor the billing address was provided.
 */
displayAddress: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The financial status of the order that can be shown to the merchant.
 * This field doesn't capture all the details of an order's financial state. It should only be used for display summary purposes.
 */
displayFinancialStatus: { baseType: BaseTypes.OrderDisplayFinancialStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The fulfillment status for the order that can be shown to the merchant.
 * This field does not capture all the details of an order's fulfillment state. It should only be used for display summary purposes.
 * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
 */
displayFulfillmentStatus: { baseType: BaseTypes.OrderDisplayFulfillmentStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the disputes associated with the order.
 */
disputes: { baseType: OrderDisputeSummary, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the order has had any edits applied.
 */
edited: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The email address associated with the customer.
 */
email: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether taxes on the order are estimated.
 * This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
 */
estimatedTaxes: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of events associated with the order.
 */
events: { baseType: EventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.EventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of ExchangeV2s for the order.
 */
exchangeV2s: { baseType: ExchangeV2Connection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether there are line items that can be fulfilled.
 * This field returns `false` when the order has no fulfillable line items.
 * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
 */
fulfillable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of fulfillment orders for a specific order.
 *
 * [FulfillmentOrder API access scopes](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder#api-access-scopes)
 * govern which fulfillments orders are returned.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 * In the case that an API client does not have the access scopes necessary to view
 * any of the fulfillment orders that belong to an order, an empty array will be returned.
 */
fulfillmentOrders: { baseType: FulfillmentOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; displayable?: BaseTypes.Boolean | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of shipments for the order.
 */
fulfillments: { baseType: Fulfillment, arguments: { first?: BaseTypes.Int | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The count of fulfillments including the cancelled fulfillments.
 */
fulfillmentsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the order has been paid in full.
 */
fullyPaid: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the merchant added a timeline comment to the order.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL of the first page of the online store that the customer visited before they submitted the order.
 */
landingPageDisplayText: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The first page of the online store that the customer visited before they submitted the order.
 */
landingPageUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the order's line items.
 */
lineItems: { baseType: LineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the order's line items.
 */
lineItemsMutable: { baseType: LineItemMutableConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of localization extensions for the resource.
 */
localizationExtensions: { baseType: LocalizationExtensionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; countryCodes?: Array<BaseTypes.CountryCode> | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; purposes?: Array<BaseTypes.LocalizationExtensionPurpose> | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the order can be edited by the merchant. For example, canceled orders can’t be edited.
 */
merchantEditable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of reasons why the order can't be edited. For example, "Canceled orders can't be edited".
 */
merchantEditableErrors: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The application acting as the Merchant of Record for the order.
 */
merchantOfRecordApp: { baseType: OrderApp, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique identifier for the order that appears on the order page in the Shopify admin and the <b>Order status</b> page.
 * For example, "#1001", "EN1001", or "1001-A".
 * This value isn't unique across multiple stores.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
 */
netPayment: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The net payment for the order, based on the total amount received minus the total amount refunded, in shop and presentment currencies.
 */
netPaymentSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of line items that can't be fulfilled.
 * For example, tips and fully refunded line items can't be fulfilled.
 * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
 */
nonFulfillableLineItems: { baseType: LineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The contents of the note associated with the order.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total amount of additional fees at the time of order creation, in shop and presentment currencies.
 * Returns `null` if additional fees aren't applicable.
 */
originalTotalAdditionalFeesSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total amount of duties at the time of order creation, in shop and presentment currencies.
 * Returns `null` if duties aren't applicable.
 */
originalTotalDutiesSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total price of the order at the time of order creation, in shop and presentment currencies.
 */
originalTotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The payment collection details for the order.
 */
paymentCollectionDetails: { baseType: OrderPaymentCollectionDetails, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the names of all payment gateways used for the order.
 * For example, "Shopify Payments" and "Cash on Delivery (COD)".
 */
paymentGatewayNames: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The payment terms associated with the order.
 */
paymentTerms: { baseType: PaymentTerms, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The phone number associated with the customer.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The fulfillment location that was assigned when the order was created.
 * Orders can have multiple fulfillment orders. These fulfillment orders can each be assigned to a different location which is responsible for fulfilling a subset of the items in an order. The `Order.physicalLocation` field will only point to one of these locations.
 * Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder)
 * object for up to date fulfillment location information.
 */
physicalLocation: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The PO number associated with the order.
 */
poNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The payment `CurrencyCode` of the customer for the order.
 */
presentmentCurrencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the order was processed.
 * This date and time might not match the date and time when the order was created.
 */
processedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The publication that the order was created from.
 */
publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The purchasing entity for the order.
 */
purchasingEntity: { members: { Customer: Customer; PurchasingCompany: PurchasingCompany }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The marketing referral code from the link that the customer clicked to visit the store.
 * Supports the following URL attributes: "ref", "source", or "r".
 * For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
 */
referralCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A web domain or short description of the source that sent the customer to your online store. For example, "shopify.com" or "email".
 */
referrerDisplayText: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL of the webpage where the customer clicked a link that sent them to your online store.
 */
referrerUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The difference between the suggested and actual refund amount of all refunds that have been applied to the order. A positive value indicates a difference in the merchant's favor, and a negative value indicates a difference in the customer's favor.
 */
refundDiscrepancySet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the order can be refunded.
 */
refundable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of refunds that have been applied to the order.
 */
refunds: { baseType: Refund, arguments: { first?: BaseTypes.Int | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The URL of the source that the order originated from, if found in the domain registry.
 */
registeredSourceUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the order has shipping lines or at least one line item on the order that requires shipping.
 */
requiresShipping: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether any line item on the order can be restocked.
 */
restockable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The physical location where a retail order is created or completed, except for draft POS orders completed via the “mark as paid” flow in Admin, which return null. Transactions associated with the order might have been processed at a different location.
 */
retailLocation: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The order's aggregated return status for display purposes.
 */
returnStatus: { baseType: BaseTypes.OrderReturnStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of returns for the order.
 */
returns: { baseType: ReturnConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The risk characteristics for the order.
 */
risk: { baseType: OrderRiskSummary, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The fraud risk level of the order.
 */
riskLevel: { baseType: BaseTypes.OrderRiskLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of risks associated with the order.
 */
risks: { baseType: OrderRisk, arguments: { first?: BaseTypes.Int | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The mailing address of the customer.
 */
shippingAddress: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A summary of all shipping costs on the order.
 */
shippingLine: { baseType: ShippingLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of the order's shipping lines.
 */
shippingLines: { baseType: ShippingLineConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; includeRemovals?: BaseTypes.Boolean | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Shopify Protect details for the order. If Shopify Protect is disabled for the shop, then this will be null.
 */
shopifyProtect: { baseType: ShopifyProtectOrderSummary, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A unique POS or third party order identifier.
 * For example, "1234-12-1000" or "111-98567-54". The `receipt_number` field is derived from this value for POS orders.
 */
sourceIdentifier: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the source associated with the order.
 */
sourceName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The staff member associated with the order.
 */
staffMember: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The sum of the quantities for all line items that contribute to the order's subtotal price.
 */
subtotalLineItemsQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of the prices for all line items after discounts and before returns, in shop currency.
 * If `taxesIncluded` is `true`, then the subtotal also includes tax.
 */
subtotalPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
 * If `taxesIncluded` is `true`, then the subtotal also includes tax.
 */
subtotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A suggested refund for the order.
 */
suggestedRefund: { baseType: SuggestedRefund, arguments: { refundDuties?: Array<InputTypes.RefundDutyInput> | null; refundLineItems?: Array<InputTypes.RefundLineItemInput> | null; refundShipping?: BaseTypes.Boolean | null; shippingAmount?: BaseTypes.Money | null; suggestFullRefund?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A comma separated list of tags associated with the order. Updating `tags` overwrites
 * any existing tags that were previously added to the order. To add new tags without overwriting
 * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
 * mutation.
 */
tags: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether taxes are exempt on the order.
 */
taxExempt: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of all tax lines applied to line items on the order, before returns.
 * Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether taxes are included in the subtotal price of the order.
 */
taxesIncluded: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the order is a test.
 * Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
 * A test order can't be converted into a real order and vice versa.
 */
test: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The authorized amount that's uncaptured or undercaptured, in shop currency.
 * This amount isn't adjusted for returns.
 */
totalCapturable: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The authorized amount that's uncaptured or undercaptured, in shop and presentment currencies.
 * This amount isn't adjusted for returns.
 */
totalCapturableSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount discounted on the order before returns, in shop currency.
 * This includes both order and line level discounts.
 */
totalDiscounts: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total amount discounted on the order before returns, in shop and presentment currencies.
 * This includes both order and line level discounts.
 */
totalDiscountsSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total amount not yet transacted for the order, in shop and presentment currencies.
 * A positive value indicates a difference in the merchant's favor (payment from customer to merchant) and a negative value indicates a difference in the customer's favor (refund from merchant to customer).
 */
totalOutstandingSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price of the order, before returns, in shop currency.
 * This includes taxes and discounts.
 */
totalPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total price of the order, before returns, in shop and presentment currencies.
 * This includes taxes and discounts.
 */
totalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount received from the customer before returns, in shop currency.
 */
totalReceived: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount received from the customer before returns, in shop and presentment currencies.
 */
totalReceivedSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount that was refunded, in shop currency.
 */
totalRefunded: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount that was refunded, in shop and presentment currencies.
 */
totalRefundedSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of shipping that was refunded, in shop and presentment currencies.
 */
totalRefundedShippingSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total shipping amount before discounts and returns, in shop currency.
 */
totalShippingPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total shipping amount before discounts and returns, in shop and presentment currencies.
 */
totalShippingPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total tax amount before returns, in shop currency.
 */
totalTax: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total tax amount before returns, in shop and presentment currencies.
 */
totalTaxSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The sum of all tip amounts for the order, in shop currency.
 */
totalTipReceived: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of all tip amounts for the order, in shop and presentment currencies.
 */
totalTipReceivedSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total weight of the order before returns, in grams.
 */
totalWeight: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of transactions associated with the order.
 */
transactions: { baseType: OrderTransaction, arguments: { capturable?: BaseTypes.Boolean | null; first?: BaseTypes.Int | null; manuallyResolvable?: BaseTypes.Boolean | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The number of transactions associated with the order.
 */
transactionsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether no payments have been made for the order.
 */
unpaid: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the order was modified last.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Order", returnType: "Order", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CommentEventSubject & HasEvents & HasLocalizationExtensions & HasMetafieldDefinitions & HasMetafields & LegacyInteroperability & Node

/**
 * An agreement associated with an order placement.
 */
export type OrderAgreement = {
/**
 * The application that created the agreement.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time at which the agreement occured.
 */
happenedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the agreement.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order associated with the agreement.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason the agremeent was created.
 */
reason: { baseType: BaseTypes.OrderActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sales associated with the agreement.
 */
sales: { baseType: SaleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member associated with the agreement.
 */
user: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "OrderAgreement", returnType: "OrderAgreement", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SalesAgreement

/**
 * The [application](https://shopify.dev/apps) that created the order.
 */
export type OrderApp = {
/**
 * The application icon.
 */
icon: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The application ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the application.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderApp", returnType: "OrderApp", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderCancel` mutation.
 */
export type OrderCancelPayload = {
/**
 * The job that asynchronously cancels the order.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
orderCancelUserErrors: { baseType: OrderCancelUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderCancelPayload", returnType: "OrderCancelPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Errors related to order cancellation.
 */
export type OrderCancelUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.OrderCancelUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderCancelUserError", returnType: "OrderCancelUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Details about the order cancellation.
 */
export type OrderCancellation = {
/**
 * Staff provided note for the order cancellation.
 */
staffNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "OrderCancellation", returnType: "OrderCancellation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderCapture` mutation.
 */
export type OrderCapturePayload = {
/**
 * The created capture transaction.
 */
transaction: { baseType: OrderTransaction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderCapturePayload", returnType: "OrderCapturePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderClose` mutation.
 */
export type OrderClosePayload = {
/**
 * The closed order.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderClosePayload", returnType: "OrderClosePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Orders.
 */
export type OrderConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: OrderEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in OrderEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Order, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderConnection", returnType: "OrderConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderCreateMandatePayment` mutation.
 */
export type OrderCreateMandatePaymentPayload = {
/**
 * The async job used for charging the payment.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The Unique ID for the created payment.
 */
paymentReferenceId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: OrderCreateMandatePaymentUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderCreateMandatePaymentPayload", returnType: "OrderCreateMandatePaymentPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `OrderCreateMandatePayment`.
 */
export type OrderCreateMandatePaymentUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.OrderCreateMandatePaymentUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderCreateMandatePaymentUserError", returnType: "OrderCreateMandatePaymentUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `orderDelete` mutation.
 */
export type OrderDeletePayload = {
/**
 * Deleted order ID.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: OrderDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderDeletePayload", returnType: "OrderDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Errors related to deleting an order.
 */
export type OrderDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.OrderDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderDeleteUserError", returnType: "OrderDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A summary of the important details for a dispute on an order.
 */
export type OrderDisputeSummary = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type that the dispute was initiated as.
 */
initiatedAs: { baseType: BaseTypes.DisputeType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The current status of the dispute.
 */
status: { baseType: BaseTypes.DisputeStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderDisputeSummary", returnType: "OrderDisputeSummary", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type which holds one Order and a cursor during pagination.
 */
export type OrderEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of OrderEdge.
 */
node: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderEdge", returnType: "OrderEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderEditAddCustomItem` mutation.
 */
export type OrderEditAddCustomItemPayload = {
/**
 * The custom line item that will be added to the order based on the current edits.
 */
calculatedLineItem: { baseType: CalculatedLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * An order with the edits applied but not saved.
 */
calculatedOrder: { baseType: CalculatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditAddCustomItemPayload", returnType: "OrderEditAddCustomItemPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderEditAddLineItemDiscount` mutation.
 */
export type OrderEditAddLineItemDiscountPayload = {
/**
 * The discount applied to a line item during this order edit.
 */
addedDiscountStagedChange: { baseType: OrderStagedChangeAddLineItemDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The line item with the edits applied but not saved.
 */
calculatedLineItem: { baseType: CalculatedLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * An order with the edits applied but not saved.
 */
calculatedOrder: { baseType: CalculatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditAddLineItemDiscountPayload", returnType: "OrderEditAddLineItemDiscountPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderEditAddShippingLine` mutation.
 */
export type OrderEditAddShippingLinePayload = {
/**
 * The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
 * with the edits applied but not saved.
 */
calculatedOrder: { baseType: CalculatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The [calculated shipping line](https://shopify.dev/api/admin-graphql/latest/objects/calculatedshippingline)
 * that's added during this order edit.
 */
calculatedShippingLine: { baseType: CalculatedShippingLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: OrderEditAddShippingLineUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditAddShippingLinePayload", returnType: "OrderEditAddShippingLinePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `OrderEditAddShippingLine`.
 */
export type OrderEditAddShippingLineUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.OrderEditAddShippingLineUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderEditAddShippingLineUserError", returnType: "OrderEditAddShippingLineUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `orderEditAddVariant` mutation.
 */
export type OrderEditAddVariantPayload = {
/**
 * The [calculated line item](https://shopify.dev/api/admin-graphql/latest/objects/calculatedlineitem)
 * that's added during this order edit.
 */
calculatedLineItem: { baseType: CalculatedLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
 * with the edits applied but not saved.
 */
calculatedOrder: { baseType: CalculatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditAddVariantPayload", returnType: "OrderEditAddVariantPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An agreement associated with an edit to the order.
 */
export type OrderEditAgreement = {
/**
 * The application that created the agreement.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time at which the agreement occured.
 */
happenedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the agreement.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason the agremeent was created.
 */
reason: { baseType: BaseTypes.OrderActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sales associated with the agreement.
 */
sales: { baseType: SaleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member associated with the agreement.
 */
user: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "OrderEditAgreement", returnType: "OrderEditAgreement", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SalesAgreement

/**
 * Return type for `orderEditBegin` mutation.
 */
export type OrderEditBeginPayload = {
/**
 * The order that will be edited.
 */
calculatedOrder: { baseType: CalculatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditBeginPayload", returnType: "OrderEditBeginPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderEditCommit` mutation.
 */
export type OrderEditCommitPayload = {
/**
 * The order with changes applied.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditCommitPayload", returnType: "OrderEditCommitPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderEditRemoveDiscount` mutation.
 */
export type OrderEditRemoveDiscountPayload = {
/**
 * An order with the edits applied but not saved.
 */
calculatedOrder: { baseType: CalculatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: OrderEditRemoveDiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditRemoveDiscountPayload", returnType: "OrderEditRemoveDiscountPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `OrderEditRemoveDiscount`.
 */
export type OrderEditRemoveDiscountUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.OrderEditRemoveDiscountUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderEditRemoveDiscountUserError", returnType: "OrderEditRemoveDiscountUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `orderEditRemoveLineItemDiscount` mutation.
 */
export type OrderEditRemoveLineItemDiscountPayload = {
/**
 * The calculated line item after removal of the discount.
 */
calculatedLineItem: { baseType: CalculatedLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * An order with the edits applied but not saved.
 */
calculatedOrder: { baseType: CalculatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditRemoveLineItemDiscountPayload", returnType: "OrderEditRemoveLineItemDiscountPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderEditRemoveShippingLine` mutation.
 */
export type OrderEditRemoveShippingLinePayload = {
/**
 * The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
 * with the edits applied but not saved.
 */
calculatedOrder: { baseType: CalculatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: OrderEditRemoveShippingLineUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditRemoveShippingLinePayload", returnType: "OrderEditRemoveShippingLinePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `OrderEditRemoveShippingLine`.
 */
export type OrderEditRemoveShippingLineUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.OrderEditRemoveShippingLineUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderEditRemoveShippingLineUserError", returnType: "OrderEditRemoveShippingLineUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `orderEditSetQuantity` mutation.
 */
export type OrderEditSetQuantityPayload = {
/**
 * The calculated line item with the edits applied but not saved.
 */
calculatedLineItem: { baseType: CalculatedLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The calculated order with the edits applied but not saved.
 */
calculatedOrder: { baseType: CalculatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditSetQuantityPayload", returnType: "OrderEditSetQuantityPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderEditUpdateDiscount` mutation.
 */
export type OrderEditUpdateDiscountPayload = {
/**
 * An order with the edits applied but not saved.
 */
calculatedOrder: { baseType: CalculatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: OrderEditUpdateDiscountUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditUpdateDiscountPayload", returnType: "OrderEditUpdateDiscountPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `OrderEditUpdateDiscount`.
 */
export type OrderEditUpdateDiscountUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.OrderEditUpdateDiscountUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderEditUpdateDiscountUserError", returnType: "OrderEditUpdateDiscountUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `orderEditUpdateShippingLine` mutation.
 */
export type OrderEditUpdateShippingLinePayload = {
/**
 * An order with the edits applied but not saved.
 */
calculatedOrder: { baseType: CalculatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: OrderEditUpdateShippingLineUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderEditUpdateShippingLinePayload", returnType: "OrderEditUpdateShippingLinePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `OrderEditUpdateShippingLine`.
 */
export type OrderEditUpdateShippingLineUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.OrderEditUpdateShippingLineUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderEditUpdateShippingLineUserError", returnType: "OrderEditUpdateShippingLineUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `orderInvoiceSend` mutation.
 */
export type OrderInvoiceSendPayload = {
/**
 * The order associated with the invoice email.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: OrderInvoiceSendUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderInvoiceSendPayload", returnType: "OrderInvoiceSendPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `OrderInvoiceSend`.
 */
export type OrderInvoiceSendUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.OrderInvoiceSendUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderInvoiceSendUserError", returnType: "OrderInvoiceSendUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `orderMarkAsPaid` mutation.
 */
export type OrderMarkAsPaidPayload = {
/**
 * The order marked as paid.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderMarkAsPaidPayload", returnType: "OrderMarkAsPaidPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderOpen` mutation.
 */
export type OrderOpenPayload = {
/**
 * The opened order.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderOpenPayload", returnType: "OrderOpenPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The payment collection details for an order that requires additional payment following an edit to the order.
 */
export type OrderPaymentCollectionDetails = {
/**
 * The URL to use for collecting an additional payment on the order.
 */
additionalPaymentCollectionUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of vaulted payment methods for the order with their permissions.
 */
vaultedPaymentMethods: { baseType: PaymentMandate, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

__typename: { baseType: "OrderPaymentCollectionDetails", returnType: "OrderPaymentCollectionDetails", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The status of a customer's payment for an order.
 */
export type OrderPaymentStatus = {
/**
 * A message describing an error during the asynchronous processing of a payment.
 */
errorMessage: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the payment, initially returned by an `orderCreateMandatePayment` or `orderCreatePayment` mutation.
 */
paymentReferenceId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the payment.
 */
status: { baseType: BaseTypes.OrderPaymentStatusResult, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The transaction associated with the payment.
 */
transactions: { baseType: OrderTransaction, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A translated message describing an error during the asynchronous processing of a payment.
 */
translatedErrorMessage: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "OrderPaymentStatus", returnType: "OrderPaymentStatus", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a fraud check on an order.
 * As of version 2024-04 this resource is deprecated. Risk Assessments can be queried via the
 * [OrderRisk Assessments API](https://shopify.dev/api/admin-graphql/2024-04/objects/OrderRiskAssessment).
 */
export type OrderRisk = {
/**
 * Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
 */
display: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The likelihood that an order is fraudulent, based on this order risk.
 *
 * The level can be set by Shopify risk analysis or by an app.
 */
level: { baseType: BaseTypes.OrderRiskLevel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The risk message that's shown to the merchant in the Shopify admin.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "OrderRisk", returnType: "OrderRisk", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The risk assessments for an order.
 *
 * See the [example query "Retrieves a list of all order risks for an order"](https://shopify.dev/docs/api/admin-graphql/unstable/queries/order?example=Retrieves+a+list+of+all+order+risks+for+an+order).
 */
export type OrderRiskAssessment = {
/**
 * Optional facts used to describe the risk assessment. The values in here are specific to the provider.
 * See the [examples for the mutation orderRiskAssessmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/orderRiskAssessmentCreate#section-examples).
 */
facts: { baseType: RiskFact, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The app that provided the assessment, `null` if the assessment was provided by Shopify.
 */
provider: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The likelihood that the order is fraudulent, based on this risk assessment.
 */
riskLevel: { baseType: BaseTypes.RiskAssessmentResult, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderRiskAssessment", returnType: "OrderRiskAssessment", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderRiskAssessmentCreate` mutation.
 */
export type OrderRiskAssessmentCreatePayload = {
/**
 * The order risk assessment created.
 */
orderRiskAssessment: { baseType: OrderRiskAssessment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: OrderRiskAssessmentCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderRiskAssessmentCreatePayload", returnType: "OrderRiskAssessmentCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `OrderRiskAssessmentCreate`.
 */
export type OrderRiskAssessmentCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.OrderRiskAssessmentCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderRiskAssessmentCreateUserError", returnType: "OrderRiskAssessmentCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Summary of risk characteristics for an order.
 *
 * See the [example query "Retrieves a list of all order risks for an order"](https://shopify.dev/docs/api/admin-graphql/unstable/queries/order?example=Retrieves+a+list+of+all+order+risks+for+an+order).
 */
export type OrderRiskSummary = {
/**
 * The list of risk assessments for the order.
 */
assessments: { baseType: OrderRiskAssessment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The recommendation for the order based on the results of the risk assessments. This suggests the action the merchant should take with regards to its risk of fraud.
 */
recommendation: { baseType: BaseTypes.OrderRiskRecommendationResult, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderRiskSummary", returnType: "OrderRiskSummary", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A change that has been applied to an order.
 */
export type OrderStagedChange = OrderStagedChangeAddCustomItem | OrderStagedChangeAddLineItemDiscount | OrderStagedChangeAddShippingLine | OrderStagedChangeAddVariant | OrderStagedChangeDecrementItem | OrderStagedChangeIncrementItem | OrderStagedChangeRemoveShippingLine

/**
 * A change to the order representing the addition of a
 * custom line item. For example, you might want to add gift wrapping service
 * as a custom line item.
 */
export type OrderStagedChangeAddCustomItem = {
/**
 * The price of an individual item without any discounts applied. This value can't be negative.
 */
originalUnitPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity of the custom item to add to the order. This value must be greater than zero.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the custom item.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderStagedChangeAddCustomItem", returnType: "OrderStagedChangeAddCustomItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The discount applied to an item that was added during the current order edit.
 */
export type OrderStagedChangeAddLineItemDiscount = {
/**
 * The description of the discount.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The pricing value of the discount.
 */
value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderStagedChangeAddLineItemDiscount", returnType: "OrderStagedChangeAddLineItemDiscount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)
 * added as part of an order edit.
 */
export type OrderStagedChangeAddShippingLine = {
/**
 * The phone number at the shipping address.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shipping line's title that's shown to the buyer.
 */
presentmentTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The price that applies to the shipping line.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the shipping line.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "OrderStagedChangeAddShippingLine", returnType: "OrderStagedChangeAddShippingLine", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A change to the order representing the addition of an existing product variant.
 */
export type OrderStagedChangeAddVariant = {
/**
 * The quantity of the product variant that was added.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant that was added.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderStagedChangeAddVariant", returnType: "OrderStagedChangeAddVariant", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple OrderStagedChanges.
 */
export type OrderStagedChangeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: OrderStagedChangeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in OrderStagedChangeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { OrderStagedChangeAddCustomItem: OrderStagedChangeAddCustomItem; OrderStagedChangeAddLineItemDiscount: OrderStagedChangeAddLineItemDiscount; OrderStagedChangeAddShippingLine: OrderStagedChangeAddShippingLine; OrderStagedChangeAddVariant: OrderStagedChangeAddVariant; OrderStagedChangeDecrementItem: OrderStagedChangeDecrementItem; OrderStagedChangeIncrementItem: OrderStagedChangeIncrementItem; OrderStagedChangeRemoveShippingLine: OrderStagedChangeRemoveShippingLine }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderStagedChangeConnection", returnType: "OrderStagedChangeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An removal of items from an existing line item on the order.
 */
export type OrderStagedChangeDecrementItem = {
/**
 * The number of items removed.
 */
delta: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The original line item.
 */
lineItem: { baseType: LineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The intention to restock the removed items.
 */
restock: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderStagedChangeDecrementItem", returnType: "OrderStagedChangeDecrementItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one OrderStagedChange and a cursor during pagination.
 */
export type OrderStagedChangeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of OrderStagedChangeEdge.
 */
node: { members: { OrderStagedChangeAddCustomItem: OrderStagedChangeAddCustomItem; OrderStagedChangeAddLineItemDiscount: OrderStagedChangeAddLineItemDiscount; OrderStagedChangeAddShippingLine: OrderStagedChangeAddShippingLine; OrderStagedChangeAddVariant: OrderStagedChangeAddVariant; OrderStagedChangeDecrementItem: OrderStagedChangeDecrementItem; OrderStagedChangeIncrementItem: OrderStagedChangeIncrementItem; OrderStagedChangeRemoveShippingLine: OrderStagedChangeRemoveShippingLine }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderStagedChangeEdge", returnType: "OrderStagedChangeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An addition of items to an existing line item on the order.
 */
export type OrderStagedChangeIncrementItem = {
/**
 * The number of items added.
 */
delta: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The original line item.
 */
lineItem: { baseType: LineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderStagedChangeIncrementItem", returnType: "OrderStagedChangeIncrementItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A shipping line removed during an order edit.
 */
export type OrderStagedChangeRemoveShippingLine = {
/**
 * The removed shipping line.
 */
shippingLine: { baseType: ShippingLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderStagedChangeRemoveShippingLine", returnType: "OrderStagedChangeRemoveShippingLine", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A payment transaction in the context of an order.
 */
export type OrderTransaction = {
/**
 * The masked account number associated with the payment method.
 */
accountNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The amount of money.
 */
amount: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount and currency of the transaction in shop and presentment currencies.
 */
amountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount and currency of the transaction.
 */
amountV2: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Authorization code associated with the transaction.
 */
authorizationCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The time when the authorization expires. This field is available only to stores on a Shopify Plus plan.
 */
authorizationExpiresAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Date and time when the transaction was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A standardized error code, independent of the payment provider.
 */
errorCode: { baseType: BaseTypes.OrderTransactionErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The transaction fees charged on the order transaction. Only present for Shopify Payments transactions.
 */
fees: { baseType: TransactionFee, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The human-readable payment gateway name used to process the transaction.
 */
formattedGateway: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The payment gateway used to process the transaction.
 */
gateway: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The kind of transaction.
 */
kind: { baseType: BaseTypes.OrderTransactionKind, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the transaction can be manually captured.
 */
manuallyCapturable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Specifies the available amount to refund on the gateway.
 * This value is only available for transactions of type `SuggestedRefund`.
 */
maximumRefundable: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Specifies the available amount with currency to refund on the gateway.
 * This value is only available for transactions of type `SuggestedRefund`.
 */
maximumRefundableV2: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the transaction can be captured multiple times.
 */
multiCapturable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The associated order.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The associated parent transaction, for example the authorization of a capture.
 */
parentTransaction: { baseType: OrderTransaction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The payment details for the transaction.
 */
paymentDetails: { members: { CardPaymentDetails: CardPaymentDetails; ShopPayInstallmentsPaymentDetails: ShopPayInstallmentsPaymentDetails }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The payment icon to display for the transaction.
 */
paymentIcon: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The payment ID associated with the transaction.
 */
paymentId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The payment method used for the transaction. This value is `null` if the payment method is unknown.
 */
paymentMethod: { baseType: BaseTypes.PaymentMethods, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Date and time when the transaction was processed.
 */
processedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The transaction receipt that the payment gateway attaches to the transaction.
 * The value of this field depends on which payment gateway processed the transaction.
 */
receiptJson: { baseType: BaseTypes.JSON, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The settlement currency.
 */
settlementCurrency: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The rate used when converting the transaction amount to settlement currency.
 */
settlementCurrencyRate: { baseType: BaseTypes.Decimal, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan.
 */
shopifyPaymentsSet: { baseType: ShopifyPaymentsTransactionSet, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of this transaction.
 */
status: { baseType: BaseTypes.OrderTransactionStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the transaction is a test transaction.
 */
test: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Specifies the available amount to capture on the gateway.
 * Only available when an amount is capturable or manually mark as paid.
 */
totalUnsettled: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
 * Only available when an amount is capturable or manually mark as paid.
 */
totalUnsettledSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Specifies the available amount with currency to capture on the gateway.
 * Only available when an amount is capturable or manually mark as paid.
 */
totalUnsettledV2: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Staff member who was logged into the Shopify POS device when the transaction was processed.
 */
user: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "OrderTransaction", returnType: "OrderTransaction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple OrderTransactions.
 */
export type OrderTransactionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: OrderTransactionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in OrderTransactionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: OrderTransaction, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderTransactionConnection", returnType: "OrderTransactionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one OrderTransaction and a cursor during pagination.
 */
export type OrderTransactionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of OrderTransactionEdge.
 */
node: { baseType: OrderTransaction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "OrderTransactionEdge", returnType: "OrderTransactionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `orderUpdate` mutation.
 */
export type OrderUpdatePayload = {
/**
 * The updated order.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "OrderUpdatePayload", returnType: "OrderUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Returns information about pagination in a connection, in accordance with the
 * [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
 * For more information, please read our [GraphQL Pagination Usage Guide](https://shopify.dev/api/usage/pagination-graphql).
 */
export type PageInfo = {
/**
 * The cursor corresponding to the last node in edges.
 */
endCursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether there are more pages to fetch following the current page.
 */
hasNextPage: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether there are any pages prior to the current page.
 */
hasPreviousPage: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The cursor corresponding to the first node in edges.
 */
startCursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "PageInfo", returnType: "PageInfo", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A payment customization.
 */
export type PaymentCustomization = {
/**
 * The enabled status of the payment customization.
 */
enabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The error history on the most recent version of the payment customization.
 */
errorHistory: { baseType: FunctionsErrorHistory, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the Shopify Function implementing the payment customization.
 */
functionId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Shopify Function implementing the payment customization.
 */
shopifyFunction: { baseType: ShopifyFunction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the payment customization.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentCustomization", returnType: "PaymentCustomization", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & Node

/**
 * Return type for `paymentCustomizationActivation` mutation.
 */
export type PaymentCustomizationActivationPayload = {
/**
 * The IDs of the updated payment customizations.
 */
ids: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PaymentCustomizationError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PaymentCustomizationActivationPayload", returnType: "PaymentCustomizationActivationPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple PaymentCustomizations.
 */
export type PaymentCustomizationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: PaymentCustomizationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in PaymentCustomizationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: PaymentCustomization, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentCustomizationConnection", returnType: "PaymentCustomizationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `paymentCustomizationCreate` mutation.
 */
export type PaymentCustomizationCreatePayload = {
/**
 * Returns the created payment customization.
 */
paymentCustomization: { baseType: PaymentCustomization, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PaymentCustomizationError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PaymentCustomizationCreatePayload", returnType: "PaymentCustomizationCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `paymentCustomizationDelete` mutation.
 */
export type PaymentCustomizationDeletePayload = {
/**
 * Returns the deleted payment customization ID.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PaymentCustomizationError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PaymentCustomizationDeletePayload", returnType: "PaymentCustomizationDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one PaymentCustomization and a cursor during pagination.
 */
export type PaymentCustomizationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of PaymentCustomizationEdge.
 */
node: { baseType: PaymentCustomization, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentCustomizationEdge", returnType: "PaymentCustomizationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of a payment customization mutation.
 */
export type PaymentCustomizationError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.PaymentCustomizationErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentCustomizationError", returnType: "PaymentCustomizationError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `paymentCustomizationUpdate` mutation.
 */
export type PaymentCustomizationUpdatePayload = {
/**
 * Returns the updated payment customization.
 */
paymentCustomization: { baseType: PaymentCustomization, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PaymentCustomizationError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PaymentCustomizationUpdatePayload", returnType: "PaymentCustomizationUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Payment details related to a transaction.
 */
export type PaymentDetails = CardPaymentDetails | ShopPayInstallmentsPaymentDetails

/**
 * All possible instrument outputs for Payment Mandates.
 */
export type PaymentInstrument = VaultCreditCard | VaultPaypalBillingAgreement

/**
 * A payment instrument and the permission
 * the owner of the instrument gives to the merchant to debit it.
 */
export type PaymentMandate = {
/**
 * The unique ID of a payment mandate.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The outputs details of the payment instrument.
 */
paymentInstrument: { members: { VaultCreditCard: VaultCreditCard; VaultPaypalBillingAgreement: VaultPaypalBillingAgreement }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentMandate", returnType: "PaymentMandate", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `paymentReminderSend` mutation.
 */
export type PaymentReminderSendPayload = {
/**
 * Whether the payment reminder email was successfully sent.
 */
success: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PaymentReminderSendUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PaymentReminderSendPayload", returnType: "PaymentReminderSendPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `PaymentReminderSend`.
 */
export type PaymentReminderSendUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.PaymentReminderSendUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentReminderSendUserError", returnType: "PaymentReminderSendUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents the payment schedule for a single payment defined in the payment terms.
 */
export type PaymentSchedule = {
/**
 * Amount owed for this payment schedule.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Date and time when the payment schedule is paid or fulfilled.
 */
completedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Date and time when the payment schedule is due.
 */
dueAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Date and time when the invoice is sent.
 */
issuedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The payment terms the payment schedule belongs to.
 */
paymentTerms: { baseType: PaymentTerms, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentSchedule", returnType: "PaymentSchedule", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple PaymentSchedules.
 */
export type PaymentScheduleConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: PaymentScheduleEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in PaymentScheduleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: PaymentSchedule, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentScheduleConnection", returnType: "PaymentScheduleConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one PaymentSchedule and a cursor during pagination.
 */
export type PaymentScheduleEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of PaymentScheduleEdge.
 */
node: { baseType: PaymentSchedule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentScheduleEdge", returnType: "PaymentScheduleEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Settings related to payments.
 */
export type PaymentSettings = {
/**
 * List of the digital wallets which the shop supports.
 */
supportedDigitalWallets: { baseType: BaseTypes.DigitalWallet, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PaymentSettings", returnType: "PaymentSettings", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the payment terms for an order or draft order.
 */
export type PaymentTerms = {
/**
 * The draft order associated with the payment terms.
 */
draftOrder: { baseType: DraftOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Duration of payment terms in days based on the payment terms template used to create the payment terms.
 */
dueInDays: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order associated with the payment terms.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the payment terms have overdue payment schedules.
 */
overdue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of schedules for the payment terms.
 */
paymentSchedules: { baseType: PaymentScheduleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the payment terms template used to create the payment terms.
 */
paymentTermsName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The payment terms template type used to create the payment terms.
 */
paymentTermsType: { baseType: BaseTypes.PaymentTermsType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The payment terms name, translated into the shop admin's preferred language.
 */
translatedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentTerms", returnType: "PaymentTerms", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `paymentTermsCreate` mutation.
 */
export type PaymentTermsCreatePayload = {
/**
 * The created payment terms.
 */
paymentTerms: { baseType: PaymentTerms, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PaymentTermsCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PaymentTermsCreatePayload", returnType: "PaymentTermsCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `PaymentTermsCreate`.
 */
export type PaymentTermsCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.PaymentTermsCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentTermsCreateUserError", returnType: "PaymentTermsCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `paymentTermsDelete` mutation.
 */
export type PaymentTermsDeletePayload = {
/**
 * The deleted payment terms ID.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PaymentTermsDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PaymentTermsDeletePayload", returnType: "PaymentTermsDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `PaymentTermsDelete`.
 */
export type PaymentTermsDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.PaymentTermsDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentTermsDeleteUserError", returnType: "PaymentTermsDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents the payment terms template object.
 */
export type PaymentTermsTemplate = {
/**
 * The description of the payment terms template.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of days between the issued date and due date if this is the net type of payment terms.
 */
dueInDays: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the payment terms template.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of the payment terms template.
 */
paymentTermsType: { baseType: BaseTypes.PaymentTermsType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The translated payment terms template name.
 */
translatedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentTermsTemplate", returnType: "PaymentTermsTemplate", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `paymentTermsUpdate` mutation.
 */
export type PaymentTermsUpdatePayload = {
/**
 * The updated payment terms.
 */
paymentTerms: { baseType: PaymentTerms, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PaymentTermsUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PaymentTermsUpdatePayload", returnType: "PaymentTermsUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `PaymentTermsUpdate`.
 */
export type PaymentTermsUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.PaymentTermsUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PaymentTermsUpdateUserError", returnType: "PaymentTermsUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a price list, including information about related prices and eligibility rules.
 * You can use price lists to specify either fixed prices or adjusted relative prices that
 * override initial product variant prices. Price lists are applied to customers
 * using context rules, which determine price list eligibility.
 *
 * For more information on price lists, refer to
 * [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 */
export type PriceList = {
/**
 * The catalog that the price list is associated with.
 */
catalog: { members: { AppCatalog: AppCatalog; CompanyLocationCatalog: CompanyLocationCatalog; MarketCatalog: MarketCatalog }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The currency for fixed prices associated with this price list.
 */
currency: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of fixed prices on the price list.
 */
fixedPricesCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique name of the price list, used as a human-readable identifier.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Relative adjustments to other prices.
 */
parent: { baseType: PriceListParent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of prices associated with the price list.
 */
prices: { baseType: PriceListPriceConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; originType?: BaseTypes.PriceListPriceOriginType | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of quantity rules associated with the price list, ordered by product variants.
 */
quantityRules: { baseType: QuantityRuleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; originType?: BaseTypes.QuantityRuleOriginType | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceList", returnType: "PriceList", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The type and value of a price list adjustment.
 *
 * For more information on price lists, refer to
 * [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 */
export type PriceListAdjustment = {
/**
 * The type of price adjustment, such as percentage increase or decrease.
 */
type: { baseType: BaseTypes.PriceListAdjustmentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of price adjustment, where positive numbers reduce the prices and negative numbers
 * increase them.
 */
value: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceListAdjustment", returnType: "PriceListAdjustment", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the settings of price list adjustments.
 */
export type PriceListAdjustmentSettings = {
/**
 * The type of price list adjustment setting for compare at price.
 */
compareAtMode: { baseType: BaseTypes.PriceListCompareAtMode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceListAdjustmentSettings", returnType: "PriceListAdjustmentSettings", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple PriceLists.
 */
export type PriceListConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: PriceListEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in PriceListEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: PriceList, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceListConnection", returnType: "PriceListConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `priceListCreate` mutation.
 */
export type PriceListCreatePayload = {
/**
 * The newly created price list.
 */
priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PriceListUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceListCreatePayload", returnType: "PriceListCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `priceListDelete` mutation.
 */
export type PriceListDeletePayload = {
/**
 * The ID of the deleted price list.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PriceListUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceListDeletePayload", returnType: "PriceListDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one PriceList and a cursor during pagination.
 */
export type PriceListEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of PriceListEdge.
 */
node: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceListEdge", returnType: "PriceListEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `priceListFixedPricesAdd` mutation.
 */
export type PriceListFixedPricesAddPayload = {
/**
 * The list of fixed prices that were added to or updated in the price list.
 */
prices: { baseType: PriceListPrice, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PriceListPriceUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceListFixedPricesAddPayload", returnType: "PriceListFixedPricesAddPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed price list fixed prices by product bulk update operations.
 */
export type PriceListFixedPricesByProductBulkUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.PriceListFixedPricesByProductBulkUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceListFixedPricesByProductBulkUpdateUserError", returnType: "PriceListFixedPricesByProductBulkUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `priceListFixedPricesByProductUpdate` mutation.
 */
export type PriceListFixedPricesByProductUpdatePayload = {
/**
 * The price list for which the fixed prices were modified.
 */
priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product for which the fixed prices were added.
 */
pricesToAddProducts: { baseType: Product, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The product for which the fixed prices were deleted.
 */
pricesToDeleteProducts: { baseType: Product, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PriceListFixedPricesByProductBulkUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceListFixedPricesByProductUpdatePayload", returnType: "PriceListFixedPricesByProductUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `priceListFixedPricesDelete` mutation.
 */
export type PriceListFixedPricesDeletePayload = {
/**
 * A list of product variant IDs whose fixed prices were removed from the price list.
 */
deletedFixedPriceVariantIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PriceListPriceUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceListFixedPricesDeletePayload", returnType: "PriceListFixedPricesDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `priceListFixedPricesUpdate` mutation.
 */
export type PriceListFixedPricesUpdatePayload = {
/**
 * A list of deleted variant IDs for prices.
 */
deletedFixedPriceVariantIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The price list for which the fixed prices were modified.
 */
priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The prices that were added to the price list.
 */
pricesAdded: { baseType: PriceListPrice, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PriceListPriceUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceListFixedPricesUpdatePayload", returnType: "PriceListFixedPricesUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents relative adjustments from one price list to other prices.
 * You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based
 * adjustment. Adjusted prices work in conjunction with exchange rules and rounding.
 *
 * [Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)
 * support both percentage increases and decreases.
 */
export type PriceListParent = {
/**
 * A price list adjustment.
 */
adjustment: { baseType: PriceListAdjustment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A price list's settings for adjustment.
 */
settings: { baseType: PriceListAdjustmentSettings, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceListParent", returnType: "PriceListParent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents information about pricing for a product variant
 * as defined on a price list, such as the price, compare at price, and origin type. You can use a `PriceListPrice` to specify a fixed price for a specific product variant. For examples, refer to [PriceListFixedPricesAdd](https://shopify.dev/api/admin-graphql/latest/mutations/priceListFixedPricesAdd) and [PriceList](https://shopify.dev/api/admin-graphql/latest/queries/priceList#section-examples).
 */
export type PriceListPrice = {
/**
 * The compare-at price of the product variant on this price list.
 */
compareAtPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration).
 */
originType: { baseType: BaseTypes.PriceListPriceOriginType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price of the product variant on this price list.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of quantity breaks for the product variant.
 */
quantityPriceBreaks: { baseType: QuantityPriceBreakConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.QuantityPriceBreakSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant associated with this price.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceListPrice", returnType: "PriceListPrice", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple PriceListPrices.
 */
export type PriceListPriceConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: PriceListPriceEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in PriceListPriceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: PriceListPrice, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceListPriceConnection", returnType: "PriceListPriceConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one PriceListPrice and a cursor during pagination.
 */
export type PriceListPriceEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of PriceListPriceEdge.
 */
node: { baseType: PriceListPrice, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceListPriceEdge", returnType: "PriceListPriceEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error for a failed price list price operation.
 */
export type PriceListPriceUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.PriceListPriceUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceListPriceUserError", returnType: "PriceListPriceUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `priceListUpdate` mutation.
 */
export type PriceListUpdatePayload = {
/**
 * The updated price list.
 */
priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PriceListUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceListUpdatePayload", returnType: "PriceListUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed contextual pricing operations.
 */
export type PriceListUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.PriceListUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceListUserError", returnType: "PriceListUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.
 *
 * We recommend using the types and queries detailed at [Getting started with discounts](https://shopify.dev/docs/apps/selling-strategies/discounts/getting-started) instead. These will replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
 */
export type PriceRule = {
/**
 * The maximum number of times that the price rule can be allocated onto an order.
 */
allocationLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The method by which the price rule's value is allocated to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.PriceRuleAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The application that created the price rule.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The
 * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that you can use in combination with
 * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
combinesWith: { baseType: DiscountCombinesWith, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the price rule was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customers that can use this price rule.
 */
customerSelection: { baseType: PriceRuleCustomerSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The
 * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
discountClass: { baseType: BaseTypes.DiscountClass, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the price rule's discount codes.
 */
discountCodes: { baseType: PriceRuleDiscountCodeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.DiscountCodeSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How many discount codes associated with the price rule.
 */
discountCodesCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the price rule ends. For open-ended price rules, use `null`.
 */
endsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
 */
entitlementToPrerequisiteQuantityRatio: { baseType: PriceRuleEntitlementToPrerequisiteQuantityRatio, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The paginated list of events associated with the price rule.
 */
events: { baseType: EventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.EventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the price rule's features.
 */
features: { baseType: BaseTypes.PriceRuleFeature, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Indicates whether there are any timeline comments on the price rule.
 */
hasTimelineComment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The items to which the price rule applies.
 */
itemEntitlements: { baseType: PriceRuleItemEntitlements, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The items required for the price rule to be applicable.
 */
itemPrerequisites: { baseType: PriceRuleLineItemPrerequisites, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the price rule can be applied only once per customer.
 */
oncePerCustomer: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of the entitled items must fall within this range for the price rule to be applicable.
 */
prerequisiteQuantityRange: { baseType: PriceRuleQuantityRange, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shipping cost must fall within this range for the price rule to be applicable.
 */
prerequisiteShippingPriceRange: { baseType: PriceRuleMoneyRange, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
 */
prerequisiteSubtotalRange: { baseType: PriceRuleMoneyRange, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
 */
prerequisiteToEntitlementQuantityRatio: { baseType: PriceRulePrerequisiteToEntitlementQuantityRatio, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * URLs that can be used to share the discount.
 */
shareableUrls: { baseType: PriceRuleShareableUrl, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The shipping lines to which the price rule applies.
 */
shippingEntitlements: { baseType: PriceRuleShippingLineEntitlements, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the price rule starts.
 */
startsAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the price rule.
 */
status: { baseType: BaseTypes.PriceRuleStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A detailed summary of the price rule.
 */
summary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The type of lines (line_item or shipping_line) to which the price rule applies.
 */
target: { baseType: BaseTypes.PriceRuleTarget, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the price rule.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total sales from orders where the price rule was used.
 */
totalSales: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of the price rule's features.
 */
traits: { baseType: BaseTypes.PriceRuleTrait, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
 */
usageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum number of times that the price rule can be used in total.
 */
usageLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A time period during which a price rule is applicable.
 */
validityPeriod: { baseType: PriceRuleValidityPeriod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the price rule.
 */
value: { members: { PriceRuleFixedAmountValue: PriceRuleFixedAmountValue; PriceRulePercentValue: PriceRulePercentValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the price rule.
 */
valueV2: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRule", returnType: "PriceRule", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & CommentEventSubject & HasEvents & LegacyInteroperability & Node

/**
 * Return type for `priceRuleActivate` mutation.
 */
export type PriceRuleActivatePayload = {
/**
 * The activated price rule.
 */
priceRule: { baseType: PriceRule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
priceRuleUserErrors: { baseType: PriceRuleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceRuleActivatePayload", returnType: "PriceRuleActivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple PriceRules.
 */
export type PriceRuleConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: PriceRuleEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in PriceRuleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: PriceRule, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleConnection", returnType: "PriceRuleConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `priceRuleCreate` mutation.
 */
export type PriceRuleCreatePayload = {
/**
 * The newly created price rule.
 */
priceRule: { baseType: PriceRule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The newly created discount code.
 */
priceRuleDiscountCode: { baseType: PriceRuleDiscountCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
priceRuleUserErrors: { baseType: PriceRuleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceRuleCreatePayload", returnType: "PriceRuleCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A selection of customers for whom the price rule applies.
 */
export type PriceRuleCustomerSelection = {
/**
 * List of customers to whom the price rule applies.
 */
customers: { baseType: CustomerConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.CustomerSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the price rule applies to all customers.
 */
forAllCustomers: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of customer segments that contain the customers who can use the price rule.
 */
segments: { baseType: Segment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceRuleCustomerSelection", returnType: "PriceRuleCustomerSelection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `priceRuleDeactivate` mutation.
 */
export type PriceRuleDeactivatePayload = {
/**
 * The deactivated price rule.
 */
priceRule: { baseType: PriceRule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
priceRuleUserErrors: { baseType: PriceRuleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceRuleDeactivatePayload", returnType: "PriceRuleDeactivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `priceRuleDelete` mutation.
 */
export type PriceRuleDeletePayload = {
/**
 * The ID price of the deleted price rule.
 */
deletedPriceRuleId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
priceRuleUserErrors: { baseType: PriceRuleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The shop of the deleted price rule.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceRuleDeletePayload", returnType: "PriceRuleDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A discount code of a price rule.
 */
export type PriceRuleDiscountCode = {
/**
 * The application that created the discount code.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The code to apply the discount.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
 */
usageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleDiscountCode", returnType: "PriceRuleDiscountCode", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple PriceRuleDiscountCodes.
 */
export type PriceRuleDiscountCodeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: PriceRuleDiscountCodeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in PriceRuleDiscountCodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: PriceRuleDiscountCode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleDiscountCodeConnection", returnType: "PriceRuleDiscountCodeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `priceRuleDiscountCodeCreate` mutation.
 */
export type PriceRuleDiscountCodeCreatePayload = {
/**
 * The updated price rule.
 */
priceRule: { baseType: PriceRule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The newly created discount code.
 */
priceRuleDiscountCode: { baseType: PriceRuleDiscountCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
priceRuleUserErrors: { baseType: PriceRuleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceRuleDiscountCodeCreatePayload", returnType: "PriceRuleDiscountCodeCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.
 */
export type PriceRuleDiscountCodeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of PriceRuleDiscountCodeEdge.
 */
node: { baseType: PriceRuleDiscountCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleDiscountCodeEdge", returnType: "PriceRuleDiscountCodeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `priceRuleDiscountCodeUpdate` mutation.
 */
export type PriceRuleDiscountCodeUpdatePayload = {
/**
 * The updated price rule.
 */
priceRule: { baseType: PriceRule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The updated discount code.
 */
priceRuleDiscountCode: { baseType: PriceRuleDiscountCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
priceRuleUserErrors: { baseType: PriceRuleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceRuleDiscountCodeUpdatePayload", returnType: "PriceRuleDiscountCodeUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one PriceRule and a cursor during pagination.
 */
export type PriceRuleEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of PriceRuleEdge.
 */
node: { baseType: PriceRule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleEdge", returnType: "PriceRuleEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
 */
export type PriceRuleEntitlementToPrerequisiteQuantityRatio = {
/**
 * The quantity of entitled items in the ratio.
 */
entitlementQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity of prerequisite items in the ratio.
 */
prerequisiteQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleEntitlementToPrerequisiteQuantityRatio", returnType: "PriceRuleEntitlementToPrerequisiteQuantityRatio", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The value of a fixed amount price rule.
 */
export type PriceRuleFixedAmountValue = {
/**
 * The monetary value of the price rule.
 */
amount: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleFixedAmountValue", returnType: "PriceRuleFixedAmountValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned.
 */
export type PriceRuleItemEntitlements = {
/**
 * The collections to which the price rule applies.
 */
collections: { baseType: CollectionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variants to which the price rule applies.
 */
productVariants: { baseType: ProductVariantConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The products to which the price rule applies.
 */
products: { baseType: ProductConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the price rule applies to all line items.
 */
targetAllLineItems: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleItemEntitlements", returnType: "PriceRuleItemEntitlements", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination.
 */
export type PriceRuleLineItemPrerequisites = {
/**
 * The collections required for the price rule to be applicable.
 */
collections: { baseType: CollectionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variants required for the price rule to be applicable.
 */
productVariants: { baseType: ProductVariantConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The products required for the price rule to be applicable.
 */
products: { baseType: ProductConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleLineItemPrerequisites", returnType: "PriceRuleLineItemPrerequisites", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A money range within which the price rule is applicable.
 */
export type PriceRuleMoneyRange = {
/**
 * The lower bound of the money range.
 */
greaterThan: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The lower bound or equal of the money range.
 */
greaterThanOrEqualTo: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The upper bound of the money range.
 */
lessThan: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The upper bound or equal of the money range.
 */
lessThanOrEqualTo: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "PriceRuleMoneyRange", returnType: "PriceRuleMoneyRange", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The value of a percent price rule.
 */
export type PriceRulePercentValue = {
/**
 * The percent value of the price rule.
 */
percentage: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRulePercentValue", returnType: "PriceRulePercentValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
 */
export type PriceRulePrerequisiteToEntitlementQuantityRatio = {
/**
 * The quantity of entitled items in the ratio.
 */
entitlementQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity of prerequisite items in the ratio.
 */
prerequisiteQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRulePrerequisiteToEntitlementQuantityRatio", returnType: "PriceRulePrerequisiteToEntitlementQuantityRatio", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A quantity range within which the price rule is applicable.
 */
export type PriceRuleQuantityRange = {
/**
 * The lower bound of the quantity range.
 */
greaterThan: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The lower bound or equal of the quantity range.
 */
greaterThanOrEqualTo: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The upper bound of the quantity range.
 */
lessThan: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The upper bound or equal of the quantity range.
 */
lessThanOrEqualTo: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "PriceRuleQuantityRange", returnType: "PriceRuleQuantityRange", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Shareable URL for the discount code associated with the price rule.
 */
export type PriceRuleShareableUrl = {
/**
 * The image URL of the item (product or collection) to which the discount applies.
 */
targetItemImage: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The type of page that's associated with the URL.
 */
targetType: { baseType: BaseTypes.PriceRuleShareableUrlTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the page that's associated with the URL.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL for the discount code.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleShareableUrl", returnType: "PriceRuleShareableUrl", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The shipping lines to which the price rule applies to.
 */
export type PriceRuleShippingLineEntitlements = {
/**
 * The codes for the countries to which the price rule applies to.
 */
countryCodes: { baseType: BaseTypes.CountryCode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether the price rule is applicable to countries that haven't been defined in the shop's shipping zones.
 */
includeRestOfWorld: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the price rule applies to all shipping lines.
 */
targetAllShippingLines: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleShippingLineEntitlements", returnType: "PriceRuleShippingLineEntitlements", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `priceRuleUpdate` mutation.
 */
export type PriceRuleUpdatePayload = {
/**
 * The updated price rule.
 */
priceRule: { baseType: PriceRule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The updated discount code.
 */
priceRuleDiscountCode: { baseType: PriceRuleDiscountCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
priceRuleUserErrors: { baseType: PriceRuleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PriceRuleUpdatePayload", returnType: "PriceRuleUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an error that happens during execution of a price rule mutation.
 */
export type PriceRuleUserError = {
/**
 * Error code to uniquely identify the error.
 */
code: { baseType: BaseTypes.PriceRuleErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleUserError", returnType: "PriceRuleUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A time period during which a price rule is applicable.
 */
export type PriceRuleValidityPeriod = {
/**
 * The time after which the price rule becomes invalid.
 */
end: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The time after which the price rule is valid.
 */
start: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PriceRuleValidityPeriod", returnType: "PriceRuleValidityPeriod", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The type of the price rule value. The price rule value might be a percentage value, or a fixed amount.
 */
export type PriceRuleValue = PriceRuleFixedAmountValue | PriceRulePercentValue

/**
 * One type of value given to a customer when a discount is applied to an order.
 * The application of a discount with this value gives the customer the specified percentage off a specified item.
 */
export type PricingPercentageValue = {
/**
 * The percentage value of the object. This is a number between -100 (free) and 0 (no discount).
 */
percentage: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PricingPercentageValue", returnType: "PricingPercentageValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The type of value given to a customer when a discount is applied to an order. For example, the application of the discount might give the customer a percentage off a specified item. Alternatively, the application of the discount might give the customer a monetary value in a given currency off an order.
 */
export type PricingValue = MoneyV2 | PricingPercentageValue

/**
 * Private metafields represent custom metadata that is attached to a resource.
 * Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.
 *
 * An application can create a maximum of 10 private metafields per shop resource.
 *
 * Private metafields are deprecated. Metafields created using a reserved namespace are private by default. See our guide for
 * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
 */
export type PrivateMetafield = {
/**
 * The date and time when the private metafield was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the private metafield.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The key name of the private metafield.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The namespace of the private metafield.
 */
namespace: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the private metafield was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of a private metafield.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Represents the private metafield value type.
 */
valueType: { baseType: BaseTypes.PrivateMetafieldValueType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PrivateMetafield", returnType: "PrivateMetafield", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple PrivateMetafields.
 */
export type PrivateMetafieldConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: PrivateMetafieldEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in PrivateMetafieldEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: PrivateMetafield, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PrivateMetafieldConnection", returnType: "PrivateMetafieldConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `privateMetafieldDelete` mutation.
 */
export type PrivateMetafieldDeletePayload = {
/**
 * The ID of private metafield that was deleted.
 */
deletedPrivateMetafieldId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PrivateMetafieldDeletePayload", returnType: "PrivateMetafieldDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one PrivateMetafield and a cursor during pagination.
 */
export type PrivateMetafieldEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of PrivateMetafieldEdge.
 */
node: { baseType: PrivateMetafield, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PrivateMetafieldEdge", returnType: "PrivateMetafieldEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `privateMetafieldUpsert` mutation.
 */
export type PrivateMetafieldUpsertPayload = {
/**
 * The private metafield that was created or updated.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PrivateMetafieldUpsertPayload", returnType: "PrivateMetafieldUpsertPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export type Product = {
/**
 * The number of
 * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that a resource is published to, without
 * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
 */
availablePublicationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The description of the product, with
 * HTML tags. For example, the description might include
 * bold `<strong></strong>` and italic `<i></i>` text.
 */
bodyHtml: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of [components](https://shopify.dev/docs/apps/build/product-merchandising/bundles/add-product-fixed-bundle)
 * that are associated with a product in a bundle.
 */
bundleComponents: { baseType: ProductBundleComponentConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The category of a product
 * from [Shopify's Standard Product Taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
 */
category: { baseType: TaxonomyCategory, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection)
 * that include the product.
 */
collections: { baseType: CollectionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CollectionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A special product type that combines separate products from a store into a single product listing.
 * [Combined listings](https://shopify.dev/apps/build/product-merchandising/combined-listings) are connected
 * by a shared option, such as color, model, or dimension.
 */
combinedListing: { baseType: CombinedListing, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The [role of the product](https://shopify.dev/docs/apps/build/product-merchandising/combined-listings/build-for-combined-listings)
 * in a combined listing.
 *
 * If `null`, then the product isn't part of any combined listing.
 */
combinedListingRole: { baseType: BaseTypes.CombinedListingsRole, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The [compare-at price range](https://help.shopify.com/manual/products/details/product-pricing/sale-pricing)
 * of the product in the shop's default currency.
 */
compareAtPriceRange: { baseType: ProductCompareAtPriceRange, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The pricing that applies to a customer in a specific context. For example, a price might vary depending on the customer's location. As of API version 2025-04, only active markets are considered in the price resolution.
 */
contextualPricing: { baseType: ProductContextualPricing, arguments: { context: InputTypes.ContextualPricingContext }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the product was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The custom product type specified by the merchant.
 */
customProductType: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID.
 */
defaultCursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A single-line description of the product,
 * with [HTML tags](https://developer.mozilla.org/en-US/docs/Web/HTML) removed.
 */
description: { baseType: BaseTypes.String, arguments: { truncateAt?: BaseTypes.Int | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of the product, with
 * HTML tags. For example, the description might include
 * bold `<strong></strong>` and italic `<i></i>` text.
 */
descriptionHtml: { baseType: BaseTypes.HTML, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Stripped description of the product, single line with HTML tags removed.
 * Truncated to 60 characters.
 */
descriptionPlainSummary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The featured image for the product.
 */
featuredImage: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The featured [media](https://shopify.dev/docs/apps/build/online-store/product-media)
 * associated with the product.
 */
featuredMedia: { members: { ExternalVideo: ExternalVideo; MediaImage: MediaImage; Model3d: Model3d; Video: Video }, fields: { alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; mediaContentType: { baseType: BaseTypes.MediaContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; mediaErrors: { baseType: MediaError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; mediaWarnings: { baseType: MediaWarning, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.MediaStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The information that lets merchants know what steps they need to take
 * to make sure that the app is set up correctly.
 *
 * For example, if a merchant hasn't set up a product correctly in the app,
 * then the feedback might include a message that says "You need to add a price
 * to this product".
 */
feedback: { baseType: ResourceFeedback, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view the gift card in a store.
 */
giftCardTemplateSuffix: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A unique, human-readable string of the product's title. A handle can contain letters, hyphens (`-`), and numbers, but no spaces.
 * The handle is used in the online store URL for the product.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the product has only a single variant with the default option and value.
 */
hasOnlyDefaultVariant: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the product has variants that are out of stock.
 */
hasOutOfStockVariants: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether at least one of the product variants requires
 * [bundle components](https://shopify.dev/docs/apps/build/product-merchandising/bundles/add-product-fixed-bundle).
 *
 * Learn more about
 * [store eligibility for bundles](https://shopify.dev/docs/apps/build/product-merchandising/bundles#store-eligibility).
 */
hasVariantsThatRequiresComponents: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The images associated with the product.
 */
images: { baseType: ImageConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.ProductImageSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the product
 * is in a specified
 * [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 */
inCollection: { baseType: BaseTypes.Boolean, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the product is a gift card.
 */
isGiftCard: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [media](https://shopify.dev/docs/apps/build/online-store/product-media) associated with the product. Valid media are images, 3D models, videos.
 */
media: { baseType: MediaConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.ProductMediaSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total count of [media](https://shopify.dev/docs/apps/build/online-store/product-media)
 * that's associated with a product.
 */
mediaCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [preview URL](https://help.shopify.com/manual/online-store/setting-up#preview-your-store) for the online store.
 */
onlineStorePreviewUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product's URL on the online store.
 * If `null`, then the product isn't published to the online store sales channel.
 */
onlineStoreUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of product options. The limit is defined by the
 * [shop's resource limits for product options](https://shopify.dev/docs/api/admin-graphql/latest/objects/Shop#field-resourcelimits) (`Shop.resourceLimits.maxProductOptions`).
 */
options: { baseType: ProductOption, arguments: { first?: BaseTypes.Int | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The price range of the product.
 */
priceRange: { baseType: ProductPriceRange, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The minimum and maximum prices of a product, expressed in decimal numbers.
 * For example, if the product is priced between $10.00 and $50.00,
 * then the price range is $10.00 - $50.00.
 */
priceRangeV2: { baseType: ProductPriceRangeV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product category specified by the merchant.
 */
productCategory: { baseType: ProductCategory, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of the channels where the product is published.
 */
productPublications: { baseType: ProductPublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [product type](https://help.shopify.com/manual/products/details/product-type)
 * that merchants define.
 */
productType: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of
 * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that a resource is published to, without
 * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
 */
publicationCount: { baseType: BaseTypes.Int, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the channels where the product is published.
 */
publications: { baseType: ProductPublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the product was published to the online store.
 */
publishedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the product is published for a customer only in a specified context. For example, a product might be published for a customer only in a specific location.
 */
publishedInContext: { baseType: BaseTypes.Boolean, arguments: { context: InputTypes.ContextualPublicationContext }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to a specific channel.
 */
publishedOnChannel: { baseType: BaseTypes.Boolean, arguments: { channelId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to a
 * [channel](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel).
 * For example, the resource might be published to the online store channel.
 */
publishedOnCurrentChannel: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to the app's
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 * For example, the resource might be published to the app's online store channel.
 */
publishedOnCurrentPublication: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to a specified
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 */
publishedOnPublication: { baseType: BaseTypes.Boolean, arguments: { publicationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the product can only be purchased with
 * a [selling plan](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans).
 * Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores.
 * If you update a product to be subscription-only (`requiresSellingPlan:false`), then the product is unpublished from all channels, except the online store.
 */
requiresSellingPlan: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The resource that's either published or staged to be published to
 * the [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 */
resourcePublicationOnCurrentPublication: { baseType: ResourcePublicationV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of resources that are published to a
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 */
resourcePublications: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of
 * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that a resource is published to, without
 * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
 */
resourcePublicationsCount: { baseType: Count, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of resources that are either published or staged to be published to a
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 */
resourcePublicationsV2: { baseType: ResourcePublicationV2Connection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; catalogType?: BaseTypes.CatalogType | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A count of [selling plan groups](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans/build-a-selling-plan)
 * that are associated with the product.
 */
sellingPlanGroupCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of all [selling plan groups](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans/build-a-selling-plan)
 * that are associated with the product either directly, or through the product's variants.
 */
sellingPlanGroups: { baseType: SellingPlanGroupConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A count of [selling plan groups](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans/build-a-selling-plan)
 * that are associated with the product.
 */
sellingPlanGroupsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The [SEO title and description](https://help.shopify.com/manual/promoting-marketing/seo/adding-keywords)
 * that are associated with a product.
 */
seo: { baseType: SEO, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The standardized product type in the Shopify product taxonomy.
 */
standardizedProductType: { baseType: StandardizedProductType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The [product status](https://help.shopify.com/manual/products/details/product-details-page#product-status),
 * which controls visibility across all sales channels.
 */
status: { baseType: BaseTypes.ProductStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Storefront GraphQL API ID of the `Product`.
 *
 * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
 */
storefrontId: { baseType: BaseTypes.StorefrontID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A comma-separated list of searchable keywords that are
 * associated with the product. For example, a merchant might apply the `sports`
 * and `summer` tags to products that are associated with sportwear for summer.
 *
 * Updating `tags` overwrites
 * any existing tags that were previously added to the product. To add new tags without overwriting
 * existing tags, use the [`tagsAdd`](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
 * mutation.
 */
tags: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view the product in a store.
 */
templateSuffix: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name for the product that displays to customers. The title is used to construct the product's handle.
 * For example, if a product is titled "Black Sunglasses", then the handle is `black-sunglasses`.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity of inventory that's in stock.
 */
totalInventory: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
 * that are associated with the product.
 */
totalVariants: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether [inventory tracking](https://help.shopify.com/manual/products/inventory/getting-started-with-inventory/set-up-inventory-tracking)
 * has been enabled for the product.
 */
tracksInventory: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of channels that the resource is not published to.
 */
unpublishedChannels: { baseType: ChannelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that the resource isn't published to.
 */
unpublishedPublications: { baseType: PublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the product was last modified.
 * A product's `updatedAt` value can change for different reasons. For example, if an order
 * is placed for a product that has inventory tracking set up, then the inventory adjustment
 * is counted as an update.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant) associated with the product.
 */
variants: { baseType: ProductVariantConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.ProductVariantSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
 * that are associated with the product.
 */
variantsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the product's vendor.
 */
vendor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Product", returnType: "Product", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & LegacyInteroperability & Navigable & Node & OnlineStorePreviewable & Publishable

/**
 * Return type for `productAppendImages` mutation.
 */
export type ProductAppendImagesPayload = {
/**
 * List of new images appended to the product.
 */
newImages: { baseType: Image, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductAppendImagesPayload", returnType: "ProductAppendImagesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The product's component information.
 */
export type ProductBundleComponent = {
/**
 * The product that's related as a component.
 */
componentProduct: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of products' variants that are components.
 */
componentVariants: { baseType: ProductVariantConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of component variants for the product component.
 */
componentVariantsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The options in the parent and the component options they're connected to, along with the chosen option values
 * that appear in the bundle.
 */
optionSelections: { baseType: ProductBundleComponentOptionSelection, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The quantity of the component product set for this bundle line.
 * It will be null if there's a quantityOption present.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The quantity as option of the component product. It will be null if there's a quantity set.
 */
quantityOption: { baseType: ProductBundleComponentQuantityOption, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ProductBundleComponent", returnType: "ProductBundleComponent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple ProductBundleComponents.
 */
export type ProductBundleComponentConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ProductBundleComponentEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ProductBundleComponentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ProductBundleComponent, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductBundleComponentConnection", returnType: "ProductBundleComponentConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ProductBundleComponent and a cursor during pagination.
 */
export type ProductBundleComponentEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ProductBundleComponentEdge.
 */
node: { baseType: ProductBundleComponent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductBundleComponentEdge", returnType: "ProductBundleComponentEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A relationship between a component option and a parent option.
 */
export type ProductBundleComponentOptionSelection = {
/**
 * The option that existed on the component product prior to the fixed bundle creation.
 */
componentOption: { baseType: ProductOption, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The option that was created on the parent product.
 */
parentOption: { baseType: ProductOption, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The component option values that are actively selected for this relationship.
 */
values: { baseType: ProductBundleComponentOptionSelectionValue, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductBundleComponentOptionSelection", returnType: "ProductBundleComponentOptionSelection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A component option value related to a bundle line.
 */
export type ProductBundleComponentOptionSelectionValue = {
/**
 * Selection status of the option.
 */
selectionStatus: { baseType: BaseTypes.ProductBundleComponentOptionSelectionStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the option.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductBundleComponentOptionSelectionValue", returnType: "ProductBundleComponentOptionSelectionValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A quantity option related to a bundle.
 */
export type ProductBundleComponentQuantityOption = {
/**
 * The name of the option value.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The option that was created on the parent product.
 */
parentOption: { baseType: ProductOption, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The quantity values of the option.
 */
values: { baseType: ProductBundleComponentQuantityOptionValue, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductBundleComponentQuantityOption", returnType: "ProductBundleComponentQuantityOption", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A quantity option value related to a componentized product.
 */
export type ProductBundleComponentQuantityOptionValue = {
/**
 * The name of the option value.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity of the option value.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductBundleComponentQuantityOptionValue", returnType: "ProductBundleComponentQuantityOptionValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productBundleCreate` mutation.
 */
export type ProductBundleCreatePayload = {
/**
 * The asynchronous ProductBundleOperation creating the componentized product.
 */
productBundleOperation: { baseType: ProductBundleOperation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductBundleCreatePayload", returnType: "ProductBundleCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Defines errors encountered while managing a product bundle.
 */
export type ProductBundleMutationUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductBundleMutationUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductBundleMutationUserError", returnType: "ProductBundleMutationUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An entity that represents details of an asynchronous
 * [ProductBundleCreate](https://shopify.dev/api/admin-graphql/current/mutations/productBundleCreate) or
 * [ProductBundleUpdate](https://shopify.dev/api/admin-graphql/current/mutations/productBundleUpdate) mutation.
 *
 * By querying this entity with the
 * [productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query
 * using the ID that was returned when the bundle was created or updated, this can be used to check the status of an operation.
 *
 * The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.
 *
 * The `product` field provides the details of the created or updated product.
 *
 * The `userErrors` field provides mutation errors that occurred during the operation.
 */
export type ProductBundleOperation = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product on which the operation is being performed.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of this operation.
 */
status: { baseType: BaseTypes.ProductOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns mutation errors occurred during background mutation processing.
 */
userErrors: { baseType: ProductBundleMutationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductBundleOperation", returnType: "ProductBundleOperation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node & ProductOperation

/**
 * Return type for `productBundleUpdate` mutation.
 */
export type ProductBundleUpdatePayload = {
/**
 * The asynchronous ProductBundleOperation updating the componentized product.
 */
productBundleOperation: { baseType: ProductBundleOperation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductBundleUpdatePayload", returnType: "ProductBundleUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The details of a specific product category within the [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
 */
export type ProductCategory = {
/**
 * The product taxonomy node associated with the product category.
 */
productTaxonomyNode: { baseType: ProductTaxonomyNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ProductCategory", returnType: "ProductCategory", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productChangeStatus` mutation.
 */
export type ProductChangeStatusPayload = {
/**
 * The product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductChangeStatusUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductChangeStatusPayload", returnType: "ProductChangeStatusPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `ProductChangeStatus`.
 */
export type ProductChangeStatusUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductChangeStatusUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductChangeStatusUserError", returnType: "ProductChangeStatusUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The compare-at price range of the product.
 */
export type ProductCompareAtPriceRange = {
/**
 * The highest variant's compare-at price.
 */
maxVariantCompareAtPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The lowest variant's compare-at price.
 */
minVariantCompareAtPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductCompareAtPriceRange", returnType: "ProductCompareAtPriceRange", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Products.
 */
export type ProductConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ProductEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ProductEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Product, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductConnection", returnType: "ProductConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The price of a product in a specific country.
 * Prices vary between countries.
 * Refer to [Product](https://shopify.dev/docs/api/admin-graphql/latest/queries/product?example=Get+the+price+range+for+a+product+for+buyers+from+Canada)
 * for more information on how to use this object.
 */
export type ProductContextualPricing = {
/**
 * The number of fixed quantity rules for the product's variants on the price list.
 */
fixedQuantityRulesCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The pricing of the variant with the highest price in the given context.
 */
maxVariantPricing: { baseType: ProductVariantContextualPricing, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The pricing of the variant with the lowest price in the given context.
 */
minVariantPricing: { baseType: ProductVariantContextualPricing, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The minimum and maximum prices of a product, expressed in decimal numbers.
 * For example, if the product is priced between $10.00 and $50.00,
 * then the price range is $10.00 - $50.00.
 */
priceRange: { baseType: ProductPriceRangeV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductContextualPricing", returnType: "ProductContextualPricing", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productCreateMedia` mutation.
 */
export type ProductCreateMediaPayload = {
/**
 * The newly created media.
 */
media: { members: { ExternalVideo: ExternalVideo; MediaImage: MediaImage; Model3d: Model3d; Video: Video }, fields: { alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; mediaContentType: { baseType: BaseTypes.MediaContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; mediaErrors: { baseType: MediaError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; mediaWarnings: { baseType: MediaWarning, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.MediaStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
mediaUserErrors: { baseType: MediaUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The product associated with the media.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductCreateMediaPayload", returnType: "ProductCreateMediaPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productCreate` mutation.
 */
export type ProductCreatePayload = {
/**
 * The product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shop associated with the product.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductCreatePayload", returnType: "ProductCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productDeleteAsync` mutation.
 */
export type ProductDeleteAsyncPayload = {
/**
 * The ID of the product that was requested to be deleted.
 */
deleteProductId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The background job that will delete the product and its associated variants and media.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductDeleteAsyncPayload", returnType: "ProductDeleteAsyncPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productDeleteImages` mutation.
 */
export type ProductDeleteImagesPayload = {
/**
 * The array of image IDs to delete.
 */
deletedImageIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductDeleteImagesPayload", returnType: "ProductDeleteImagesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productDeleteMedia` mutation.
 */
export type ProductDeleteMediaPayload = {
/**
 * List of media IDs which were deleted.
 */
deletedMediaIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * List of product image IDs which were deleted.
 */
deletedProductImageIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
mediaUserErrors: { baseType: MediaUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The product associated with the deleted media.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductDeleteMediaPayload", returnType: "ProductDeleteMediaPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productDelete` mutation.
 */
export type ProductDeletePayload = {
/**
 * The ID of the deleted product.
 */
deletedProductId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shop associated with the product.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductDeletePayload", returnType: "ProductDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurred while setting the activation status of an inventory item.
 */
export type ProductDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductDeleteUserError", returnType: "ProductDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `productDuplicateAsyncV2` mutation.
 */
export type ProductDuplicateAsyncV2Payload = {
/**
 * The duplicated product ID.
 */
duplicatedProductId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The asynchronous job for duplicating the product.
 */
productDuplicateJobId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductDuplicateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductDuplicateAsyncV2Payload", returnType: "ProductDuplicateAsyncV2Payload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a product duplication job.
 */
export type ProductDuplicateJob = {
/**
 * This indicates if the job is still queued or has been run.
 */
done: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID that's returned when running an asynchronous mutation.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductDuplicateJob", returnType: "ProductDuplicateJob", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productDuplicate` mutation.
 */
export type ProductDuplicatePayload = {
/**
 * The asynchronous job that duplicates the product images.
 */
imageJob: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The duplicated product.
 */
newProduct: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The user's shop.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductDuplicatePayload", returnType: "ProductDuplicatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurred while duplicating the product.
 */
export type ProductDuplicateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductDuplicateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductDuplicateUserError", returnType: "ProductDuplicateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An auto-generated type which holds one Product and a cursor during pagination.
 */
export type ProductEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ProductEdge.
 */
node: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductEdge", returnType: "ProductEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A product feed.
 */
export type ProductFeed = {
/**
 * The country of the product feed.
 */
country: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The language of the product feed.
 */
language: { baseType: BaseTypes.LanguageCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of the product feed.
 */
status: { baseType: BaseTypes.ProductFeedStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductFeed", returnType: "ProductFeed", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple ProductFeeds.
 */
export type ProductFeedConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ProductFeedEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ProductFeedEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ProductFeed, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductFeedConnection", returnType: "ProductFeedConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productFeedCreate` mutation.
 */
export type ProductFeedCreatePayload = {
/**
 * The newly created product feed.
 */
productFeed: { baseType: ProductFeed, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductFeedCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductFeedCreatePayload", returnType: "ProductFeedCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `ProductFeedCreate`.
 */
export type ProductFeedCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductFeedCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductFeedCreateUserError", returnType: "ProductFeedCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `productFeedDelete` mutation.
 */
export type ProductFeedDeletePayload = {
/**
 * The ID of the product feed that was deleted.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductFeedDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductFeedDeletePayload", returnType: "ProductFeedDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `ProductFeedDelete`.
 */
export type ProductFeedDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductFeedDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductFeedDeleteUserError", returnType: "ProductFeedDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An auto-generated type which holds one ProductFeed and a cursor during pagination.
 */
export type ProductFeedEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ProductFeedEdge.
 */
node: { baseType: ProductFeed, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductFeedEdge", returnType: "ProductFeedEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productFullSync` mutation.
 */
export type ProductFullSyncPayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductFullSyncUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductFullSyncPayload", returnType: "ProductFullSyncPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `ProductFullSync`.
 */
export type ProductFullSyncUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductFullSyncUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductFullSyncUserError", returnType: "ProductFullSyncUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `productImageUpdate` mutation.
 */
export type ProductImageUpdatePayload = {
/**
 * The image that has been updated.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductImageUpdatePayload", returnType: "ProductImageUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productJoinSellingPlanGroups` mutation.
 */
export type ProductJoinSellingPlanGroupsPayload = {
/**
 * The product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SellingPlanGroupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductJoinSellingPlanGroupsPayload", returnType: "ProductJoinSellingPlanGroupsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productLeaveSellingPlanGroups` mutation.
 */
export type ProductLeaveSellingPlanGroupsPayload = {
/**
 * The product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SellingPlanGroupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductLeaveSellingPlanGroupsPayload", returnType: "ProductLeaveSellingPlanGroupsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An entity that represents details of an asynchronous operation on a product.
 */
export type ProductOperation = {
/**
 * The product on which the operation is being performed.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of this operation.
 */
status: { baseType: BaseTypes.ProductOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The product property names. For example, "Size", "Color", and "Material".
 * Variants are selected based on permutations of these options.
 * The limit for each product property name is 255 characters.
 */
export type ProductOption = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The metafield identifier linked to this option.
 */
linkedMetafield: { baseType: LinkedMetafield, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product option’s name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Similar to values, option_values returns all the corresponding option value objects to the product option, including values not assigned to any variants.
 */
optionValues: { baseType: ProductOptionValue, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The product option's position.
 */
position: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The corresponding value to the product option name.
 */
values: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductOption", returnType: "ProductOption", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasPublishedTranslations & Node

/**
 * Return type for `productOptionUpdate` mutation.
 */
export type ProductOptionUpdatePayload = {
/**
 * The product with which the option being updated is associated.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductOptionUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductOptionUpdatePayload", returnType: "ProductOptionUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed `ProductOptionUpdate` mutation.
 */
export type ProductOptionUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductOptionUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductOptionUpdateUserError", returnType: "ProductOptionUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The product option value names. For example, "Red", "Blue", and "Green" for a "Color" option.
 */
export type ProductOptionValue = {
/**
 * Whether the product option value has any linked variants.
 */
hasVariants: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the linked metafield.
 */
linkedMetafieldValue: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the product option value.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The swatch associated with the product option value.
 */
swatch: { baseType: ProductOptionValueSwatch, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductOptionValue", returnType: "ProductOptionValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasPublishedTranslations & Node

/**
 * A swatch associated with a product option value.
 */
export type ProductOptionValueSwatch = {
/**
 * The color representation of the swatch.
 */
color: { baseType: BaseTypes.Color, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * An image representation of the swatch.
 */
image: { baseType: MediaImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ProductOptionValueSwatch", returnType: "ProductOptionValueSwatch", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productOptionsCreate` mutation.
 */
export type ProductOptionsCreatePayload = {
/**
 * The updated product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductOptionsCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductOptionsCreatePayload", returnType: "ProductOptionsCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed `ProductOptionsCreate` mutation.
 */
export type ProductOptionsCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductOptionsCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductOptionsCreateUserError", returnType: "ProductOptionsCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `productOptionsDelete` mutation.
 */
export type ProductOptionsDeletePayload = {
/**
 * IDs of the options deleted.
 */
deletedOptionsIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The updated product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductOptionsDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductOptionsDeletePayload", returnType: "ProductOptionsDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed `ProductOptionsDelete` mutation.
 */
export type ProductOptionsDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductOptionsDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductOptionsDeleteUserError", returnType: "ProductOptionsDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `productOptionsReorder` mutation.
 */
export type ProductOptionsReorderPayload = {
/**
 * The updated product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductOptionsReorderUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductOptionsReorderPayload", returnType: "ProductOptionsReorderPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed `ProductOptionsReorder` mutation.
 */
export type ProductOptionsReorderUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductOptionsReorderUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductOptionsReorderUserError", returnType: "ProductOptionsReorderUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The price range of the product.
 */
export type ProductPriceRange = {
/**
 * The highest variant's price.
 */
maxVariantPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The lowest variant's price.
 */
minVariantPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductPriceRange", returnType: "ProductPriceRange", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The price range of the product.
 */
export type ProductPriceRangeV2 = {
/**
 * The highest variant's price.
 */
maxVariantPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The lowest variant's price.
 */
minVariantPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductPriceRangeV2", returnType: "ProductPriceRangeV2", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the channels where a product is published.
 */
export type ProductPublication = {
/**
 * The channel where the product was or is published.
 */
channel: { baseType: Channel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the publication is published or not.
 */
isPublished: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product that was or is going to be published on the channel.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date that the product was or is going to be published on the channel.
 */
publishDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ProductPublication", returnType: "ProductPublication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple ProductPublications.
 */
export type ProductPublicationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ProductPublicationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ProductPublicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ProductPublication, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductPublicationConnection", returnType: "ProductPublicationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ProductPublication and a cursor during pagination.
 */
export type ProductPublicationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ProductPublicationEdge.
 */
node: { baseType: ProductPublication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductPublicationEdge", returnType: "ProductPublicationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productPublish` mutation.
 */
export type ProductPublishPayload = {
/**
 * The product that has been published.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The channels where the product is published.
 */
productPublications: { baseType: ProductPublication, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The user's shop.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductPublishPayload", returnType: "ProductPublishPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productReorderImages` mutation.
 */
export type ProductReorderImagesPayload = {
/**
 * The asynchronous job which reorders the images.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductReorderImagesPayload", returnType: "ProductReorderImagesPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productReorderMedia` mutation.
 */
export type ProductReorderMediaPayload = {
/**
 * The asynchronous job which reorders the media.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
mediaUserErrors: { baseType: MediaUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductReorderMediaPayload", returnType: "ProductReorderMediaPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Reports the status of product for a Sales Channel or Storefront API.
 * This might include why a product is not available in a Sales Channel
 * and how a merchant might fix this.
 */
export type ProductResourceFeedback = {
/**
 * The time when the feedback was generated. Used to help determine whether
 * incoming feedback is outdated compared to existing feedback.
 */
feedbackGeneratedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The feedback messages presented to the merchant.
 */
messages: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The ID of the product associated with the feedback.
 */
productId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The timestamp of the product associated with the feedback.
 */
productUpdatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Conveys the state of the feedback and whether it requires merchant action or not.
 */
state: { baseType: BaseTypes.ResourceFeedbackState, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductResourceFeedback", returnType: "ProductResourceFeedback", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A sale associated with a product.
 */
export type ProductSale = {
/**
 * The type of order action that the sale represents.
 */
actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the sale.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line item for the associated sale.
 */
lineItem: { baseType: LineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line type assocated with the sale.
 */
lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units either ordered or intended to be returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All individual taxes associated with the sale.
 */
taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total sale amount after taxes and discounts.
 */
totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale after taxes.
 */
totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale before taxes.
 */
totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of taxes for the sale.
 */
totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductSale", returnType: "ProductSale", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Sale

/**
 * An entity that represents details of an asynchronous
 * [ProductSet](https://shopify.dev/api/admin-graphql/current/mutations/productSet) mutation.
 *
 * By querying this entity with the
 * [productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query
 * using the ID that was returned
 * [when the product was created or updated](https://shopify.dev/api/admin/migrate/new-product-model/sync-data#create-a-product-with-variants-and-options-asynchronously),
 * this can be used to check the status of an operation.
 *
 * The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.
 *
 * The `product` field provides the details of the created or updated product.
 *
 * The `userErrors` field provides mutation errors that occurred during the operation.
 */
export type ProductSetOperation = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product on which the operation is being performed.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of this operation.
 */
status: { baseType: BaseTypes.ProductOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns mutation errors occurred during background mutation processing.
 */
userErrors: { baseType: ProductSetUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductSetOperation", returnType: "ProductSetOperation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node & ProductOperation

/**
 * Return type for `productSet` mutation.
 */
export type ProductSetPayload = {
/**
 * The product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product set operation, returned when run in asynchronous mode.
 */
productSetOperation: { baseType: ProductSetOperation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductSetUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductSetPayload", returnType: "ProductSetPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Defines errors for ProductSet mutation.
 */
export type ProductSetUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductSetUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductSetUserError", returnType: "ProductSetUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17) node.
 */
export type ProductTaxonomyNode = {
/**
 * The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
 */
fullName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the product taxonomy node.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the node is a leaf node.
 */
isLeaf: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the node is a root node.
 */
isRoot: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the product taxonomy node. For example, Dog Beds.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductTaxonomyNode", returnType: "ProductTaxonomyNode", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `productUnpublish` mutation.
 */
export type ProductUnpublishPayload = {
/**
 * The product that has been unpublished.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The user's shop.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductUnpublishPayload", returnType: "ProductUnpublishPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productUpdateMedia` mutation.
 */
export type ProductUpdateMediaPayload = {
/**
 * The updated media object.
 */
media: { members: { ExternalVideo: ExternalVideo; MediaImage: MediaImage; Model3d: Model3d; Video: Video }, fields: { alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; mediaContentType: { baseType: BaseTypes.MediaContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; mediaErrors: { baseType: MediaError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; mediaWarnings: { baseType: MediaWarning, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.MediaStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
mediaUserErrors: { baseType: MediaUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The product on which media was updated.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductUpdateMediaPayload", returnType: "ProductUpdateMediaPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productUpdate` mutation.
 */
export type ProductUpdatePayload = {
/**
 * The updated product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductUpdatePayload", returnType: "ProductUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a product variant.
 */
export type ProductVariant = {
/**
 * Whether the product variant is available for sale.
 */
availableForSale: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the barcode associated with the product.
 */
barcode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The compare-at price of the variant in the default shop currency.
 */
compareAtPrice: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The pricing that applies for a customer in a given context. As of API version 2025-04, only active markets are considered in the price resolution.
 */
contextualPricing: { baseType: ProductVariantContextualPricing, arguments: { context: InputTypes.ContextualPricingContext }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the variant was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID.
 */
defaultCursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The [delivery profile](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryProfile) for the variant.
 */
deliveryProfile: { baseType: DeliveryProfile, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Display name of the variant, based on product's title + variant's title.
 */
displayName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The featured image for the variant.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The inventory item, which is used to query for inventory information.
 */
inventoryItem: { baseType: InventoryItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether customers are allowed to place an order for the product variant when it's out of stock.
 */
inventoryPolicy: { baseType: BaseTypes.ProductVariantInventoryPolicy, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total sellable quantity of the variant.
 */
inventoryQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The media associated with the product variant.
 */
media: { baseType: MediaConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order of the product variant in the list of product variants. The first position in the list is 1.
 */
position: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of prices and compare-at prices in the presentment currencies for this shop.
 */
presentmentPrices: { baseType: ProductVariantPricePairConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; presentmentCurrencies?: Array<BaseTypes.CurrencyCode> | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price of the product variant in the default shop currency.
 */
price: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product that this variant belongs to.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the product variant components.
 */
productVariantComponents: { baseType: ProductVariantComponentConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a product variant requires components. The default value is `false`.
 * If `true`, then the product variant can only be purchased as a parent bundle with components and it will be omitted
 * from channels that don't support bundles.
 */
requiresComponents: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of product options applied to the variant.
 */
selectedOptions: { baseType: SelectedOption, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total sellable quantity of the variant for online channels.
 * This doesn't represent the total available inventory or capture
 * [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
 */
sellableOnlineQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Count of selling plan groups associated with the product variant.
 */
sellingPlanGroupCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of all selling plan groups defined in the current shop associated with the product variant.
 */
sellingPlanGroups: { baseType: SellingPlanGroupConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Count of selling plan groups associated with the product variant.
 */
sellingPlanGroupsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A case-sensitive identifier for the product variant in the shop.
 * Required in order to connect to a fulfillment service.
 */
sku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The Storefront GraphQL API ID of the `ProductVariant`.
 *
 * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
 */
storefrontId: { baseType: BaseTypes.StorefrontID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The tax code for the product variant.
 */
taxCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether a tax is charged when the product variant is sold.
 */
taxable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the product variant.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The date and time (ISO 8601 format) when the product variant was last modified.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariant", returnType: "ProductVariant", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & LegacyInteroperability & Navigable & Node

/**
 * Return type for `productVariantAppendMedia` mutation.
 */
export type ProductVariantAppendMediaPayload = {
/**
 * The product associated with the variants and media.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product variants that were updated.
 */
productVariants: { baseType: ProductVariant, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MediaUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantAppendMediaPayload", returnType: "ProductVariantAppendMediaPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A product variant component associated with a product variant.
 */
export type ProductVariantComponent = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant associated with the component.
 */
productVariant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The required quantity of the component.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantComponent", returnType: "ProductVariantComponent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple ProductVariantComponents.
 */
export type ProductVariantComponentConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ProductVariantComponentEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ProductVariantComponentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ProductVariantComponent, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantComponentConnection", returnType: "ProductVariantComponentConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ProductVariantComponent and a cursor during pagination.
 */
export type ProductVariantComponentEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ProductVariantComponentEdge.
 */
node: { baseType: ProductVariantComponent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantComponentEdge", returnType: "ProductVariantComponentEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple ProductVariants.
 */
export type ProductVariantConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ProductVariantEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ProductVariantEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ProductVariant, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantConnection", returnType: "ProductVariantConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The price of a product variant in a specific country.
 * Prices vary between countries.
 */
export type ProductVariantContextualPricing = {
/**
 * The final compare-at price after all adjustments are applied.
 */
compareAtPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The final price after all adjustments are applied.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of quantity breaks for the product variant.
 */
quantityPriceBreaks: { baseType: QuantityPriceBreakConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.QuantityPriceBreakSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity rule applied for a given context.
 */
quantityRule: { baseType: QuantityRule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantContextualPricing", returnType: "ProductVariantContextualPricing", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productVariantCreate` mutation.
 */
export type ProductVariantCreatePayload = {
/**
 * The product associated with the variant.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The successfully created variant.
 */
productVariant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantCreatePayload", returnType: "ProductVariantCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productVariantDelete` mutation.
 */
export type ProductVariantDeletePayload = {
/**
 * The ID of the deleted product variant.
 */
deletedProductVariantId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product associated with the deleted product variant.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantDeletePayload", returnType: "ProductVariantDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productVariantDetachMedia` mutation.
 */
export type ProductVariantDetachMediaPayload = {
/**
 * The product associated with the variants and media.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product variants that were updated.
 */
productVariants: { baseType: ProductVariant, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MediaUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantDetachMediaPayload", returnType: "ProductVariantDetachMediaPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ProductVariant and a cursor during pagination.
 */
export type ProductVariantEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ProductVariantEdge.
 */
node: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantEdge", returnType: "ProductVariantEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productVariantJoinSellingPlanGroups` mutation.
 */
export type ProductVariantJoinSellingPlanGroupsPayload = {
/**
 * The product variant object.
 */
productVariant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SellingPlanGroupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantJoinSellingPlanGroupsPayload", returnType: "ProductVariantJoinSellingPlanGroupsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productVariantLeaveSellingPlanGroups` mutation.
 */
export type ProductVariantLeaveSellingPlanGroupsPayload = {
/**
 * The product variant object.
 */
productVariant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SellingPlanGroupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantLeaveSellingPlanGroupsPayload", returnType: "ProductVariantLeaveSellingPlanGroupsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The compare-at price and price of a variant sharing a currency.
 */
export type ProductVariantPricePair = {
/**
 * The compare-at price of the variant with associated currency.
 */
compareAtPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The price of the variant with associated currency.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantPricePair", returnType: "ProductVariantPricePair", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple ProductVariantPricePairs.
 */
export type ProductVariantPricePairConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ProductVariantPricePairEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ProductVariantPricePairEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ProductVariantPricePair, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantPricePairConnection", returnType: "ProductVariantPricePairConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
 */
export type ProductVariantPricePairEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ProductVariantPricePairEdge.
 */
node: { baseType: ProductVariantPricePair, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantPricePairEdge", returnType: "ProductVariantPricePairEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productVariantRelationshipBulkUpdate` mutation.
 */
export type ProductVariantRelationshipBulkUpdatePayload = {
/**
 * The product variants with successfully updated product variant relationships.
 */
parentProductVariants: { baseType: ProductVariant, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductVariantRelationshipBulkUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantRelationshipBulkUpdatePayload", returnType: "ProductVariantRelationshipBulkUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `ProductVariantRelationshipBulkUpdate`.
 */
export type ProductVariantRelationshipBulkUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductVariantRelationshipBulkUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantRelationshipBulkUpdateUserError", returnType: "ProductVariantRelationshipBulkUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `productVariantUpdate` mutation.
 */
export type ProductVariantUpdatePayload = {
/**
 * The product associated with the variant.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The updated variant.
 */
productVariant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantUpdatePayload", returnType: "ProductVariantUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `productVariantsBulkCreate` mutation.
 */
export type ProductVariantsBulkCreatePayload = {
/**
 * The updated product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The newly created variants.
 */
productVariants: { baseType: ProductVariant, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductVariantsBulkCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantsBulkCreatePayload", returnType: "ProductVariantsBulkCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed product variant bulk create mutations.
 */
export type ProductVariantsBulkCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductVariantsBulkCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantsBulkCreateUserError", returnType: "ProductVariantsBulkCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `productVariantsBulkDelete` mutation.
 */
export type ProductVariantsBulkDeletePayload = {
/**
 * The updated product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductVariantsBulkDeleteUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantsBulkDeletePayload", returnType: "ProductVariantsBulkDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed bulk variant delete mutations.
 */
export type ProductVariantsBulkDeleteUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductVariantsBulkDeleteUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantsBulkDeleteUserError", returnType: "ProductVariantsBulkDeleteUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `productVariantsBulkReorder` mutation.
 */
export type ProductVariantsBulkReorderPayload = {
/**
 * The updated product.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductVariantsBulkReorderUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantsBulkReorderPayload", returnType: "ProductVariantsBulkReorderPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed bulk product variants reorder operation.
 */
export type ProductVariantsBulkReorderUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductVariantsBulkReorderUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantsBulkReorderUserError", returnType: "ProductVariantsBulkReorderUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `productVariantsBulkUpdate` mutation.
 */
export type ProductVariantsBulkUpdatePayload = {
/**
 * The updated product object.
 */
product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The updated variants.
 */
productVariants: { baseType: ProductVariant, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ProductVariantsBulkUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ProductVariantsBulkUpdatePayload", returnType: "ProductVariantsBulkUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed variant bulk update mutations.
 */
export type ProductVariantsBulkUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ProductVariantsBulkUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ProductVariantsBulkUpdateUserError", returnType: "ProductVariantsBulkUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `pubSubServerPixelUpdate` mutation.
 */
export type PubSubServerPixelUpdatePayload = {
/**
 * The server pixel as configured by the mutation.
 */
serverPixel: { baseType: ServerPixel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ErrorsServerPixelUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PubSubServerPixelUpdatePayload", returnType: "PubSubServerPixelUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `pubSubWebhookSubscriptionCreate` mutation.
 */
export type PubSubWebhookSubscriptionCreatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PubSubWebhookSubscriptionCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The webhook subscription that was created.
 */
webhookSubscription: { baseType: WebhookSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "PubSubWebhookSubscriptionCreatePayload", returnType: "PubSubWebhookSubscriptionCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `PubSubWebhookSubscriptionCreate`.
 */
export type PubSubWebhookSubscriptionCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.PubSubWebhookSubscriptionCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PubSubWebhookSubscriptionCreateUserError", returnType: "PubSubWebhookSubscriptionCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `pubSubWebhookSubscriptionUpdate` mutation.
 */
export type PubSubWebhookSubscriptionUpdatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PubSubWebhookSubscriptionUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The webhook subscription that was updated.
 */
webhookSubscription: { baseType: WebhookSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "PubSubWebhookSubscriptionUpdatePayload", returnType: "PubSubWebhookSubscriptionUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `PubSubWebhookSubscriptionUpdate`.
 */
export type PubSubWebhookSubscriptionUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.PubSubWebhookSubscriptionUpdateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PubSubWebhookSubscriptionUpdateUserError", returnType: "PubSubWebhookSubscriptionUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A publication is a group of products and collections that is published to an app.
 */
export type Publication = {
/**
 * The app associated with the publication.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether new products are automatically published to this publication.
 */
autoPublish: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The catalog associated with the publication.
 */
catalog: { members: { AppCatalog: AppCatalog; CompanyLocationCatalog: CompanyLocationCatalog; MarketCatalog: MarketCatalog }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The collection publications for the list of collections published to the publication.
 */
collectionPublicationsV3: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of collections published to the publication.
 */
collections: { baseType: CollectionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the collection is available to the publication.
 */
hasCollection: { baseType: BaseTypes.Boolean, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Name of the publication.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A background operation associated with this publication.
 */
operation: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product publications for the list of products published to the publication.
 */
productPublicationsV3: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of products published to the publication.
 */
products: { baseType: ProductConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the publication supports future publishing.
 */
supportsFuturePublishing: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Publication", returnType: "Publication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple Publications.
 */
export type PublicationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: PublicationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in PublicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Publication, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PublicationConnection", returnType: "PublicationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `publicationCreate` mutation.
 */
export type PublicationCreatePayload = {
/**
 * The publication that's been created.
 */
publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PublicationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PublicationCreatePayload", returnType: "PublicationCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `publicationDelete` mutation.
 */
export type PublicationDeletePayload = {
/**
 * The ID of the publication that was deleted.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PublicationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PublicationDeletePayload", returnType: "PublicationDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Publication and a cursor during pagination.
 */
export type PublicationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of PublicationEdge.
 */
node: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PublicationEdge", returnType: "PublicationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The possible types of publication operations.
 */
export type PublicationOperation = AddAllProductsOperation | CatalogCsvOperation | PublicationResourceOperation

/**
 * A bulk update operation on a publication.
 */
export type PublicationResourceOperation = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The count of processed rows, summing imported, failed, and skipped rows.
 */
processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Represents a rows objects within this background operation.
 */
rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of this operation.
 */
status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PublicationResourceOperation", returnType: "PublicationResourceOperation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node & ResourceOperation

/**
 * Return type for `publicationUpdate` mutation.
 */
export type PublicationUpdatePayload = {
/**
 * The publication that's been updated.
 */
publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: PublicationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PublicationUpdatePayload", returnType: "PublicationUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Defines errors encountered while managing a publication.
 */
export type PublicationUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.PublicationUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PublicationUserError", returnType: "PublicationUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Publishable = {
/**
 * The number of
 * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that a resource is published to, without
 * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
 */
availablePublicationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of
 * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that a resource is published to, without
 * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
 */
publicationCount: { baseType: BaseTypes.Int, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to a specific channel.
 */
publishedOnChannel: { baseType: BaseTypes.Boolean, arguments: { channelId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to a
 * [channel](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel).
 * For example, the resource might be published to the online store channel.
 */
publishedOnCurrentChannel: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to the app's
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 * For example, the resource might be published to the app's online store channel.
 */
publishedOnCurrentPublication: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource is published to a specified
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 */
publishedOnPublication: { baseType: BaseTypes.Boolean, arguments: { publicationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of resources that are published to a
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 */
resourcePublications: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of
 * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that a resource is published to, without
 * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
 */
resourcePublicationsCount: { baseType: Count, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of resources that are either published or staged to be published to a
 * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 */
resourcePublicationsV2: { baseType: ResourcePublicationV2Connection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; catalogType?: BaseTypes.CatalogType | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of channels that the resource is not published to.
 */
unpublishedChannels: { baseType: ChannelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
 * that the resource isn't published to.
 */
unpublishedPublications: { baseType: PublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `publishablePublish` mutation.
 */
export type PublishablePublishPayload = {
/**
 * Resource that has been published.
 */
publishable: { members: { Collection: Collection; Product: Product }, fields: { availablePublicationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publicationCount: { baseType: BaseTypes.Int, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnChannel: { baseType: BaseTypes.Boolean, arguments: { channelId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentChannel: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentPublication: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnPublication: { baseType: BaseTypes.Boolean, arguments: { publicationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublications: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublicationsCount: { baseType: Count, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }; resourcePublicationsV2: { baseType: ResourcePublicationV2Connection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; catalogType?: BaseTypes.CatalogType | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedChannels: { baseType: ChannelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedPublications: { baseType: PublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The user's shop.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PublishablePublishPayload", returnType: "PublishablePublishPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `publishablePublishToCurrentChannel` mutation.
 */
export type PublishablePublishToCurrentChannelPayload = {
/**
 * Resource that has been published.
 */
publishable: { members: { Collection: Collection; Product: Product }, fields: { availablePublicationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publicationCount: { baseType: BaseTypes.Int, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnChannel: { baseType: BaseTypes.Boolean, arguments: { channelId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentChannel: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentPublication: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnPublication: { baseType: BaseTypes.Boolean, arguments: { publicationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublications: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublicationsCount: { baseType: Count, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }; resourcePublicationsV2: { baseType: ResourcePublicationV2Connection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; catalogType?: BaseTypes.CatalogType | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedChannels: { baseType: ChannelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedPublications: { baseType: PublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The user's shop.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PublishablePublishToCurrentChannelPayload", returnType: "PublishablePublishToCurrentChannelPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `publishableUnpublish` mutation.
 */
export type PublishableUnpublishPayload = {
/**
 * Resource that has been unpublished.
 */
publishable: { members: { Collection: Collection; Product: Product }, fields: { availablePublicationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publicationCount: { baseType: BaseTypes.Int, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnChannel: { baseType: BaseTypes.Boolean, arguments: { channelId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentChannel: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentPublication: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnPublication: { baseType: BaseTypes.Boolean, arguments: { publicationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublications: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublicationsCount: { baseType: Count, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }; resourcePublicationsV2: { baseType: ResourcePublicationV2Connection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; catalogType?: BaseTypes.CatalogType | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedChannels: { baseType: ChannelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedPublications: { baseType: PublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The user's shop.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PublishableUnpublishPayload", returnType: "PublishableUnpublishPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `publishableUnpublishToCurrentChannel` mutation.
 */
export type PublishableUnpublishToCurrentChannelPayload = {
/**
 * Resource that has been unpublished.
 */
publishable: { members: { Collection: Collection; Product: Product }, fields: { availablePublicationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publicationCount: { baseType: BaseTypes.Int, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnChannel: { baseType: BaseTypes.Boolean, arguments: { channelId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentChannel: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentPublication: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnPublication: { baseType: BaseTypes.Boolean, arguments: { publicationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublications: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublicationsCount: { baseType: Count, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }; resourcePublicationsV2: { baseType: ResourcePublicationV2Connection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; catalogType?: BaseTypes.CatalogType | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedChannels: { baseType: ChannelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedPublications: { baseType: PublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The user's shop.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "PublishableUnpublishToCurrentChannelPayload", returnType: "PublishableUnpublishToCurrentChannelPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents information about the purchasing company for the order or draft order.
 */
export type PurchasingCompany = {
/**
 * The company associated to the order or draft order.
 */
company: { baseType: Company, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The company contact associated to the order or draft order.
 */
contact: { baseType: CompanyContact, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The company location associated to the order or draft order.
 */
location: { baseType: CompanyLocation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "PurchasingCompany", returnType: "PurchasingCompany", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents information about the purchasing entity for the order or draft order.
 */
export type PurchasingEntity = Customer | PurchasingCompany

/**
 * Quantity price breaks lets you offer different rates that are based on the
 * amount of a specific variant being ordered.
 */
export type QuantityPriceBreak = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Minimum quantity required to reach new quantity break price.
 */
minimumQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price of variant after reaching the minimum quanity.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price list associated with this quantity break.
 */
priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant associated with this quantity break.
 */
variant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "QuantityPriceBreak", returnType: "QuantityPriceBreak", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple QuantityPriceBreaks.
 */
export type QuantityPriceBreakConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: QuantityPriceBreakEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in QuantityPriceBreakEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: QuantityPriceBreak, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "QuantityPriceBreakConnection", returnType: "QuantityPriceBreakConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one QuantityPriceBreak and a cursor during pagination.
 */
export type QuantityPriceBreakEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of QuantityPriceBreakEdge.
 */
node: { baseType: QuantityPriceBreak, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "QuantityPriceBreakEdge", returnType: "QuantityPriceBreakEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `quantityPricingByVariantUpdate` mutation.
 */
export type QuantityPricingByVariantUpdatePayload = {
/**
 * The variants for which quantity pricing was created successfully in the price list.
 */
productVariants: { baseType: ProductVariant, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: QuantityPricingByVariantUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "QuantityPricingByVariantUpdatePayload", returnType: "QuantityPricingByVariantUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Error codes for failed volume pricing operations.
 */
export type QuantityPricingByVariantUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.QuantityPricingByVariantUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "QuantityPricingByVariantUserError", returnType: "QuantityPricingByVariantUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The quantity rule for the product variant in a given context.
 */
export type QuantityRule = {
/**
 * The value that specifies the quantity increment between minimum and maximum of the rule.
 * Only quantities divisible by this value will be considered valid.
 *
 * The increment must be lower than or equal to the minimum and the maximum, and both minimum and maximum
 * must be divisible by this value.
 */
increment: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the quantity rule fields match one increment, one minimum and no maximum.
 */
isDefault: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * An optional value that defines the highest allowed quantity purchased by the customer.
 * If defined, maximum must be lower than or equal to the minimum and must be a multiple of the increment.
 */
maximum: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The value that defines the lowest allowed quantity purchased by the customer.
 * The minimum must be a multiple of the quantity rule's increment.
 */
minimum: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the values of the quantity rule were explicitly set.
 */
originType: { baseType: BaseTypes.QuantityRuleOriginType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant for which the quantity rule is applied.
 */
productVariant: { baseType: ProductVariant, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "QuantityRule", returnType: "QuantityRule", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple QuantityRules.
 */
export type QuantityRuleConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: QuantityRuleEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in QuantityRuleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: QuantityRule, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "QuantityRuleConnection", returnType: "QuantityRuleConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one QuantityRule and a cursor during pagination.
 */
export type QuantityRuleEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of QuantityRuleEdge.
 */
node: { baseType: QuantityRule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "QuantityRuleEdge", returnType: "QuantityRuleEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error for a failed quantity rule operation.
 */
export type QuantityRuleUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.QuantityRuleUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "QuantityRuleUserError", returnType: "QuantityRuleUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `quantityRulesAdd` mutation.
 */
export type QuantityRulesAddPayload = {
/**
 * The list of quantity rules that were added to or updated in the price list.
 */
quantityRules: { baseType: QuantityRule, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: QuantityRuleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "QuantityRulesAddPayload", returnType: "QuantityRulesAddPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `quantityRulesDelete` mutation.
 */
export type QuantityRulesDeletePayload = {
/**
 * A list of product variant IDs whose quantity rules were removed from the price list.
 */
deletedQuantityRulesVariantIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: QuantityRuleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "QuantityRulesDeletePayload", returnType: "QuantityRulesDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.
 */
export type QueryRoot = {
/**
 * Returns an abandonment by ID.
 */
abandonment: { baseType: Abandonment, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns an Abandonment by the Abandoned Checkout ID.
 */
abandonmentByAbandonedCheckoutId: { baseType: Abandonment, arguments: { abandonedCheckoutId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Lookup an App by ID or return the currently authenticated App.
 */
app: { baseType: App, arguments: { id?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Fetches app by handle.
 * Returns null if the app doesn't exist.
 */
appByHandle: { baseType: App, arguments: { handle: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Fetches an app by its client ID.
 * Returns null if the app doesn't exist.
 */
appByKey: { baseType: App, arguments: { apiKey: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * An app discount type.
 */
appDiscountType: { baseType: AppDiscountType, arguments: { functionId: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of app discount types installed by apps.
 */
appDiscountTypes: { baseType: AppDiscountType, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.
 */
appInstallation: { baseType: AppInstallation, arguments: { id?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of app installations. To use this query, you need to contact [Shopify Support](https://partners.shopify.com/current/support/) to grant your custom app the `read_apps` access scope. Public apps can't be granted this access scope.
 */
appInstallations: { baseType: AppInstallationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; category?: BaseTypes.AppInstallationCategory | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; privacy?: BaseTypes.AppInstallationPrivacy | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.AppInstallationSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The paginated list of fulfillment orders assigned to the shop locations owned by the app.
 *
 * Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations
 * managed by
 * [fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * that are registered by the app.
 * One app (api_client) can host multiple fulfillment services on a shop.
 * Each fulfillment service manages a dedicated location on a shop.
 * Assigned fulfillment orders can have associated
 * [fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),
 * or might currently not be requested to be fulfilled.
 *
 * The app must have the `read_assigned_fulfillment_orders`
 * [access scope](https://shopify.dev/docs/api/usage/access-scopes)
 * to be able to retrieve the fulfillment orders assigned to its locations.
 *
 * All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.
 * Perform filtering with the `assignmentStatus` argument
 * to receive only fulfillment orders that have been requested to be fulfilled.
 */
assignedFulfillmentOrders: { baseType: FulfillmentOrderConnection, arguments: { after?: BaseTypes.String | null; assignmentStatus?: BaseTypes.FulfillmentOrderAssignmentStatus | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; locationIds?: Array<BaseTypes.ID> | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.FulfillmentOrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns an automatic discount resource by ID.
 */
automaticDiscount: { members: { DiscountAutomaticApp: DiscountAutomaticApp; DiscountAutomaticBasic: DiscountAutomaticBasic; DiscountAutomaticBxgy: DiscountAutomaticBxgy; DiscountAutomaticFreeShipping: DiscountAutomaticFreeShipping }, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns an automatic discount resource by ID.
 */
automaticDiscountNode: { baseType: DiscountAutomaticNode, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts).
 */
automaticDiscountNodes: { baseType: DiscountAutomaticNodeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.AutomaticDiscountSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop's automatic discount saved searches.
 */
automaticDiscountSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of automatic discounts.
 */
automaticDiscounts: { baseType: DiscountAutomaticConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.AutomaticDiscountSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a list of activated carrier services and associated shop locations that support them.
 */
availableCarrierServices: { baseType: DeliveryCarrierServiceAndLocations, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of available locales.
 */
availableLocales: { baseType: Locale, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Returns a `DeliveryCarrierService` object by ID.
 */
carrierService: { baseType: DeliveryCarrierService, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Retrieve a list of CarrierServices.
 */
carrierServices: { baseType: DeliveryCarrierServiceConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CarrierServiceSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of Cart transform objects owned by the current API client.
 */
cartTransforms: { baseType: CartTransformConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Lookup a cash tracking session by ID.
 */
cashTrackingSession: { baseType: CashTrackingSession, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a shop's cash tracking sessions for locations with a POS Pro subscription.
 *
 * Tip: To query for cash tracking sessions in bulk, you can
 * [perform a bulk operation](https://shopify.dev/docs/api/usage/bulk-operations/queries).
 */
cashTrackingSessions: { baseType: CashTrackingSessionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CashTrackingSessionsSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a Catalog resource by ID.
 */
catalog: { members: { AppCatalog: AppCatalog; CompanyLocationCatalog: CompanyLocationCatalog; MarketCatalog: MarketCatalog }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; operations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; priceList: { baseType: PriceList, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.CatalogStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the most recent catalog operations for the shop.
 */
catalogOperations: { members: { AddAllProductsOperation: AddAllProductsOperation; CatalogCsvOperation: CatalogCsvOperation; PublicationResourceOperation: PublicationResourceOperation }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The catalogs belonging to the shop.
 */
catalogs: { baseType: CatalogConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CatalogSortKeys | null; type?: BaseTypes.CatalogType | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The count of catalogs belonging to the shop. Limited to a maximum of 10000.
 */
catalogsCount: { baseType: Count, arguments: { query?: BaseTypes.String | null; type?: BaseTypes.CatalogType | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Lookup a channel by ID.
 */
channel: { baseType: Channel, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of the active sales channels.
 */
channels: { baseType: ChannelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns the visual customizations for checkout for a given checkout profile.
 *
 * To learn more about updating checkout branding settings, refer to the
 * [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert)
 * mutation and the checkout branding [tutorial](https://shopify.dev/docs/apps/checkout/styling).
 */
checkoutBranding: { baseType: CheckoutBranding, arguments: { checkoutProfileId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A checkout profile on a shop.
 */
checkoutProfile: { baseType: CheckoutProfile, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of checkout profiles on a shop.
 */
checkoutProfiles: { baseType: CheckoutProfileConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CheckoutProfileSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a [code discount](https://help.shopify.com/manual/discounts/discount-types#discount-codes) resource by ID.
 */
codeDiscountNode: { baseType: DiscountCodeNode, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a code discount identified by its discount code.
 */
codeDiscountNodeByCode: { baseType: DiscountCodeNode, arguments: { code: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of [code-based discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes).
 */
codeDiscountNodes: { baseType: DiscountCodeNodeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.CodeDiscountSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop's code discount saved searches.
 */
codeDiscountSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a Collection resource by ID.
 */
collection: { baseType: Collection, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Return a collection by its handle.
 */
collectionByHandle: { baseType: Collection, arguments: { handle: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Lists all rules that can be used to create smart collections.
 */
collectionRulesConditions: { baseType: CollectionRuleConditions, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Returns a list of the shop's collection saved searches.
 */
collectionSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a list of collections.
 */
collections: { baseType: CollectionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.CollectionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns the list of companies in the shop.
 */
companies: { baseType: CompanyConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CompanySortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of companies for a shop.
 */
companiesCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a `Company` object by ID.
 */
company: { baseType: Company, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a `CompanyContact` object by ID.
 */
companyContact: { baseType: CompanyContact, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a `CompanyContactRole` object by ID.
 */
companyContactRole: { baseType: CompanyContactRole, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a `CompanyLocation` object by ID.
 */
companyLocation: { baseType: CompanyLocation, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the list of company locations in the shop.
 */
companyLocations: { baseType: CompanyLocationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CompanyLocationSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Return the AppInstallation for the currently authenticated App.
 */
currentAppInstallation: { baseType: AppInstallation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns the current app's most recent BulkOperation. Apps can run one bulk query and one bulk mutation operation at a time, by shop.
 */
currentBulkOperation: { baseType: BulkOperation, arguments: { type?: BaseTypes.BulkOperationType | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a Customer resource by ID.
 */
customer: { baseType: Customer, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the status of a customer merge request job.
 */
customerMergeJobStatus: { baseType: CustomerMergeRequest, arguments: { jobId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a preview of a customer merge request.
 */
customerMergePreview: { baseType: CustomerMergePreview, arguments: { customerOneId: BaseTypes.ID; customerTwoId: BaseTypes.ID; overrideFields?: InputTypes.CustomerMergeOverrideFields | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a CustomerPaymentMethod resource by its ID.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: { id: BaseTypes.ID; showRevoked?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of members, such as customers, that's associated with an individual segment.
 * The maximum page size is 1000.
 */
customerSegmentMembers: { baseType: CustomerSegmentMemberConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; queryId?: BaseTypes.ID | null; reverse?: BaseTypes.Boolean | null; segmentId?: BaseTypes.ID | null; sortKey?: BaseTypes.String | null; timezone?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a segment members query resource by ID.
 */
customerSegmentMembersQuery: { baseType: CustomerSegmentMembersQuery, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether a member, which is a customer, belongs to a segment.
 */
customerSegmentMembership: { baseType: SegmentMembershipResponse, arguments: { customerId: BaseTypes.ID; segmentIds: Array<BaseTypes.ID> }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a list of customers.
 */
customers: { baseType: CustomerConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CustomerSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of customers.
 */
customersCount: { baseType: Count, arguments: { query?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The paginated list of deletion events.
 */
deletionEvents: { baseType: DeletionEventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.DeletionEventSortKeys | null; subjectTypes?: Array<BaseTypes.DeletionEventSubjectType> | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The delivery customization.
 */
deliveryCustomization: { baseType: DeliveryCustomization, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The delivery customizations.
 */
deliveryCustomizations: { baseType: DeliveryCustomizationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a Delivery Profile resource by ID.
 */
deliveryProfile: { baseType: DeliveryProfile, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of saved delivery profiles.
 */
deliveryProfiles: { baseType: DeliveryProfileConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; merchantOwnedOnly?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Lookup a delivery promise provider.
 */
deliveryPromiseProvider: { baseType: DeliveryPromiseProvider, arguments: { locationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the shop-wide shipping settings.
 */
deliverySettings: { baseType: DeliverySetting, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total number of discount codes for the shop.
 */
discountCodesCount: { baseType: Count, arguments: { query?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a discount resource by ID.
 */
discountNode: { baseType: DiscountNode, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of discounts.
 */
discountNodes: { baseType: DiscountNodeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.DiscountSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a bulk code creation resource by ID.
 */
discountRedeemCodeBulkCreation: { baseType: DiscountRedeemCodeBulkCreation, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of the shop's redeemed discount code saved searches.
 */
discountRedeemCodeSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.DiscountCodeSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns dispute details based on ID.
 */
dispute: { baseType: ShopifyPaymentsDispute, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns dispute evidence details based on ID.
 */
disputeEvidence: { baseType: ShopifyPaymentsDisputeEvidence, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Lookup a Domain by ID.
 */
domain: { baseType: Domain, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a DraftOrder resource by ID.
 */
draftOrder: { baseType: DraftOrder, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of the shop's draft order saved searches.
 */
draftOrderSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a DraftOrderTag resource by ID.
 */
draftOrderTag: { baseType: DraftOrderTag, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of saved draft orders.
 */
draftOrders: { baseType: DraftOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.DraftOrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the shop's file saved searches.
 */
fileSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a paginated list of files that have been uploaded to Shopify.
 */
files: { baseType: FileConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.FileSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a Fulfillment resource by ID.
 */
fulfillment: { baseType: Fulfillment, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The fulfillment constraint rules that belong to a shop.
 */
fulfillmentConstraintRules: { baseType: FulfillmentConstraintRule, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Returns a Fulfillment order resource by ID.
 */
fulfillmentOrder: { baseType: FulfillmentOrder, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The paginated list of all fulfillment orders.
 * The returned fulfillment orders are filtered according to the
 * [fulfillment order access scopes](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder#api-access-scopes)
 * granted to the app.
 *
 * Use this query to retrieve fulfillment orders assigned to merchant-managed locations,
 * third-party fulfillment service locations, or all kinds of locations together.
 *
 * For fetching only the fulfillment orders assigned to the app's locations, use the
 * [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
 * connection.
 */
fulfillmentOrders: { baseType: FulfillmentOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; includeClosed?: BaseTypes.Boolean | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.FulfillmentOrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a FulfillmentService resource by ID.
 */
fulfillmentService: { baseType: FulfillmentService, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a gift card resource by ID.
 */
giftCard: { baseType: GiftCard, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of gift cards.
 */
giftCards: { baseType: GiftCardConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.GiftCardSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of gift cards issued for the shop. Limited to a maximum of 10000.
 */
giftCardsCount: { baseType: Count, arguments: { query?: BaseTypes.String | null; savedSearchId?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns an
 * [InventoryItem](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem)
 * object by ID.
 */
inventoryItem: { baseType: InventoryItem, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of inventory items.
 */
inventoryItems: { baseType: InventoryItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns an
 * [InventoryLevel](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryLevel)
 * object by ID.
 */
inventoryLevel: { baseType: InventoryLevel, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * General inventory properties for the shop.
 */
inventoryProperties: { baseType: InventoryProperties, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.
 */
job: { baseType: Job, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns an inventory Location resource by ID.
 */
location: { baseType: Location, arguments: { id?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of active inventory locations.
 */
locations: { baseType: LocationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; includeInactive?: BaseTypes.Boolean | null; includeLegacy?: BaseTypes.Boolean | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.LocationSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a list of all origin locations available for a delivery profile.
 */
locationsAvailableForDeliveryProfiles: { baseType: Location, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * Returns a list of all origin locations available for a delivery profile.
 */
locationsAvailableForDeliveryProfilesConnection: { baseType: LocationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns the count of locations for the given shop. Limited to a maximum of 10000.
 */
locationsCount: { baseType: Count, arguments: { query?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of fulfillment orders that are on hold.
 */
manualHoldsFulfillmentOrders: { baseType: FulfillmentOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a market resource by ID.
 */
market: { baseType: Market, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the applicable market for a customer based on where they are in the world.
 */
marketByGeography: { baseType: Market, arguments: { countryCode: BaseTypes.CountryCode }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A resource that can have localized values for different markets.
 */
marketLocalizableResource: { baseType: MarketLocalizableResource, arguments: { resourceId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Resources that can have localized values for different markets.
 */
marketLocalizableResources: { baseType: MarketLocalizableResourceConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; resourceType: BaseTypes.MarketLocalizableResourceType; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Resources that can have localized values for different markets.
 */
marketLocalizableResourcesByIds: { baseType: MarketLocalizableResourceConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; resourceIds: Array<BaseTypes.ID>; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of marketing activities associated with the marketing app.
 */
marketingActivities: { baseType: MarketingActivityConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; marketingActivityIds?: Array<BaseTypes.ID> | null; query?: BaseTypes.String | null; remoteIds?: Array<BaseTypes.String> | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.MarketingActivitySortKeys | null; utm?: InputTypes.UTMInput | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a MarketingActivity resource by ID.
 */
marketingActivity: { baseType: MarketingActivity, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a MarketingEvent resource by ID.
 */
marketingEvent: { baseType: MarketingEvent, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of marketing events associated with the marketing app.
 */
marketingEvents: { baseType: MarketingEventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MarketingEventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The markets configured for the shop.
 */
markets: { baseType: MarketConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a Menu resource by ID.
 */
menu: { baseType: Menu, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shop's menus.
 */
menus: { baseType: MenuConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MenuSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a metafield definition by identifier.
 */
metafieldDefinition: { baseType: MetafieldDefinition, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Each metafield definition has a type, which defines the type of information that it can store.
 * This type is enforced across every instance of the resource that owns the metafield definition.
 *
 * Refer to the [list of supported metafield types](https://shopify.dev/apps/metafields/types).
 */
metafieldDefinitionTypes: { baseType: MetafieldDefinitionType, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Returns a list of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; constraintStatus?: BaseTypes.MetafieldDefinitionConstraintStatus | null; constraintSubtype?: InputTypes.MetafieldDefinitionConstraintSubtypeIdentifier | null; first?: BaseTypes.Int | null; key?: BaseTypes.String | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; ownerType: BaseTypes.MetafieldOwnerType; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the `MetafieldStorefrontVisibility` records.
 */
metafieldStorefrontVisibilities: { baseType: MetafieldStorefrontVisibilityConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a `MetafieldStorefrontVisibility` record by ID. A `MetafieldStorefrontVisibility` record lists the
 * metafields to make visible in the Storefront API.
 */
metafieldStorefrontVisibility: { baseType: MetafieldStorefrontVisibility, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Retrieves a metaobject by ID.
 */
metaobject: { baseType: Metaobject, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Retrieves a metaobject by handle.
 */
metaobjectByHandle: { baseType: Metaobject, arguments: { handle: InputTypes.MetaobjectHandleInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Retrieves a metaobject definition by ID.
 */
metaobjectDefinition: { baseType: MetaobjectDefinition, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Finds a metaobject definition by type.
 */
metaobjectDefinitionByType: { baseType: MetaobjectDefinition, arguments: { type: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All metaobject definitions.
 */
metaobjectDefinitions: { baseType: MetaobjectDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * All metaobjects for the shop.
 */
metaobjects: { baseType: MetaobjectConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.String | null; type: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Return a mobile platform application by its ID.
 */
mobilePlatformApplication: { members: { AndroidApplication: AndroidApplication; AppleApplication: AppleApplication }, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List the mobile platform applications.
 */
mobilePlatformApplications: { baseType: MobilePlatformApplicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a specific node (any object that implements the
 * [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
 * interface) by ID, in accordance with the
 * [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
 * This field is commonly used for refetching an object.
 */
node: { members: { AbandonedCheckout: AbandonedCheckout; AbandonedCheckoutLineItem: AbandonedCheckoutLineItem; Abandonment: Abandonment; AddAllProductsOperation: AddAllProductsOperation; AdditionalFee: AdditionalFee; App: App; AppCatalog: AppCatalog; AppCredit: AppCredit; AppInstallation: AppInstallation; AppPurchaseOneTime: AppPurchaseOneTime; AppRevenueAttributionRecord: AppRevenueAttributionRecord; AppSubscription: AppSubscription; AppUsageRecord: AppUsageRecord; BasicEvent: BasicEvent; BulkOperation: BulkOperation; CalculatedOrder: CalculatedOrder; CartTransform: CartTransform; CashTrackingAdjustment: CashTrackingAdjustment; CashTrackingSession: CashTrackingSession; CatalogCsvOperation: CatalogCsvOperation; Channel: Channel; ChannelDefinition: ChannelDefinition; ChannelInformation: ChannelInformation; CheckoutProfile: CheckoutProfile; Collection: Collection; CommentEvent: CommentEvent; Company: Company; CompanyAddress: CompanyAddress; CompanyContact: CompanyContact; CompanyContactRole: CompanyContactRole; CompanyContactRoleAssignment: CompanyContactRoleAssignment; CompanyLocation: CompanyLocation; CompanyLocationCatalog: CompanyLocationCatalog; Customer: Customer; CustomerPaymentMethod: CustomerPaymentMethod; CustomerSegmentMembersQuery: CustomerSegmentMembersQuery; CustomerVisit: CustomerVisit; DeliveryCarrierService: DeliveryCarrierService; DeliveryCondition: DeliveryCondition; DeliveryCountry: DeliveryCountry; DeliveryCustomization: DeliveryCustomization; DeliveryLocationGroup: DeliveryLocationGroup; DeliveryMethod: DeliveryMethod; DeliveryMethodDefinition: DeliveryMethodDefinition; DeliveryParticipant: DeliveryParticipant; DeliveryProfile: DeliveryProfile; DeliveryProfileItem: DeliveryProfileItem; DeliveryPromiseProvider: DeliveryPromiseProvider; DeliveryProvince: DeliveryProvince; DeliveryRateDefinition: DeliveryRateDefinition; DeliveryZone: DeliveryZone; DiscountAutomaticBxgy: DiscountAutomaticBxgy; DiscountAutomaticNode: DiscountAutomaticNode; DiscountCodeNode: DiscountCodeNode; DiscountNode: DiscountNode; DiscountRedeemCodeBulkCreation: DiscountRedeemCodeBulkCreation; Domain: Domain; DraftOrder: DraftOrder; DraftOrderLineItem: DraftOrderLineItem; DraftOrderTag: DraftOrderTag; Duty: Duty; ExchangeLineItem: ExchangeLineItem; ExchangeV2: ExchangeV2; ExternalVideo: ExternalVideo; Fulfillment: Fulfillment; FulfillmentConstraintRule: FulfillmentConstraintRule; FulfillmentEvent: FulfillmentEvent; FulfillmentLineItem: FulfillmentLineItem; FulfillmentOrder: FulfillmentOrder; FulfillmentOrderDestination: FulfillmentOrderDestination; FulfillmentOrderLineItem: FulfillmentOrderLineItem; FulfillmentOrderMerchantRequest: FulfillmentOrderMerchantRequest; GenericFile: GenericFile; GiftCard: GiftCard; InventoryAdjustmentGroup: InventoryAdjustmentGroup; InventoryItem: InventoryItem; InventoryItemMeasurement: InventoryItemMeasurement; InventoryLevel: InventoryLevel; InventoryQuantity: InventoryQuantity; LineItem: LineItem; LineItemGroup: LineItemGroup; LineItemMutable: LineItemMutable; Location: Location; MailingAddress: MailingAddress; Market: Market; MarketCatalog: MarketCatalog; MarketRegionCountry: MarketRegionCountry; MarketWebPresence: MarketWebPresence; MarketingActivity: MarketingActivity; MarketingEvent: MarketingEvent; MediaImage: MediaImage; Menu: Menu; Metafield: Metafield; MetafieldDefinition: MetafieldDefinition; MetafieldStorefrontVisibility: MetafieldStorefrontVisibility; Metaobject: Metaobject; MetaobjectDefinition: MetaobjectDefinition; Model3d: Model3d; OnlineStoreArticle: OnlineStoreArticle; OnlineStoreBlog: OnlineStoreBlog; OnlineStorePage: OnlineStorePage; Order: Order; OrderDisputeSummary: OrderDisputeSummary; OrderTransaction: OrderTransaction; PaymentCustomization: PaymentCustomization; PaymentMandate: PaymentMandate; PaymentSchedule: PaymentSchedule; PaymentTerms: PaymentTerms; PaymentTermsTemplate: PaymentTermsTemplate; PriceList: PriceList; PriceRule: PriceRule; PriceRuleDiscountCode: PriceRuleDiscountCode; PrivateMetafield: PrivateMetafield; Product: Product; ProductBundleOperation: ProductBundleOperation; ProductFeed: ProductFeed; ProductOption: ProductOption; ProductOptionValue: ProductOptionValue; ProductSetOperation: ProductSetOperation; ProductTaxonomyNode: ProductTaxonomyNode; ProductVariant: ProductVariant; ProductVariantComponent: ProductVariantComponent; Publication: Publication; PublicationResourceOperation: PublicationResourceOperation; QuantityPriceBreak: QuantityPriceBreak; Refund: Refund; RefundShippingLine: RefundShippingLine; Return: Return; ReturnLineItem: ReturnLineItem; ReturnableFulfillment: ReturnableFulfillment; ReverseDelivery: ReverseDelivery; ReverseDeliveryLineItem: ReverseDeliveryLineItem; ReverseFulfillmentOrder: ReverseFulfillmentOrder; ReverseFulfillmentOrderDisposition: ReverseFulfillmentOrderDisposition; ReverseFulfillmentOrderLineItem: ReverseFulfillmentOrderLineItem; SaleAdditionalFee: SaleAdditionalFee; SavedSearch: SavedSearch; ScriptTag: ScriptTag; Segment: Segment; SellingPlan: SellingPlan; SellingPlanGroup: SellingPlanGroup; ServerPixel: ServerPixel; Shop: Shop; ShopAddress: ShopAddress; ShopPolicy: ShopPolicy; ShopifyPaymentsAccount: ShopifyPaymentsAccount; ShopifyPaymentsBalanceTransaction: ShopifyPaymentsBalanceTransaction; ShopifyPaymentsBankAccount: ShopifyPaymentsBankAccount; ShopifyPaymentsDispute: ShopifyPaymentsDispute; ShopifyPaymentsDisputeEvidence: ShopifyPaymentsDisputeEvidence; ShopifyPaymentsDisputeFileUpload: ShopifyPaymentsDisputeFileUpload; ShopifyPaymentsDisputeFulfillment: ShopifyPaymentsDisputeFulfillment; ShopifyPaymentsPayout: ShopifyPaymentsPayout; ShopifyPaymentsVerification: ShopifyPaymentsVerification; StaffMember: StaffMember; StandardMetafieldDefinitionTemplate: StandardMetafieldDefinitionTemplate; StoreCreditAccount: StoreCreditAccount; StoreCreditAccountCreditTransaction: StoreCreditAccountCreditTransaction; StoreCreditAccountDebitRevertTransaction: StoreCreditAccountDebitRevertTransaction; StoreCreditAccountDebitTransaction: StoreCreditAccountDebitTransaction; StorefrontAccessToken: StorefrontAccessToken; SubscriptionBillingAttempt: SubscriptionBillingAttempt; SubscriptionContract: SubscriptionContract; SubscriptionDraft: SubscriptionDraft; TaxonomyAttribute: TaxonomyAttribute; TaxonomyCategory: TaxonomyCategory; TaxonomyChoiceListAttribute: TaxonomyChoiceListAttribute; TaxonomyMeasurementAttribute: TaxonomyMeasurementAttribute; TaxonomyValue: TaxonomyValue; TenderTransaction: TenderTransaction; TransactionFee: TransactionFee; UnverifiedReturnLineItem: UnverifiedReturnLineItem; UrlRedirect: UrlRedirect; UrlRedirectImport: UrlRedirectImport; Validation: Validation; Video: Video; WebPixel: WebPixel; WebhookSubscription: WebhookSubscription }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the list of nodes (any objects that implement the
 * [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
 * interface) with the given IDs, in accordance with the
 * [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
 */
nodes: { members: { AbandonedCheckout: AbandonedCheckout; AbandonedCheckoutLineItem: AbandonedCheckoutLineItem; Abandonment: Abandonment; AddAllProductsOperation: AddAllProductsOperation; AdditionalFee: AdditionalFee; App: App; AppCatalog: AppCatalog; AppCredit: AppCredit; AppInstallation: AppInstallation; AppPurchaseOneTime: AppPurchaseOneTime; AppRevenueAttributionRecord: AppRevenueAttributionRecord; AppSubscription: AppSubscription; AppUsageRecord: AppUsageRecord; BasicEvent: BasicEvent; BulkOperation: BulkOperation; CalculatedOrder: CalculatedOrder; CartTransform: CartTransform; CashTrackingAdjustment: CashTrackingAdjustment; CashTrackingSession: CashTrackingSession; CatalogCsvOperation: CatalogCsvOperation; Channel: Channel; ChannelDefinition: ChannelDefinition; ChannelInformation: ChannelInformation; CheckoutProfile: CheckoutProfile; Collection: Collection; CommentEvent: CommentEvent; Company: Company; CompanyAddress: CompanyAddress; CompanyContact: CompanyContact; CompanyContactRole: CompanyContactRole; CompanyContactRoleAssignment: CompanyContactRoleAssignment; CompanyLocation: CompanyLocation; CompanyLocationCatalog: CompanyLocationCatalog; Customer: Customer; CustomerPaymentMethod: CustomerPaymentMethod; CustomerSegmentMembersQuery: CustomerSegmentMembersQuery; CustomerVisit: CustomerVisit; DeliveryCarrierService: DeliveryCarrierService; DeliveryCondition: DeliveryCondition; DeliveryCountry: DeliveryCountry; DeliveryCustomization: DeliveryCustomization; DeliveryLocationGroup: DeliveryLocationGroup; DeliveryMethod: DeliveryMethod; DeliveryMethodDefinition: DeliveryMethodDefinition; DeliveryParticipant: DeliveryParticipant; DeliveryProfile: DeliveryProfile; DeliveryProfileItem: DeliveryProfileItem; DeliveryPromiseProvider: DeliveryPromiseProvider; DeliveryProvince: DeliveryProvince; DeliveryRateDefinition: DeliveryRateDefinition; DeliveryZone: DeliveryZone; DiscountAutomaticBxgy: DiscountAutomaticBxgy; DiscountAutomaticNode: DiscountAutomaticNode; DiscountCodeNode: DiscountCodeNode; DiscountNode: DiscountNode; DiscountRedeemCodeBulkCreation: DiscountRedeemCodeBulkCreation; Domain: Domain; DraftOrder: DraftOrder; DraftOrderLineItem: DraftOrderLineItem; DraftOrderTag: DraftOrderTag; Duty: Duty; ExchangeLineItem: ExchangeLineItem; ExchangeV2: ExchangeV2; ExternalVideo: ExternalVideo; Fulfillment: Fulfillment; FulfillmentConstraintRule: FulfillmentConstraintRule; FulfillmentEvent: FulfillmentEvent; FulfillmentLineItem: FulfillmentLineItem; FulfillmentOrder: FulfillmentOrder; FulfillmentOrderDestination: FulfillmentOrderDestination; FulfillmentOrderLineItem: FulfillmentOrderLineItem; FulfillmentOrderMerchantRequest: FulfillmentOrderMerchantRequest; GenericFile: GenericFile; GiftCard: GiftCard; InventoryAdjustmentGroup: InventoryAdjustmentGroup; InventoryItem: InventoryItem; InventoryItemMeasurement: InventoryItemMeasurement; InventoryLevel: InventoryLevel; InventoryQuantity: InventoryQuantity; LineItem: LineItem; LineItemGroup: LineItemGroup; LineItemMutable: LineItemMutable; Location: Location; MailingAddress: MailingAddress; Market: Market; MarketCatalog: MarketCatalog; MarketRegionCountry: MarketRegionCountry; MarketWebPresence: MarketWebPresence; MarketingActivity: MarketingActivity; MarketingEvent: MarketingEvent; MediaImage: MediaImage; Menu: Menu; Metafield: Metafield; MetafieldDefinition: MetafieldDefinition; MetafieldStorefrontVisibility: MetafieldStorefrontVisibility; Metaobject: Metaobject; MetaobjectDefinition: MetaobjectDefinition; Model3d: Model3d; OnlineStoreArticle: OnlineStoreArticle; OnlineStoreBlog: OnlineStoreBlog; OnlineStorePage: OnlineStorePage; Order: Order; OrderDisputeSummary: OrderDisputeSummary; OrderTransaction: OrderTransaction; PaymentCustomization: PaymentCustomization; PaymentMandate: PaymentMandate; PaymentSchedule: PaymentSchedule; PaymentTerms: PaymentTerms; PaymentTermsTemplate: PaymentTermsTemplate; PriceList: PriceList; PriceRule: PriceRule; PriceRuleDiscountCode: PriceRuleDiscountCode; PrivateMetafield: PrivateMetafield; Product: Product; ProductBundleOperation: ProductBundleOperation; ProductFeed: ProductFeed; ProductOption: ProductOption; ProductOptionValue: ProductOptionValue; ProductSetOperation: ProductSetOperation; ProductTaxonomyNode: ProductTaxonomyNode; ProductVariant: ProductVariant; ProductVariantComponent: ProductVariantComponent; Publication: Publication; PublicationResourceOperation: PublicationResourceOperation; QuantityPriceBreak: QuantityPriceBreak; Refund: Refund; RefundShippingLine: RefundShippingLine; Return: Return; ReturnLineItem: ReturnLineItem; ReturnableFulfillment: ReturnableFulfillment; ReverseDelivery: ReverseDelivery; ReverseDeliveryLineItem: ReverseDeliveryLineItem; ReverseFulfillmentOrder: ReverseFulfillmentOrder; ReverseFulfillmentOrderDisposition: ReverseFulfillmentOrderDisposition; ReverseFulfillmentOrderLineItem: ReverseFulfillmentOrderLineItem; SaleAdditionalFee: SaleAdditionalFee; SavedSearch: SavedSearch; ScriptTag: ScriptTag; Segment: Segment; SellingPlan: SellingPlan; SellingPlanGroup: SellingPlanGroup; ServerPixel: ServerPixel; Shop: Shop; ShopAddress: ShopAddress; ShopPolicy: ShopPolicy; ShopifyPaymentsAccount: ShopifyPaymentsAccount; ShopifyPaymentsBalanceTransaction: ShopifyPaymentsBalanceTransaction; ShopifyPaymentsBankAccount: ShopifyPaymentsBankAccount; ShopifyPaymentsDispute: ShopifyPaymentsDispute; ShopifyPaymentsDisputeEvidence: ShopifyPaymentsDisputeEvidence; ShopifyPaymentsDisputeFileUpload: ShopifyPaymentsDisputeFileUpload; ShopifyPaymentsDisputeFulfillment: ShopifyPaymentsDisputeFulfillment; ShopifyPaymentsPayout: ShopifyPaymentsPayout; ShopifyPaymentsVerification: ShopifyPaymentsVerification; StaffMember: StaffMember; StandardMetafieldDefinitionTemplate: StandardMetafieldDefinitionTemplate; StoreCreditAccount: StoreCreditAccount; StoreCreditAccountCreditTransaction: StoreCreditAccountCreditTransaction; StoreCreditAccountDebitRevertTransaction: StoreCreditAccountDebitRevertTransaction; StoreCreditAccountDebitTransaction: StoreCreditAccountDebitTransaction; StorefrontAccessToken: StorefrontAccessToken; SubscriptionBillingAttempt: SubscriptionBillingAttempt; SubscriptionContract: SubscriptionContract; SubscriptionDraft: SubscriptionDraft; TaxonomyAttribute: TaxonomyAttribute; TaxonomyCategory: TaxonomyCategory; TaxonomyChoiceListAttribute: TaxonomyChoiceListAttribute; TaxonomyMeasurementAttribute: TaxonomyMeasurementAttribute; TaxonomyValue: TaxonomyValue; TenderTransaction: TenderTransaction; TransactionFee: TransactionFee; UnverifiedReturnLineItem: UnverifiedReturnLineItem; UrlRedirect: UrlRedirect; UrlRedirectImport: UrlRedirectImport; Validation: Validation; Video: Video; WebPixel: WebPixel; WebhookSubscription: WebhookSubscription }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: { ids: Array<BaseTypes.ID> }, isArray: true, itemsAreNullable: true, isNullable: false }

/**
 * The shop's online store channel.
 */
onlineStore: { baseType: OnlineStore, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns an Order resource by ID.
 */
order: { baseType: Order, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a payment status by payment reference ID. Used to check the status of a deferred payment.
 */
orderPaymentStatus: { baseType: OrderPaymentStatus, arguments: { orderId: BaseTypes.ID; paymentReferenceId: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of the shop's order saved searches.
 */
orderSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a list of [orders](https://shopify.dev/api/admin-graphql/latest/objects/Order) placed in the store, including data such as order status, customer, and line item details.
 * Use the `orders` query to build reports, analyze sales performance, or automate fulfillment workflows. The `orders` query supports [pagination](https://shopify.dev/docs/api/usage/pagination-graphql),
 * [sorting](https://shopify.dev/docs/api/admin-graphql/latest/queries/orders#argument-sortkey), and [filtering](https://shopify.dev/docs/api/admin-graphql/latest/queries/orders#argument-query).
 */
orders: { baseType: OrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.OrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns the count of orders for the given shop. Limited to a maximum of 10000.
 */
ordersCount: { baseType: Count, arguments: { limit?: BaseTypes.Int | null; query?: BaseTypes.String | null; savedSearchId?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The payment customization.
 */
paymentCustomization: { baseType: PaymentCustomization, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The payment customizations.
 */
paymentCustomizations: { baseType: PaymentCustomizationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of payment terms templates eligible for all shops and users.
 */
paymentTermsTemplates: { baseType: PaymentTermsTemplate, arguments: { paymentTermsType?: BaseTypes.PaymentTermsType | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The number of pendings orders. Limited to a maximum of 10000.
 */
pendingOrdersCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a price list resource by ID.
 */
priceList: { baseType: PriceList, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All price lists for a shop.
 */
priceLists: { baseType: PriceListConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.PriceListSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a code price rule resource by ID.
 */
priceRule: { baseType: PriceRule, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of the shop's price rule saved searches.
 */
priceRuleSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a list of price rule resources that have at least one associated discount code.
 */
priceRules: { baseType: PriceRuleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.PriceRuleSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The primary market of the shop.
 */
primaryMarket: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by ID.
 * Private metafields are accessible only by the application that created them.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of private metafields associated to a resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; owner: BaseTypes.ID; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a Product resource by ID.
 */
product: { baseType: Product, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Return a product by its handle.
 */
productByHandle: { baseType: Product, arguments: { handle: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the product duplicate job.
 */
productDuplicateJob: { baseType: ProductDuplicateJob, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a ProductFeed resource by ID.
 */
productFeed: { baseType: ProductFeed, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product feeds for the shop.
 */
productFeeds: { baseType: ProductFeedConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a ProductOperation resource by ID.
 *
 * This can be used to query the
 * [ProductSetOperation](https://shopify.dev/api/admin-graphql/current/objects/ProductSetOperation), using
 * the ID that was returned
 * [when the product was created or updated](https://shopify.dev/api/admin/migrate/new-product-model/sync-data#create-a-product-with-variants-and-options-asynchronously)
 * by the
 * [ProductSet](https://shopify.dev/api/admin-graphql/current/mutations/productSet) mutation.
 *
 * The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.
 *
 * The `product` field provides the details of the created or updated product.
 *
 * For the
 * [ProductSetOperation](https://shopify.dev/api/admin-graphql/current/objects/ProductSetOperation), the
 * `userErrors` field provides mutation errors that occurred during the operation.
 */
productOperation: { members: { ProductBundleOperation: ProductBundleOperation; ProductSetOperation: ProductSetOperation }, fields: { product: { baseType: Product, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; status: { baseType: BaseTypes.ProductOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the product resource feedback for the currently authenticated app.
 */
productResourceFeedback: { baseType: ProductResourceFeedback, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of the shop's product saved searches.
 */
productSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a ProductVariant resource by ID.
 */
productVariant: { baseType: ProductVariant, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of product variants.
 */
productVariants: { baseType: ProductVariantConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.ProductVariantSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a list of products.
 */
products: { baseType: ProductConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.ProductSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Count of products.
 */
productsCount: { baseType: Count, arguments: { limit?: BaseTypes.Int | null; query?: BaseTypes.String | null; savedSearchId?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of publicly-accessible Admin API versions, including supported versions, the release candidate, and unstable versions.
 */
publicApiVersions: { baseType: ApiVersion, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Lookup a publication by ID.
 */
publication: { baseType: Publication, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of publications.
 */
publications: { baseType: PublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; catalogType?: BaseTypes.CatalogType | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Count of publications.
 */
publicationsCount: { baseType: Count, arguments: { catalogType?: BaseTypes.CatalogType | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a count of published products by publication ID.
 */
publishedProductsCount: { baseType: Count, arguments: { publicationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a Refund resource by ID.
 */
refund: { baseType: Refund, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a Return resource by ID.
 */
return: { baseType: Return, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The calculated monetary value to be exchanged due to the return.
 */
returnCalculate: { baseType: CalculatedReturn, arguments: { input: InputTypes.CalculateReturnInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Lookup a returnable fulfillment by ID.
 */
returnableFulfillment: { baseType: ReturnableFulfillment, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of returnable fulfillments.
 */
returnableFulfillments: { baseType: ReturnableFulfillmentConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; orderId: BaseTypes.ID; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Lookup a reverse delivery by ID.
 */
reverseDelivery: { baseType: ReverseDelivery, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Lookup a reverse fulfillment order by ID.
 */
reverseFulfillmentOrder: { baseType: ReverseFulfillmentOrder, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * <div class="note"><h4>Theme app extensions</h4>
 * <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
 *
 * <div class="note"><h4>Script tag deprecation</h4>
 * <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
 *
 *
 * Lookup a script tag resource by ID.
 */
scriptTag: { baseType: ScriptTag, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * <div class="note"><h4>Theme app extensions</h4>
 * <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
 *
 * <div class="note"><h4>Script tag deprecation</h4>
 * <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
 *
 *
 * A list of script tags.
 */
scriptTags: { baseType: ScriptTagConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; src?: BaseTypes.URL | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Customer Segment.
 */
segment: { baseType: Segment, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria.
 */
segmentFilterSuggestions: { baseType: SegmentFilterConnection, arguments: { after?: BaseTypes.String | null; first: BaseTypes.Int; search: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of filters.
 */
segmentFilters: { baseType: SegmentFilterConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of a shop's segment migrations.
 */
segmentMigrations: { baseType: SegmentMigrationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; savedSearchId?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of suggested values corresponding to a particular filter for a segment. A segment is a group of members, such as customers, that meet specific criteria.
 */
segmentValueSuggestions: { baseType: SegmentValueConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; filterQueryName?: BaseTypes.String | null; first?: BaseTypes.Int | null; functionParameterQueryName?: BaseTypes.String | null; last?: BaseTypes.Int | null; search: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of a shop's segments.
 */
segments: { baseType: SegmentConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.SegmentSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of segments for a shop.
 */
segmentsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a Selling Plan Group resource by ID.
 */
sellingPlanGroup: { baseType: SellingPlanGroup, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List Selling Plan Groups.
 */
sellingPlanGroups: { baseType: SellingPlanGroupConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.SellingPlanGroupSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The server pixel configured by the app.
 */
serverPixel: { baseType: ServerPixel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains
 * business and store management settings for the shop.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's billing preferences.
 */
shopBillingPreferences: { baseType: ShopBillingPreferences, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of locales available on a shop.
 */
shopLocales: { baseType: ShopLocale, arguments: { published?: BaseTypes.Boolean | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Returns a Shopify Function by its ID.
 * [Functions](https://shopify.dev/apps/build/functions)
 * enable you to customize Shopify's backend logic at defined parts of the commerce loop.
 */
shopifyFunction: { baseType: ShopifyFunction, arguments: { id: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the Shopify Functions owned by the querying API client installed on the shop.
 */
shopifyFunctions: { baseType: ShopifyFunctionConnection, arguments: { after?: BaseTypes.String | null; apiType?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; useCreationUi?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Shopify Payments account information, including balances and payouts.
 */
shopifyPaymentsAccount: { baseType: ShopifyPaymentsAccount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The StaffMember resource, by ID.
 */
staffMember: { baseType: StaffMember, arguments: { id?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.
 *
 * Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).
 */
standardMetafieldDefinitionTemplates: { baseType: StandardMetafieldDefinitionTemplateConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; constraintStatus?: BaseTypes.MetafieldDefinitionConstraintStatus | null; constraintSubtype?: InputTypes.MetafieldDefinitionConstraintSubtypeIdentifier | null; excludeActivated?: BaseTypes.Boolean | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a store credit account resource by ID.
 */
storeCreditAccount: { baseType: StoreCreditAccount, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a SubscriptionBillingAttempt by ID.
 */
subscriptionBillingAttempt: { baseType: SubscriptionBillingAttempt, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns subscription billing attempts on a store.
 */
subscriptionBillingAttempts: { baseType: SubscriptionBillingAttemptConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.SubscriptionBillingAttemptsSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a subscription billing cycle found either by cycle index or date.
 */
subscriptionBillingCycle: { baseType: SubscriptionBillingCycle, arguments: { billingCycleInput: InputTypes.SubscriptionBillingCycleInput }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Retrieves the results of the asynchronous job for the subscription billing cycle bulk action based on the specified job ID.
 * This query can be used to obtain the billing cycles that match the criteria defined in the subscriptionBillingCycleBulkSearch and subscriptionBillingCycleBulkCharge mutations.
 */
subscriptionBillingCycleBulkResults: { baseType: SubscriptionBillingCycleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; jobId: BaseTypes.ID; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns subscription billing cycles for a contract ID.
 */
subscriptionBillingCycles: { baseType: SubscriptionBillingCycleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; billingCyclesDateRangeSelector?: InputTypes.SubscriptionBillingCyclesDateRangeSelector | null; billingCyclesIndexRangeSelector?: InputTypes.SubscriptionBillingCyclesIndexRangeSelector | null; contractId: BaseTypes.ID; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.SubscriptionBillingCyclesSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a Subscription Contract resource by ID.
 */
subscriptionContract: { baseType: SubscriptionContract, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List Subscription Contracts.
 */
subscriptionContracts: { baseType: SubscriptionContractConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a Subscription Draft resource by ID.
 */
subscriptionDraft: { baseType: SubscriptionDraft, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The Taxonomy resource lets you access the categories, attributes and values of the loaded taxonomy tree.
 */
taxonomy: { baseType: Taxonomy, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of TenderTransactions associated with the shop.
 */
tenderTransactions: { baseType: TenderTransactionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A resource that can have localized values for different languages.
 */
translatableResource: { baseType: TranslatableResource, arguments: { resourceId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Resources that can have localized values for different languages.
 */
translatableResources: { baseType: TranslatableResourceConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; resourceType: BaseTypes.TranslatableResourceType; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Resources that can have localized values for different languages.
 */
translatableResourcesByIds: { baseType: TranslatableResourceConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; resourceIds: Array<BaseTypes.ID>; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a redirect resource by ID.
 */
urlRedirect: { baseType: UrlRedirect, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a redirect import resource by ID.
 */
urlRedirectImport: { baseType: UrlRedirectImport, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of the shop's URL redirect saved searches.
 */
urlRedirectSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of redirects for a shop.
 */
urlRedirects: { baseType: UrlRedirectConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.UrlRedirectSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Validation available on the shop.
 */
validation: { baseType: Validation, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Validations available on the shop.
 */
validations: { baseType: ValidationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.ValidationSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a
 * [web pixel](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)
 * by ID.
 */
webPixel: { baseType: WebPixel, arguments: { id?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a webhook subscription by ID.
 *
 * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
 */
webhookSubscription: { baseType: WebhookSubscription, arguments: { id: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns a list of webhook subscriptions.
 *
 * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
 */
webhookSubscriptions: { baseType: WebhookSubscriptionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; callbackUrl?: BaseTypes.URL | null; first?: BaseTypes.Int | null; format?: BaseTypes.WebhookSubscriptionFormat | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.WebhookSubscriptionSortKeys | null; topics?: Array<BaseTypes.WebhookSubscriptionTopic> | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The count of webhook subscriptions.
 *
 * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe). Limited to a maximum of 10000.
 */
webhookSubscriptionsCount: { baseType: Count, arguments: { query?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "QueryRoot", returnType: "QueryRoot", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items.
 */
export type Refund = {
/**
 * The date and time when the refund was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of the refunded duties as part of this refund.
 */
duties: { baseType: RefundDuty, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The optional note associated with the refund.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The order associated with the refund.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The `RefundLineItem` resources attached to the refund.
 */
refundLineItems: { baseType: RefundLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The `RefundShippingLine` resources attached to the refund.
 */
refundShippingLines: { baseType: RefundShippingLineConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The return associated with the refund.
 */
return: { baseType: Return, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The staff member who created the refund.
 */
staffMember: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total amount across all transactions for the refund.
 */
totalRefunded: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount across all transactions for the refund, in shop and presentment currencies.
 */
totalRefundedSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The transactions associated with the refund.
 */
transactions: { baseType: OrderTransactionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the refund was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Refund", returnType: "Refund", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & LegacyInteroperability & Node

/**
 * An agreement between the merchant and customer to refund all or a portion of the order.
 */
export type RefundAgreement = {
/**
 * The application that created the agreement.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time at which the agreement occured.
 */
happenedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the agreement.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason the agremeent was created.
 */
reason: { baseType: BaseTypes.OrderActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The refund associated with the agreement.
 */
refund: { baseType: Refund, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sales associated with the agreement.
 */
sales: { baseType: SaleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member associated with the agreement.
 */
user: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "RefundAgreement", returnType: "RefundAgreement", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SalesAgreement

/**
 * An auto-generated type for paginating through multiple Refunds.
 */
export type RefundConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: RefundEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in RefundEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Refund, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "RefundConnection", returnType: "RefundConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `refundCreate` mutation.
 */
export type RefundCreatePayload = {
/**
 * The order associated with the created refund.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The created refund.
 */
refund: { baseType: Refund, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "RefundCreatePayload", returnType: "RefundCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a refunded duty.
 */
export type RefundDuty = {
/**
 * The amount of a refunded duty in shop and presentment currencies.
 */
amountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The duty associated with this refunded duty.
 */
originalDuty: { baseType: Duty, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "RefundDuty", returnType: "RefundDuty", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Refund and a cursor during pagination.
 */
export type RefundEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of RefundEdge.
 */
node: { baseType: Refund, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "RefundEdge", returnType: "RefundEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A line item that's included in a refund.
 */
export type RefundLineItem = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The `LineItem` resource associated to the refunded line item.
 */
lineItem: { baseType: LineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The inventory restock location.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The price of a refunded line item.
 */
price: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price of a refunded line item in shop and presentment currencies.
 */
priceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity of a refunded line item.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of restock for the refunded line item.
 */
restockType: { baseType: BaseTypes.RefundLineItemRestockType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
 */
restocked: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subtotal price of a refunded line item.
 */
subtotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subtotal price of a refunded line item in shop and presentment currencies.
 */
subtotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total tax charged on a refunded line item.
 */
totalTax: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total tax charged on a refunded line item in shop and presentment currencies.
 */
totalTaxSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "RefundLineItem", returnType: "RefundLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple RefundLineItems.
 */
export type RefundLineItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: RefundLineItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in RefundLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: RefundLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "RefundLineItemConnection", returnType: "RefundLineItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one RefundLineItem and a cursor during pagination.
 */
export type RefundLineItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of RefundLineItemEdge.
 */
node: { baseType: RefundLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "RefundLineItemEdge", returnType: "RefundLineItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A shipping line item that's included in a refund.
 */
export type RefundShippingLine = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The `ShippingLine` resource associated to the refunded shipping line item.
 */
shippingLine: { baseType: ShippingLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "RefundShippingLine", returnType: "RefundShippingLine", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple RefundShippingLines.
 */
export type RefundShippingLineConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: RefundShippingLineEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in RefundShippingLineEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: RefundShippingLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "RefundShippingLineConnection", returnType: "RefundShippingLineConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one RefundShippingLine and a cursor during pagination.
 */
export type RefundShippingLineEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of RefundShippingLineEdge.
 */
node: { baseType: RefundShippingLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "RefundShippingLineEdge", returnType: "RefundShippingLineEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.
 * They can optionally have a specific icon and be dismissed by merchants.
 */
export type ResourceAlert = {
/**
 * Buttons in the alert that link to related information.
 * For example, _Edit variants_.
 */
actions: { baseType: ResourceAlertAction, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The secondary text in the alert that includes further information or instructions about how to solve a problem.
 */
content: { baseType: BaseTypes.HTML, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Unique identifier that appears when an alert is manually closed by the merchant.
 * Most alerts can't be manually closed.
 */
dismissibleHandle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * An icon that's optionally displayed with the alert.
 */
icon: { baseType: BaseTypes.ResourceAlertIcon, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Indication of how important the alert is.
 */
severity: { baseType: BaseTypes.ResourceAlertSeverity, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The primary text in the alert that includes information or describes the problem.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ResourceAlert", returnType: "ResourceAlert", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An action associated to a resource alert, such as editing variants.
 */
export type ResourceAlertAction = {
/**
 * Whether the action appears as a button or as a link.
 */
primary: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Resource for the action to show.
 */
show: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The text for the button in the alert. For example, _Edit variants_.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The target URL that the button links to.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ResourceAlertAction", returnType: "ResourceAlertAction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.
 */
export type ResourceFeedback = {
/**
 * Feedback from an app about the steps a merchant needs to take to set up the app on their store.
 */
appFeedback: { baseType: AppFeedback, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * List of AppFeedback detailing issues regarding a resource.
 */
details: { baseType: AppFeedback, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Summary of resource feedback pertaining to the resource.
 */
summary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ResourceFeedback", returnType: "ResourceFeedback", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a merchandising background operation interface.
 */
export type ResourceOperation = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The count of processed rows, summing imported, failed, and skipped rows.
 */
processedRowCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Represents a rows objects within this background operation.
 */
rowCount: { baseType: RowCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of this operation.
 */
status: { baseType: BaseTypes.ResourceOperationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A resource publication represents information about the publication of a resource.
 * An instance of `ResourcePublication`, unlike `ResourcePublicationV2`, can be neither published or scheduled to be published.
 *
 * See [ResourcePublicationV2](/api/admin-graphql/latest/objects/ResourcePublicationV2) for more context.
 */
export type ResourcePublication = {
/**
 * The channel the resource publication is published to.
 */
channel: { baseType: Channel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
 * If false, then the resource publication is neither published nor scheduled to be published.
 */
isPublished: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The publication the resource publication is published to.
 */
publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date that the resource publication was or is going to be published to the publication.
 * If the product isn't published, then this field returns an epoch timestamp.
 */
publishDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The resource published to the publication.
 */
publishable: { members: { Collection: Collection; Product: Product }, fields: { availablePublicationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publicationCount: { baseType: BaseTypes.Int, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnChannel: { baseType: BaseTypes.Boolean, arguments: { channelId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentChannel: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentPublication: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnPublication: { baseType: BaseTypes.Boolean, arguments: { publicationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublications: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublicationsCount: { baseType: Count, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }; resourcePublicationsV2: { baseType: ResourcePublicationV2Connection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; catalogType?: BaseTypes.CatalogType | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedChannels: { baseType: ChannelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedPublications: { baseType: PublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ResourcePublication", returnType: "ResourcePublication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple ResourcePublications.
 */
export type ResourcePublicationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ResourcePublicationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ResourcePublicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ResourcePublication, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ResourcePublicationConnection", returnType: "ResourcePublicationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ResourcePublication and a cursor during pagination.
 */
export type ResourcePublicationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ResourcePublicationEdge.
 */
node: { baseType: ResourcePublication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ResourcePublicationEdge", returnType: "ResourcePublicationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A resource publication represents information about the publication of a resource.
 * Unlike `ResourcePublication`, an instance of `ResourcePublicationV2` can't be unpublished. It must either be published or scheduled to be published.
 *
 * See [ResourcePublication](/api/admin-graphql/latest/objects/ResourcePublication) for more context.
 */
export type ResourcePublicationV2 = {
/**
 * Whether the resource publication is published. If true, then the resource publication is published to the publication.
 * If false, then the resource publication is staged to be published to the publication.
 */
isPublished: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The publication the resource publication is published to.
 */
publication: { baseType: Publication, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date that the resource publication was or is going to be published to the publication.
 */
publishDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The resource published to the publication.
 */
publishable: { members: { Collection: Collection; Product: Product }, fields: { availablePublicationsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; publicationCount: { baseType: BaseTypes.Int, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnChannel: { baseType: BaseTypes.Boolean, arguments: { channelId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentChannel: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnCurrentPublication: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; publishedOnPublication: { baseType: BaseTypes.Boolean, arguments: { publicationId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublications: { baseType: ResourcePublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; resourcePublicationsCount: { baseType: Count, arguments: { onlyPublished?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }; resourcePublicationsV2: { baseType: ResourcePublicationV2Connection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; catalogType?: BaseTypes.CatalogType | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; onlyPublished?: BaseTypes.Boolean | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedChannels: { baseType: ChannelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; unpublishedPublications: { baseType: PublicationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ResourcePublicationV2", returnType: "ResourcePublicationV2", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple ResourcePublicationV2s.
 */
export type ResourcePublicationV2Connection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ResourcePublicationV2Edge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ResourcePublicationV2Edge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ResourcePublicationV2, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ResourcePublicationV2Connection", returnType: "ResourcePublicationV2Connection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.
 */
export type ResourcePublicationV2Edge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ResourcePublicationV2Edge.
 */
node: { baseType: ResourcePublicationV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ResourcePublicationV2Edge", returnType: "ResourcePublicationV2Edge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A restocking fee is a fee captured as part of a return to cover the costs of handling a return line item.
 * Typically, this would cover the costs of inspecting, repackaging, and restocking the item.
 */
export type RestockingFee = {
/**
 * The amount of the restocking fee, in shop and presentment currencies.
 */
amountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the Fee.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the fee as a percentage.
 */
percentage: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "RestockingFee", returnType: "RestockingFee", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Fee

/**
 * Represents a return.
 */
export type Return = {
/**
 * Additional information about the declined return.
 */
decline: { baseType: ReturnDecline, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The exchange line items attached to the return.
 */
exchangeLineItems: { baseType: ExchangeLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; includeRemovedItems?: BaseTypes.Boolean | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the return.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order that the return belongs to.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of refunds associated with the return.
 */
refunds: { baseType: RefundConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The return line items attached to the return.
 */
returnLineItems: { baseType: ReturnLineItemTypeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The return shipping fees for the return.
 */
returnShippingFees: { baseType: ReturnShippingFee, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of reverse fulfillment orders for the return.
 */
reverseFulfillmentOrders: { baseType: ReverseFulfillmentOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the return.
 */
status: { baseType: BaseTypes.ReturnStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A suggested refund for the return.
 */
suggestedRefund: { baseType: SuggestedReturnRefund, arguments: { refundDuties?: Array<InputTypes.RefundDutyInput> | null; refundShipping?: InputTypes.RefundShippingInput | null; returnRefundLineItems: Array<InputTypes.ReturnRefundLineItemInput> }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The sum of all return line item quantities for the return.
 */
totalQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Return", returnType: "Return", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An agreement between the merchant and customer for a return.
 */
export type ReturnAgreement = {
/**
 * The application that created the agreement.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time at which the agreement occured.
 */
happenedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the agreement.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason the agremeent was created.
 */
reason: { baseType: BaseTypes.OrderActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The return associated with the agreement.
 */
return: { baseType: Return, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sales associated with the agreement.
 */
sales: { baseType: SaleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member associated with the agreement.
 */
user: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ReturnAgreement", returnType: "ReturnAgreement", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SalesAgreement

/**
 * Return type for `returnApproveRequest` mutation.
 */
export type ReturnApproveRequestPayload = {
/**
 * The approved return.
 */
return: { baseType: Return, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReturnApproveRequestPayload", returnType: "ReturnApproveRequestPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `returnCancel` mutation.
 */
export type ReturnCancelPayload = {
/**
 * The canceled return.
 */
return: { baseType: Return, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReturnCancelPayload", returnType: "ReturnCancelPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `returnClose` mutation.
 */
export type ReturnClosePayload = {
/**
 * The closed return.
 */
return: { baseType: Return, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReturnClosePayload", returnType: "ReturnClosePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Returns.
 */
export type ReturnConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ReturnEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ReturnEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Return, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnConnection", returnType: "ReturnConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `returnCreate` mutation.
 */
export type ReturnCreatePayload = {
/**
 * The created return.
 */
return: { baseType: Return, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReturnCreatePayload", returnType: "ReturnCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Additional information about why a merchant declined the customer's return request.
 */
export type ReturnDecline = {
/**
 * The notification message sent to the customer about their declined return request.
 * Maximum length: 500 characters.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The reason the customer's return request was declined.
 */
reason: { baseType: BaseTypes.ReturnDeclineReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnDecline", returnType: "ReturnDecline", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `returnDeclineRequest` mutation.
 */
export type ReturnDeclineRequestPayload = {
/**
 * The declined return.
 */
return: { baseType: Return, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReturnDeclineRequestPayload", returnType: "ReturnDeclineRequestPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Return and a cursor during pagination.
 */
export type ReturnEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ReturnEdge.
 */
node: { baseType: Return, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnEdge", returnType: "ReturnEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A return line item.
 */
export type ReturnLineItem = {
/**
 * A note from the customer that describes the item to be returned. Maximum length: 300 characters.
 */
customerNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The fulfillment line item from which items are returned.
 */
fulfillmentLineItem: { baseType: FulfillmentLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity being returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity that can be refunded.
 */
refundableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity that was refunded.
 */
refundedQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The restocking fee for the return line item.
 */
restockingFee: { baseType: RestockingFee, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The reason for returning the item.
 */
returnReason: { baseType: BaseTypes.ReturnReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Additional information about the reason for the return. Maximum length: 255 characters.
 */
returnReasonNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total weight of the item.
 */
totalWeight: { baseType: Weight, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total line price after all discounts on the line item, including both line item level discounts and code-based line item discounts, are applied.
 */
withCodeDiscountedTotalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnLineItem", returnType: "ReturnLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node & ReturnLineItemType

/**
 * Return type for `returnLineItemRemoveFromReturn` mutation.
 */
export type ReturnLineItemRemoveFromReturnPayload = {
/**
 * The modified return.
 */
return: { baseType: Return, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReturnLineItemRemoveFromReturnPayload", returnType: "ReturnLineItemRemoveFromReturnPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A return line item of any type.
 */
export type ReturnLineItemType = {
/**
 * A note from the customer that describes the item to be returned. Maximum length: 300 characters.
 */
customerNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity being returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity that can be refunded.
 */
refundableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity that was refunded.
 */
refundedQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason for returning the item.
 */
returnReason: { baseType: BaseTypes.ReturnReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Additional information about the reason for the return. Maximum length: 255 characters.
 */
returnReasonNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple ReturnLineItemTypes.
 */
export type ReturnLineItemTypeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ReturnLineItemTypeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ReturnLineItemTypeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { ReturnLineItem: ReturnLineItem; UnverifiedReturnLineItem: UnverifiedReturnLineItem }, fields: { customerNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; refundableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; refundedQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; returnReason: { baseType: BaseTypes.ReturnReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; returnReasonNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnLineItemTypeConnection", returnType: "ReturnLineItemTypeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ReturnLineItemType and a cursor during pagination.
 */
export type ReturnLineItemTypeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ReturnLineItemTypeEdge.
 */
node: { members: { ReturnLineItem: ReturnLineItem; UnverifiedReturnLineItem: UnverifiedReturnLineItem }, fields: { customerNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; refundableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; refundedQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; returnReason: { baseType: BaseTypes.ReturnReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; returnReasonNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnLineItemTypeEdge", returnType: "ReturnLineItemTypeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `returnRefund` mutation.
 */
export type ReturnRefundPayload = {
/**
 * The created refund.
 */
refund: { baseType: Refund, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReturnRefundPayload", returnType: "ReturnRefundPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `returnReopen` mutation.
 */
export type ReturnReopenPayload = {
/**
 * The reopened return.
 */
return: { baseType: Return, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReturnReopenPayload", returnType: "ReturnReopenPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `returnRequest` mutation.
 */
export type ReturnRequestPayload = {
/**
 * The requested return.
 */
return: { baseType: Return, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReturnRequestPayload", returnType: "ReturnRequestPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A return shipping fee is a fee captured as part of a return to cover the costs of shipping the return.
 */
export type ReturnShippingFee = {
/**
 * The amount of the return shipping fee, in shop and presentment currencies.
 */
amountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the Fee.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnShippingFee", returnType: "ReturnShippingFee", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Fee

/**
 * An error that occurs during the execution of a return mutation.
 */
export type ReturnUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ReturnErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnUserError", returnType: "ReturnUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A returnable fulfillment, which is an order that has been delivered
 * and is eligible to be returned to the merchant.
 */
export type ReturnableFulfillment = {
/**
 * The fulfillment that the returnable fulfillment refers to.
 */
fulfillment: { baseType: Fulfillment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID of the Returnable Fulfillment.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of returnable fulfillment line items.
 */
returnableFulfillmentLineItems: { baseType: ReturnableFulfillmentLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnableFulfillment", returnType: "ReturnableFulfillment", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple ReturnableFulfillments.
 */
export type ReturnableFulfillmentConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ReturnableFulfillmentEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ReturnableFulfillmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ReturnableFulfillment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnableFulfillmentConnection", returnType: "ReturnableFulfillmentConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ReturnableFulfillment and a cursor during pagination.
 */
export type ReturnableFulfillmentEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ReturnableFulfillmentEdge.
 */
node: { baseType: ReturnableFulfillment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnableFulfillmentEdge", returnType: "ReturnableFulfillmentEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A returnable fulfillment line item.
 */
export type ReturnableFulfillmentLineItem = {
/**
 * The fulfillment line item that can be returned.
 */
fulfillmentLineItem: { baseType: FulfillmentLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity available to be returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnableFulfillmentLineItem", returnType: "ReturnableFulfillmentLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple ReturnableFulfillmentLineItems.
 */
export type ReturnableFulfillmentLineItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ReturnableFulfillmentLineItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ReturnableFulfillmentLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ReturnableFulfillmentLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnableFulfillmentLineItemConnection", returnType: "ReturnableFulfillmentLineItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ReturnableFulfillmentLineItem and a cursor during pagination.
 */
export type ReturnableFulfillmentLineItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ReturnableFulfillmentLineItemEdge.
 */
node: { baseType: ReturnableFulfillmentLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReturnableFulfillmentLineItemEdge", returnType: "ReturnableFulfillmentLineItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.
 * For example, a buyer requests a return, and a merchant sends the buyer a shipping label.
 * The reverse delivery contains the context of the items sent back, how they're being sent back
 * (for example, a shipping label), and the current state of the delivery (tracking information).
 */
export type ReverseDelivery = {
/**
 * The deliverable associated with the reverse delivery.
 */
deliverable: { members: { ReverseDeliveryShippingDeliverable: ReverseDeliveryShippingDeliverable }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the reverse delivery.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reverse delivery line items attached to the reverse delivery.
 */
reverseDeliveryLineItems: { baseType: ReverseDeliveryLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The `ReverseFulfillmentOrder` associated with the reverse delivery.
 */
reverseFulfillmentOrder: { baseType: ReverseFulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseDelivery", returnType: "ReverseDelivery", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple ReverseDeliveries.
 */
export type ReverseDeliveryConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ReverseDeliveryEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ReverseDeliveryEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ReverseDelivery, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseDeliveryConnection", returnType: "ReverseDeliveryConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `reverseDeliveryCreateWithShipping` mutation.
 */
export type ReverseDeliveryCreateWithShippingPayload = {
/**
 * The created reverse delivery.
 */
reverseDelivery: { baseType: ReverseDelivery, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReverseDeliveryCreateWithShippingPayload", returnType: "ReverseDeliveryCreateWithShippingPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The delivery method and artifacts associated with a reverse delivery.
 */
export type ReverseDeliveryDeliverable = ReverseDeliveryShippingDeliverable

/**
 * Return type for `reverseDeliveryDispose` mutation.
 */
export type ReverseDeliveryDisposePayload = {
/**
 * The disposed reverse delivery line items.
 */
reverseDeliveryLineItems: { baseType: ReverseDeliveryLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReverseDeliveryDisposePayload", returnType: "ReverseDeliveryDisposePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ReverseDelivery and a cursor during pagination.
 */
export type ReverseDeliveryEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ReverseDeliveryEdge.
 */
node: { baseType: ReverseDelivery, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseDeliveryEdge", returnType: "ReverseDeliveryEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The return label file information for a reverse delivery.
 */
export type ReverseDeliveryLabelV2 = {
/**
 * The date and time when the reverse delivery label was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A public link that can be used to download the label image.
 */
publicFileUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the reverse delivery label was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseDeliveryLabelV2", returnType: "ReverseDeliveryLabelV2", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The details about a reverse delivery line item.
 */
export type ReverseDeliveryLineItem = {
/**
 * The dispositions of the item.
 */
dispositions: { baseType: ReverseFulfillmentOrderDisposition, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The expected number of units.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The corresponding reverse fulfillment order line item.
 */
reverseFulfillmentOrderLineItem: { baseType: ReverseFulfillmentOrderLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseDeliveryLineItem", returnType: "ReverseDeliveryLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple ReverseDeliveryLineItems.
 */
export type ReverseDeliveryLineItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ReverseDeliveryLineItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ReverseDeliveryLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ReverseDeliveryLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseDeliveryLineItemConnection", returnType: "ReverseDeliveryLineItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ReverseDeliveryLineItem and a cursor during pagination.
 */
export type ReverseDeliveryLineItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ReverseDeliveryLineItemEdge.
 */
node: { baseType: ReverseDeliveryLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseDeliveryLineItemEdge", returnType: "ReverseDeliveryLineItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A reverse shipping deliverable that may include a label and tracking information.
 */
export type ReverseDeliveryShippingDeliverable = {
/**
 * The return label attached to the reverse delivery.
 */
label: { baseType: ReverseDeliveryLabelV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The information to track the reverse delivery.
 */
tracking: { baseType: ReverseDeliveryTrackingV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ReverseDeliveryShippingDeliverable", returnType: "ReverseDeliveryShippingDeliverable", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `reverseDeliveryShippingUpdate` mutation.
 */
export type ReverseDeliveryShippingUpdatePayload = {
/**
 * The updated reverse delivery.
 */
reverseDelivery: { baseType: ReverseDelivery, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReverseDeliveryShippingUpdatePayload", returnType: "ReverseDeliveryShippingUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the information used to track a reverse delivery.
 */
export type ReverseDeliveryTrackingV2 = {
/**
 * The provider of the tracking information, in a human-readable format for display purposes.
 */
carrierName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The identifier used by the courier to identify the shipment.
 */
number: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL to track a shipment.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ReverseDeliveryTrackingV2", returnType: "ReverseDeliveryTrackingV2", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A group of one or more items in a return that will be processed at a fulfillment service.
 * There can be more than one reverse fulfillment order for a return at a given location.
 */
export type ReverseFulfillmentOrder = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of reverse fulfillment order line items for the reverse fulfillment order.
 */
lineItems: { baseType: ReverseFulfillmentOrderLineItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order associated with the reverse fulfillment order.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of reverse deliveries for the reverse fulfillment order.
 */
reverseDeliveries: { baseType: ReverseDeliveryConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the reverse fulfillment order.
 */
status: { baseType: BaseTypes.ReverseFulfillmentOrderStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The current confirmation for the reverse fulfillment order from a third-party logistics service.
 * If no third-party service is involved, then this value is `nil`.
 */
thirdPartyConfirmation: { baseType: ReverseFulfillmentOrderThirdPartyConfirmation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ReverseFulfillmentOrder", returnType: "ReverseFulfillmentOrder", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple ReverseFulfillmentOrders.
 */
export type ReverseFulfillmentOrderConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ReverseFulfillmentOrderEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ReverseFulfillmentOrderEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ReverseFulfillmentOrder, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseFulfillmentOrderConnection", returnType: "ReverseFulfillmentOrderConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `reverseFulfillmentOrderDispose` mutation.
 */
export type ReverseFulfillmentOrderDisposePayload = {
/**
 * The disposed reverse fulfillment order line items.
 */
reverseFulfillmentOrderLineItems: { baseType: ReverseFulfillmentOrderLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ReturnUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ReverseFulfillmentOrderDisposePayload", returnType: "ReverseFulfillmentOrderDisposePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The details of the arrangement of an item.
 */
export type ReverseFulfillmentOrderDisposition = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The location where the disposition occurred.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of disposed units.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The final arrangement of an item.
 */
type: { baseType: BaseTypes.ReverseFulfillmentOrderDispositionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseFulfillmentOrderDisposition", returnType: "ReverseFulfillmentOrderDisposition", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type which holds one ReverseFulfillmentOrder and a cursor during pagination.
 */
export type ReverseFulfillmentOrderEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ReverseFulfillmentOrderEdge.
 */
node: { baseType: ReverseFulfillmentOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseFulfillmentOrderEdge", returnType: "ReverseFulfillmentOrderEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The details about a reverse fulfillment order line item.
 */
export type ReverseFulfillmentOrderLineItem = {
/**
 * The dispositions of the item.
 */
dispositions: { baseType: ReverseFulfillmentOrderDisposition, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The corresponding fulfillment line item for a reverse fulfillment order line item.
 */
fulfillmentLineItem: { baseType: FulfillmentLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total number of units to be processed.
 */
totalQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseFulfillmentOrderLineItem", returnType: "ReverseFulfillmentOrderLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple ReverseFulfillmentOrderLineItems.
 */
export type ReverseFulfillmentOrderLineItemConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ReverseFulfillmentOrderLineItemEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ReverseFulfillmentOrderLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ReverseFulfillmentOrderLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseFulfillmentOrderLineItemConnection", returnType: "ReverseFulfillmentOrderLineItemConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ReverseFulfillmentOrderLineItem and a cursor during pagination.
 */
export type ReverseFulfillmentOrderLineItemEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ReverseFulfillmentOrderLineItemEdge.
 */
node: { baseType: ReverseFulfillmentOrderLineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseFulfillmentOrderLineItemEdge", returnType: "ReverseFulfillmentOrderLineItemEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The third-party confirmation of a reverse fulfillment order.
 */
export type ReverseFulfillmentOrderThirdPartyConfirmation = {
/**
 * The status of the reverse fulfillment order third-party confirmation.
 */
status: { baseType: BaseTypes.ReverseFulfillmentOrderThirdPartyConfirmationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ReverseFulfillmentOrderThirdPartyConfirmation", returnType: "ReverseFulfillmentOrderThirdPartyConfirmation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A risk fact belongs to a single risk assessment and serves to provide additional context for an assessment. Risk facts are not necessarily tied to the result of the recommendation.
 */
export type RiskFact = {
/**
 * A description of the fact.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Indicates whether the fact is a negative, neutral or positive contributor with regards to risk.
 */
sentiment: { baseType: BaseTypes.RiskFactSentiment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "RiskFact", returnType: "RiskFact", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A row count represents rows on background operation.
 */
export type RowCount = {
/**
 * Estimated number of rows contained within this background operation.
 */
count: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the operation exceeds max number of reportable rows.
 */
exceedsMax: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "RowCount", returnType: "RowCount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * SEO information.
 */
export type SEO = {
/**
 * SEO Description.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * SEO Title.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SEO", returnType: "SEO", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An individual sale record associated with a sales agreement. Every money value in an order's sales data is represented in the currency's smallest unit. When amounts are divided across multiple line items, such as taxes or order discounts, the amounts might not divide evenly across all of the line items on the order. To address this, the remaining currency units that couldn't be divided evenly are allocated one at a time, starting with the first line item, until they are all accounted for. In aggregate, the values sum up correctly. In isolation, one line item might have a different tax or discount amount than another line item of the same price, before taxes and discounts. This is because the amount could not be divided evenly across the items. The allocation of currency units across line items is immutable. After they are allocated, currency units are never reallocated or redistributed among the line items.
 */
export type Sale = {
/**
 * The type of order action that the sale represents.
 */
actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the sale.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line type assocated with the sale.
 */
lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units either ordered or intended to be returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All individual taxes associated with the sale.
 */
taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total sale amount after taxes and discounts.
 */
totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale after taxes.
 */
totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale before taxes.
 */
totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of taxes for the sale.
 */
totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The additional fee details for a line item.
 */
export type SaleAdditionalFee = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the additional fee.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price of the additional fee.
 */
price: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of taxes charged on the additional fee.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SaleAdditionalFee", returnType: "SaleAdditionalFee", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple Sales.
 */
export type SaleConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SaleEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SaleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { AdditionalFeeSale: AdditionalFeeSale; AdjustmentSale: AdjustmentSale; DutySale: DutySale; FeeSale: FeeSale; GiftCardSale: GiftCardSale; ProductSale: ProductSale; ShippingLineSale: ShippingLineSale; TipSale: TipSale; UnknownSale: UnknownSale }, fields: { actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SaleConnection", returnType: "SaleConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Sale and a cursor during pagination.
 */
export type SaleEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SaleEdge.
 */
node: { members: { AdditionalFeeSale: AdditionalFeeSale; AdjustmentSale: AdjustmentSale; DutySale: DutySale; FeeSale: FeeSale; GiftCardSale: GiftCardSale; ProductSale: ProductSale; ShippingLineSale: ShippingLineSale; TipSale: TipSale; UnknownSale: UnknownSale }, fields: { actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }; totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SaleEdge", returnType: "SaleEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The tax allocated to a sale from a single tax line.
 */
export type SaleTax = {
/**
 * The portion of the total tax amount on the related sale that comes from the associated tax line.
 */
amount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the sale tax.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The tax line associated with the sale.
 */
taxLine: { baseType: TaxLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SaleTax", returnType: "SaleTax", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more.
 */
export type SalesAgreement = {
/**
 * The application that created the agreement.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time at which the agreement occured.
 */
happenedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the agreement.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason the agremeent was created.
 */
reason: { baseType: BaseTypes.OrderActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sales associated with the agreement.
 */
sales: { baseType: SaleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member associated with the agreement.
 */
user: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }
}

/**
 * An auto-generated type for paginating through multiple SalesAgreements.
 */
export type SalesAgreementConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SalesAgreementEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SalesAgreementEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { OrderAgreement: OrderAgreement; OrderEditAgreement: OrderEditAgreement; RefundAgreement: RefundAgreement; ReturnAgreement: ReturnAgreement }, fields: { app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; happenedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; reason: { baseType: BaseTypes.OrderActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; sales: { baseType: SaleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; user: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SalesAgreementConnection", returnType: "SalesAgreementConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SalesAgreement and a cursor during pagination.
 */
export type SalesAgreementEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SalesAgreementEdge.
 */
node: { members: { OrderAgreement: OrderAgreement; OrderEditAgreement: OrderEditAgreement; RefundAgreement: RefundAgreement; ReturnAgreement: ReturnAgreement }, fields: { app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; happenedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; reason: { baseType: BaseTypes.OrderActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; sales: { baseType: SaleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }; user: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SalesAgreementEdge", returnType: "SalesAgreementEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A saved search is a representation of a search query saved in the admin.
 */
export type SavedSearch = {
/**
 * The filters of a saved search.
 */
filters: { baseType: SearchFilter, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of a saved search.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The query string of a saved search. This includes search terms and filters.
 */
query: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of resource this saved search is searching in.
 */
resourceType: { baseType: BaseTypes.SearchResultType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The search terms of a saved search.
 */
searchTerms: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SavedSearch", returnType: "SavedSearch", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & LegacyInteroperability & Node

/**
 * An auto-generated type for paginating through multiple SavedSearches.
 */
export type SavedSearchConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SavedSearchEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SavedSearchEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: SavedSearch, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SavedSearchConnection", returnType: "SavedSearchConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `savedSearchCreate` mutation.
 */
export type SavedSearchCreatePayload = {
/**
 * The saved search that was created.
 */
savedSearch: { baseType: SavedSearch, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SavedSearchCreatePayload", returnType: "SavedSearchCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `savedSearchDelete` mutation.
 */
export type SavedSearchDeletePayload = {
/**
 * The ID of the saved search that was deleted.
 */
deletedSavedSearchId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shop of the saved search that was deleted.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SavedSearchDeletePayload", returnType: "SavedSearchDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SavedSearch and a cursor during pagination.
 */
export type SavedSearchEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SavedSearchEdge.
 */
node: { baseType: SavedSearch, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SavedSearchEdge", returnType: "SavedSearchEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `savedSearchUpdate` mutation.
 */
export type SavedSearchUpdatePayload = {
/**
 * The saved search that was updated.
 */
savedSearch: { baseType: SavedSearch, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SavedSearchUpdatePayload", returnType: "SavedSearchUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Script discount applications capture the intentions of a discount that
 * was created by a Shopify Script for an order's line item or shipping line.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export type ScriptDiscountApplication = {
/**
 * The method by which the discount's value is applied to its entitled items.
 */
allocationMethod: { baseType: BaseTypes.DiscountApplicationAllocationMethod, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of the application as defined by the Script.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * An ordered index that can be used to identify the discount application and indicate the precedence
 * of the discount application for calculations.
 */
index: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How the discount amount is distributed on the discounted lines.
 */
targetSelection: { baseType: BaseTypes.DiscountApplicationTargetSelection, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the discount is applied on line items or shipping lines.
 */
targetType: { baseType: BaseTypes.DiscountApplicationTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title of the application as defined by the Script.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the discount application.
 */
value: { members: { MoneyV2: MoneyV2; PricingPercentageValue: PricingPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ScriptDiscountApplication", returnType: "ScriptDiscountApplication", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DiscountApplication

/**
 * <div class="note"><h4>Theme app extensions</h4>
 * <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
 *
 * <div class="note"><h4>Script tag deprecation</h4>
 * <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
 *
 *
 * A script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the **Order status** page of checkout.
 */
export type ScriptTag = {
/**
 * Whether the Shopify CDN can cache and serve the script tag.
 * If `true`, then the script will be cached and served by the CDN.
 * The cache expires 15 minutes after the script tag is successfully returned.
 * If `false`, then the script will be served as is.
 */
cache: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the script tag was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The page or pages on the online store that the script should be included.
 */
displayScope: { baseType: BaseTypes.ScriptTagDisplayScope, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL to the remote script.
 */
src: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the script tag was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ScriptTag", returnType: "ScriptTag", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & LegacyInteroperability & Node

/**
 * An auto-generated type for paginating through multiple ScriptTags.
 */
export type ScriptTagConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ScriptTagEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ScriptTagEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ScriptTag, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ScriptTagConnection", returnType: "ScriptTagConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `scriptTagCreate` mutation.
 */
export type ScriptTagCreatePayload = {
/**
 * The script tag that was created.
 */
scriptTag: { baseType: ScriptTag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ScriptTagCreatePayload", returnType: "ScriptTagCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `scriptTagDelete` mutation.
 */
export type ScriptTagDeletePayload = {
/**
 * The ID of the deleted script tag.
 */
deletedScriptTagId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ScriptTagDeletePayload", returnType: "ScriptTagDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ScriptTag and a cursor during pagination.
 */
export type ScriptTagEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ScriptTagEdge.
 */
node: { baseType: ScriptTag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ScriptTagEdge", returnType: "ScriptTagEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `scriptTagUpdate` mutation.
 */
export type ScriptTagUpdatePayload = {
/**
 * The script tag that was updated.
 */
scriptTag: { baseType: ScriptTag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ScriptTagUpdatePayload", returnType: "ScriptTagUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A filter in a search query represented by a key value pair.
 */
export type SearchFilter = {
/**
 * The key of the search filter.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the search filter.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SearchFilter", returnType: "SearchFilter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A list of search filters along with their specific options in value and label pair for filtering.
 */
export type SearchFilterOptions = {
/**
 * A list of options that can be use to filter product availability.
 */
productAvailability: { baseType: FilterOption, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SearchFilterOptions", returnType: "SearchFilterOptions", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an individual result returned from a search.
 */
export type SearchResult = {
/**
 * Returns the search result description text.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the Image resource presented to accompany a search result.
 */
image: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the ID of the resource returned in the search result.
 */
reference: { members: { AbandonedCheckout: AbandonedCheckout; AbandonedCheckoutLineItem: AbandonedCheckoutLineItem; Abandonment: Abandonment; AddAllProductsOperation: AddAllProductsOperation; AdditionalFee: AdditionalFee; App: App; AppCatalog: AppCatalog; AppCredit: AppCredit; AppInstallation: AppInstallation; AppPurchaseOneTime: AppPurchaseOneTime; AppRevenueAttributionRecord: AppRevenueAttributionRecord; AppSubscription: AppSubscription; AppUsageRecord: AppUsageRecord; BasicEvent: BasicEvent; BulkOperation: BulkOperation; CalculatedOrder: CalculatedOrder; CartTransform: CartTransform; CashTrackingAdjustment: CashTrackingAdjustment; CashTrackingSession: CashTrackingSession; CatalogCsvOperation: CatalogCsvOperation; Channel: Channel; ChannelDefinition: ChannelDefinition; ChannelInformation: ChannelInformation; CheckoutProfile: CheckoutProfile; Collection: Collection; CommentEvent: CommentEvent; Company: Company; CompanyAddress: CompanyAddress; CompanyContact: CompanyContact; CompanyContactRole: CompanyContactRole; CompanyContactRoleAssignment: CompanyContactRoleAssignment; CompanyLocation: CompanyLocation; CompanyLocationCatalog: CompanyLocationCatalog; Customer: Customer; CustomerPaymentMethod: CustomerPaymentMethod; CustomerSegmentMembersQuery: CustomerSegmentMembersQuery; CustomerVisit: CustomerVisit; DeliveryCarrierService: DeliveryCarrierService; DeliveryCondition: DeliveryCondition; DeliveryCountry: DeliveryCountry; DeliveryCustomization: DeliveryCustomization; DeliveryLocationGroup: DeliveryLocationGroup; DeliveryMethod: DeliveryMethod; DeliveryMethodDefinition: DeliveryMethodDefinition; DeliveryParticipant: DeliveryParticipant; DeliveryProfile: DeliveryProfile; DeliveryProfileItem: DeliveryProfileItem; DeliveryPromiseProvider: DeliveryPromiseProvider; DeliveryProvince: DeliveryProvince; DeliveryRateDefinition: DeliveryRateDefinition; DeliveryZone: DeliveryZone; DiscountAutomaticBxgy: DiscountAutomaticBxgy; DiscountAutomaticNode: DiscountAutomaticNode; DiscountCodeNode: DiscountCodeNode; DiscountNode: DiscountNode; DiscountRedeemCodeBulkCreation: DiscountRedeemCodeBulkCreation; Domain: Domain; DraftOrder: DraftOrder; DraftOrderLineItem: DraftOrderLineItem; DraftOrderTag: DraftOrderTag; Duty: Duty; ExchangeLineItem: ExchangeLineItem; ExchangeV2: ExchangeV2; ExternalVideo: ExternalVideo; Fulfillment: Fulfillment; FulfillmentConstraintRule: FulfillmentConstraintRule; FulfillmentEvent: FulfillmentEvent; FulfillmentLineItem: FulfillmentLineItem; FulfillmentOrder: FulfillmentOrder; FulfillmentOrderDestination: FulfillmentOrderDestination; FulfillmentOrderLineItem: FulfillmentOrderLineItem; FulfillmentOrderMerchantRequest: FulfillmentOrderMerchantRequest; GenericFile: GenericFile; GiftCard: GiftCard; InventoryAdjustmentGroup: InventoryAdjustmentGroup; InventoryItem: InventoryItem; InventoryItemMeasurement: InventoryItemMeasurement; InventoryLevel: InventoryLevel; InventoryQuantity: InventoryQuantity; LineItem: LineItem; LineItemGroup: LineItemGroup; LineItemMutable: LineItemMutable; Location: Location; MailingAddress: MailingAddress; Market: Market; MarketCatalog: MarketCatalog; MarketRegionCountry: MarketRegionCountry; MarketWebPresence: MarketWebPresence; MarketingActivity: MarketingActivity; MarketingEvent: MarketingEvent; MediaImage: MediaImage; Menu: Menu; Metafield: Metafield; MetafieldDefinition: MetafieldDefinition; MetafieldStorefrontVisibility: MetafieldStorefrontVisibility; Metaobject: Metaobject; MetaobjectDefinition: MetaobjectDefinition; Model3d: Model3d; OnlineStoreArticle: OnlineStoreArticle; OnlineStoreBlog: OnlineStoreBlog; OnlineStorePage: OnlineStorePage; Order: Order; OrderDisputeSummary: OrderDisputeSummary; OrderTransaction: OrderTransaction; PaymentCustomization: PaymentCustomization; PaymentMandate: PaymentMandate; PaymentSchedule: PaymentSchedule; PaymentTerms: PaymentTerms; PaymentTermsTemplate: PaymentTermsTemplate; PriceList: PriceList; PriceRule: PriceRule; PriceRuleDiscountCode: PriceRuleDiscountCode; PrivateMetafield: PrivateMetafield; Product: Product; ProductBundleOperation: ProductBundleOperation; ProductFeed: ProductFeed; ProductOption: ProductOption; ProductOptionValue: ProductOptionValue; ProductSetOperation: ProductSetOperation; ProductTaxonomyNode: ProductTaxonomyNode; ProductVariant: ProductVariant; ProductVariantComponent: ProductVariantComponent; Publication: Publication; PublicationResourceOperation: PublicationResourceOperation; QuantityPriceBreak: QuantityPriceBreak; Refund: Refund; RefundShippingLine: RefundShippingLine; Return: Return; ReturnLineItem: ReturnLineItem; ReturnableFulfillment: ReturnableFulfillment; ReverseDelivery: ReverseDelivery; ReverseDeliveryLineItem: ReverseDeliveryLineItem; ReverseFulfillmentOrder: ReverseFulfillmentOrder; ReverseFulfillmentOrderDisposition: ReverseFulfillmentOrderDisposition; ReverseFulfillmentOrderLineItem: ReverseFulfillmentOrderLineItem; SaleAdditionalFee: SaleAdditionalFee; SavedSearch: SavedSearch; ScriptTag: ScriptTag; Segment: Segment; SellingPlan: SellingPlan; SellingPlanGroup: SellingPlanGroup; ServerPixel: ServerPixel; Shop: Shop; ShopAddress: ShopAddress; ShopPolicy: ShopPolicy; ShopifyPaymentsAccount: ShopifyPaymentsAccount; ShopifyPaymentsBalanceTransaction: ShopifyPaymentsBalanceTransaction; ShopifyPaymentsBankAccount: ShopifyPaymentsBankAccount; ShopifyPaymentsDispute: ShopifyPaymentsDispute; ShopifyPaymentsDisputeEvidence: ShopifyPaymentsDisputeEvidence; ShopifyPaymentsDisputeFileUpload: ShopifyPaymentsDisputeFileUpload; ShopifyPaymentsDisputeFulfillment: ShopifyPaymentsDisputeFulfillment; ShopifyPaymentsPayout: ShopifyPaymentsPayout; ShopifyPaymentsVerification: ShopifyPaymentsVerification; StaffMember: StaffMember; StandardMetafieldDefinitionTemplate: StandardMetafieldDefinitionTemplate; StoreCreditAccount: StoreCreditAccount; StoreCreditAccountCreditTransaction: StoreCreditAccountCreditTransaction; StoreCreditAccountDebitRevertTransaction: StoreCreditAccountDebitRevertTransaction; StoreCreditAccountDebitTransaction: StoreCreditAccountDebitTransaction; StorefrontAccessToken: StorefrontAccessToken; SubscriptionBillingAttempt: SubscriptionBillingAttempt; SubscriptionContract: SubscriptionContract; SubscriptionDraft: SubscriptionDraft; TaxonomyAttribute: TaxonomyAttribute; TaxonomyCategory: TaxonomyCategory; TaxonomyChoiceListAttribute: TaxonomyChoiceListAttribute; TaxonomyMeasurementAttribute: TaxonomyMeasurementAttribute; TaxonomyValue: TaxonomyValue; TenderTransaction: TenderTransaction; TransactionFee: TransactionFee; UnverifiedReturnLineItem: UnverifiedReturnLineItem; UrlRedirect: UrlRedirect; UrlRedirectImport: UrlRedirectImport; Validation: Validation; Video: Video; WebPixel: WebPixel; WebhookSubscription: WebhookSubscription }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns the resource title.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns the absolute URL to the resource in the search result.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SearchResult", returnType: "SearchResult", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The connection type for SearchResult.
 */
export type SearchResultConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SearchResultEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
resultsAfterCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SearchResultConnection", returnType: "SearchResultConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SearchResult and a cursor during pagination.
 */
export type SearchResultEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SearchResultEdge.
 */
node: { baseType: SearchResult, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SearchResultEdge", returnType: "SearchResultEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A dynamic collection of customers based on specific criteria.
 */
export type Segment = {
/**
 * The date and time when the segment was added to the store.
 */
creationDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the segment was last updated.
 */
lastEditDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the segment.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers.
 */
query: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Segment", returnType: "Segment", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A filter that takes a value that's associated with an object. For example, the `tags` field is associated with the [`Customer`](/api/admin-graphql/latest/objects/Customer) object.
 */
export type SegmentAssociationFilter = {
/**
 * The localized name of the filter.
 */
localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a file can have multiple values for a single customer.
 */
multiValue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The query name of the filter.
 */
queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentAssociationFilter", returnType: "SegmentAssociationFilter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SegmentFilter

/**
 * The statistics of a given attribute.
 */
export type SegmentAttributeStatistics = {
/**
 * The average of a given attribute.
 */
average: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of a given attribute.
 */
sum: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentAttributeStatistics", returnType: "SegmentAttributeStatistics", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A filter with a Boolean value that's been added to a segment query.
 */
export type SegmentBooleanFilter = {
/**
 * The localized name of the filter.
 */
localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a file can have multiple values for a single customer.
 */
multiValue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The query name of the filter.
 */
queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentBooleanFilter", returnType: "SegmentBooleanFilter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SegmentFilter

/**
 * An auto-generated type for paginating through multiple Segments.
 */
export type SegmentConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SegmentEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SegmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Segment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentConnection", returnType: "SegmentConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `segmentCreate` mutation.
 */
export type SegmentCreatePayload = {
/**
 * The newly created segment.
 */
segment: { baseType: Segment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SegmentCreatePayload", returnType: "SegmentCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A filter with a date value that's been added to a segment query.
 */
export type SegmentDateFilter = {
/**
 * The localized name of the filter.
 */
localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a file can have multiple values for a single customer.
 */
multiValue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The query name of the filter.
 */
queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentDateFilter", returnType: "SegmentDateFilter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SegmentFilter

/**
 * Return type for `segmentDelete` mutation.
 */
export type SegmentDeletePayload = {
/**
 * ID of the deleted segment.
 */
deletedSegmentId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SegmentDeletePayload", returnType: "SegmentDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Segment and a cursor during pagination.
 */
export type SegmentEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SegmentEdge.
 */
node: { baseType: Segment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentEdge", returnType: "SegmentEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A filter with a set of possible values that's been added to a segment query.
 */
export type SegmentEnumFilter = {
/**
 * The localized name of the filter.
 */
localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a file can have multiple values for a single customer.
 */
multiValue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The query name of the filter.
 */
queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentEnumFilter", returnType: "SegmentEnumFilter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SegmentFilter

/**
 * A filter that's used to segment customers based on the date that an event occured. For example, the `product_bought` event filter allows you to segment customers based on what products they've bought.
 */
export type SegmentEventFilter = {
/**
 * The localized name of the filter.
 */
localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a file can have multiple values for a single customer.
 */
multiValue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The parameters for an event segment filter.
 */
parameters: { baseType: SegmentEventFilterParameter, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The query name of the filter.
 */
queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The return value type for an event segment filter.
 */
returnValueType: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentEventFilter", returnType: "SegmentEventFilter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SegmentFilter

/**
 * The parameters for an event segment filter.
 */
export type SegmentEventFilterParameter = {
/**
 * Whether the parameter accepts a list of values.
 */
acceptsMultipleValues: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The localized description of the parameter.
 */
localizedDescription: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The localized name of the parameter.
 */
localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the parameter is optional.
 */
optional: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of the parameter.
 */
parameterType: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The query name of the parameter.
 */
queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentEventFilterParameter", returnType: "SegmentEventFilterParameter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The filters used in segment queries associated with a shop.
 */
export type SegmentFilter = {
/**
 * The localized name of the filter.
 */
localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a file can have multiple values for a single customer.
 */
multiValue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The query name of the filter.
 */
queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple SegmentFilters.
 */
export type SegmentFilterConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SegmentFilterEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SegmentFilterEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { SegmentAssociationFilter: SegmentAssociationFilter; SegmentBooleanFilter: SegmentBooleanFilter; SegmentDateFilter: SegmentDateFilter; SegmentEnumFilter: SegmentEnumFilter; SegmentEventFilter: SegmentEventFilter; SegmentFloatFilter: SegmentFloatFilter; SegmentIntegerFilter: SegmentIntegerFilter; SegmentStringFilter: SegmentStringFilter }, fields: { localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; multiValue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentFilterConnection", returnType: "SegmentFilterConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SegmentFilter and a cursor during pagination.
 */
export type SegmentFilterEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SegmentFilterEdge.
 */
node: { members: { SegmentAssociationFilter: SegmentAssociationFilter; SegmentBooleanFilter: SegmentBooleanFilter; SegmentDateFilter: SegmentDateFilter; SegmentEnumFilter: SegmentEnumFilter; SegmentEventFilter: SegmentEventFilter; SegmentFloatFilter: SegmentFloatFilter; SegmentIntegerFilter: SegmentIntegerFilter; SegmentStringFilter: SegmentStringFilter }, fields: { localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; multiValue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentFilterEdge", returnType: "SegmentFilterEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A filter with a double-precision, floating-point value that's been added to a segment query.
 */
export type SegmentFloatFilter = {
/**
 * The localized name of the filter.
 */
localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a file can have multiple values for a single customer.
 */
multiValue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The query name of the filter.
 */
queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentFloatFilter", returnType: "SegmentFloatFilter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SegmentFilter

/**
 * A filter with an integer that's been added to a segment query.
 */
export type SegmentIntegerFilter = {
/**
 * The localized name of the filter.
 */
localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a file can have multiple values for a single customer.
 */
multiValue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The query name of the filter.
 */
queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentIntegerFilter", returnType: "SegmentIntegerFilter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SegmentFilter

/**
 * The response type for the `segmentMembership` object.
 */
export type SegmentMembership = {
/**
 * A Boolean that indicates whether or not the customer in the query is a member of the segment, which is identified using the `segmentId`.
 */
isMember: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A `segmentId` that's used for testing membership.
 */
segmentId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentMembership", returnType: "SegmentMembership", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A list of maps that contain `segmentId` IDs and `isMember` Booleans. The maps represent segment memberships.
 */
export type SegmentMembershipResponse = {
/**
 * The membership status for the given list of segments.
 */
memberships: { baseType: SegmentMembership, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SegmentMembershipResponse", returnType: "SegmentMembershipResponse", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A segment and its corresponding saved search.
 * For example, you can use `SegmentMigration` to retrieve the segment ID that corresponds to a saved search ID.
 */
export type SegmentMigration = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the saved search.
 */
savedSearchId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the segment.
 */
segmentId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SegmentMigration", returnType: "SegmentMigration", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple SegmentMigrations.
 */
export type SegmentMigrationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SegmentMigrationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SegmentMigrationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: SegmentMigration, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentMigrationConnection", returnType: "SegmentMigrationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SegmentMigration and a cursor during pagination.
 */
export type SegmentMigrationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SegmentMigrationEdge.
 */
node: { baseType: SegmentMigration, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentMigrationEdge", returnType: "SegmentMigrationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The statistics of a given segment.
 */
export type SegmentStatistics = {
/**
 * The statistics of a given attribute.
 */
attributeStatistics: { baseType: SegmentAttributeStatistics, arguments: { attributeName: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentStatistics", returnType: "SegmentStatistics", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A filter with a string that's been added to a segment query.
 */
export type SegmentStringFilter = {
/**
 * The localized name of the filter.
 */
localizedName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a file can have multiple values for a single customer.
 */
multiValue: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The query name of the filter.
 */
queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentStringFilter", returnType: "SegmentStringFilter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SegmentFilter

/**
 * Return type for `segmentUpdate` mutation.
 */
export type SegmentUpdatePayload = {
/**
 * The updated segment.
 */
segment: { baseType: Segment, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SegmentUpdatePayload", returnType: "SegmentUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A list of suggested values associated with an individual segment. A
 * segment is a group of members, such as customers, that meet specific
 * criteria.
 */
export type SegmentValue = {
/**
 * The localized version of the value's name. This name is displayed to the merchant.
 */
localizedValue: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the query associated with the suggestion.
 */
queryName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentValue", returnType: "SegmentValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple SegmentValues.
 */
export type SegmentValueConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SegmentValueEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SegmentValueEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: SegmentValue, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentValueConnection", returnType: "SegmentValueConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SegmentValue and a cursor during pagination.
 */
export type SegmentValueEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SegmentValueEdge.
 */
node: { baseType: SegmentValue, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SegmentValueEdge", returnType: "SegmentValueEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Properties used by customers to select a product variant.
 * Products can have multiple options, like different sizes or colors.
 */
export type SelectedOption = {
/**
 * The product option’s name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product option’s value object.
 */
optionValue: { baseType: ProductOptionValue, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product option’s value.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SelectedOption", returnType: "SelectedOption", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
 * and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
 * up these records if you need to restore them later.
 *
 * For more information on selling plans, refer to
 * [*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
 */
export type SellingPlan = {
/**
 * A selling plan policy which describes the recurring billing details.
 */
billingPolicy: { members: { SellingPlanFixedBillingPolicy: SellingPlanFixedBillingPolicy; SellingPlanRecurringBillingPolicy: SellingPlanRecurringBillingPolicy }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The category used to classify the selling plan for reporting purposes.
 */
category: { baseType: BaseTypes.SellingPlanCategory, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the selling plan was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A selling plan policy which describes the delivery details.
 */
deliveryPolicy: { members: { SellingPlanFixedDeliveryPolicy: SellingPlanFixedDeliveryPolicy; SellingPlanRecurringDeliveryPolicy: SellingPlanRecurringDeliveryPolicy }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Buyer facing string which describes the selling plan commitment.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * When to reserve inventory for a selling plan.
 */
inventoryPolicy: { baseType: SellingPlanInventoryPolicy, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A customer-facing description of the selling plan.
 *
 * If your store supports multiple currencies, then don't include country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This field won't be converted to reflect different currencies.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
 */
options: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Relative position of the selling plan for display. A lower position will be displayed before a higher position.
 */
position: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Selling plan pricing details.
 */
pricingPolicies: { members: { SellingPlanFixedPricingPolicy: SellingPlanFixedPricingPolicy; SellingPlanRecurringPricingPolicy: SellingPlanRecurringPricingPolicy }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SellingPlan", returnType: "SellingPlan", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Node

/**
 * Specifies the date when delivery or fulfillment is completed by a merchant for a given time cycle. You can also
 * define a cutoff for which customers are eligible to enter this cycle and the desired behavior for customers who
 * start their subscription inside the cutoff period.
 *
 * Some example scenarios where anchors can be useful to implement advanced delivery behavior:
 * - A merchant starts fulfillment on a specific date every month.
 * - A merchant wants to bill the 1st of every quarter.
 * - A customer expects their delivery every Tuesday.
 *
 * For more details, see [About Selling Plans](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans#anchors).
 */
export type SellingPlanAnchor = {
/**
 * The cutoff day for the anchor. Specifies a buffer period before the anchor date for orders to be included in a
 * delivery or fulfillment cycle.
 *
 * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
 * the days of the week according to ISO 8601, where 1 is Monday.
 *
 * If `type` is MONTHDAY, then the value must be between 1-31.
 *
 * If `type` is YEARDAY, then the value must be `null`.
 */
cutoffDay: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The day of the anchor.
 *
 * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
 * the days of the week according to ISO 8601, where 1 is Monday.
 *
 * If `type` isn't WEEKDAY, then the value must be between 1-31.
 */
day: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The month of the anchor. If type is different than YEARDAY, then the value must
 * be `null` or between 1-12.
 */
month: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.
 */
type: { baseType: BaseTypes.SellingPlanAnchorType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanAnchor", returnType: "SellingPlanAnchor", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
 * three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
 * policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
 * We recommend backing up these records if you need to restore them later.
 */
export type SellingPlanBillingPolicy = SellingPlanFixedBillingPolicy | SellingPlanRecurringBillingPolicy

/**
 * The amount charged at checkout when the full amount isn't charged at checkout.
 */
export type SellingPlanCheckoutCharge = {
/**
 * The charge type for the checkout charge.
 */
type: { baseType: BaseTypes.SellingPlanCheckoutChargeType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The charge value for the checkout charge.
 */
value: { members: { MoneyV2: MoneyV2; SellingPlanCheckoutChargePercentageValue: SellingPlanCheckoutChargePercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanCheckoutCharge", returnType: "SellingPlanCheckoutCharge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The percentage value of the price used for checkout charge.
 */
export type SellingPlanCheckoutChargePercentageValue = {
/**
 * The percentage value of the price used for checkout charge.
 */
percentage: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanCheckoutChargePercentageValue", returnType: "SellingPlanCheckoutChargePercentageValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The portion of the price to be charged at checkout.
 */
export type SellingPlanCheckoutChargeValue = MoneyV2 | SellingPlanCheckoutChargePercentageValue

/**
 * An auto-generated type for paginating through multiple SellingPlans.
 */
export type SellingPlanConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SellingPlanEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SellingPlanEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: SellingPlan, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanConnection", returnType: "SellingPlanConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
 * every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
 * pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
 * We recommend backing up these records if you need to restore them later.
 */
export type SellingPlanDeliveryPolicy = SellingPlanFixedDeliveryPolicy | SellingPlanRecurringDeliveryPolicy

/**
 * An auto-generated type which holds one SellingPlan and a cursor during pagination.
 */
export type SellingPlanEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SellingPlanEdge.
 */
node: { baseType: SellingPlan, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanEdge", returnType: "SellingPlanEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The fixed selling plan billing policy defines how much of the price of the product will be billed to customer
 * at checkout. If there is an outstanding balance, it determines when it will be paid.
 */
export type SellingPlanFixedBillingPolicy = {
/**
 * The checkout charge when the full amount isn't charged at checkout.
 */
checkoutCharge: { baseType: SellingPlanCheckoutCharge, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The exact time when to capture the full payment.
 */
remainingBalanceChargeExactTime: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration.
 */
remainingBalanceChargeTimeAfterCheckout: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * When to capture payment for amount due.
 */
remainingBalanceChargeTrigger: { baseType: BaseTypes.SellingPlanRemainingBalanceChargeTrigger, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanFixedBillingPolicy", returnType: "SellingPlanFixedBillingPolicy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a fixed selling plan delivery policy.
 */
export type SellingPlanFixedDeliveryPolicy = {
/**
 * The specific anchor dates upon which the delivery interval calculations should be made.
 */
anchors: { baseType: SellingPlanAnchor, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A buffer period for orders to be included in next fulfillment anchor.
 */
cutoff: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the fulfillment should trigger.
 */
fulfillmentExactTime: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN.
 */
fulfillmentTrigger: { baseType: BaseTypes.SellingPlanFulfillmentTrigger, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the delivery policy is merchant or buyer-centric.
 * Buyer-centric delivery policies state the time when the buyer will receive the goods.
 * Merchant-centric delivery policies state the time when the fulfillment should be started.
 * Currently, only merchant-centric delivery policies are supported.
 */
intent: { baseType: BaseTypes.SellingPlanFixedDeliveryPolicyIntent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
 */
preAnchorBehavior: { baseType: BaseTypes.SellingPlanFixedDeliveryPolicyPreAnchorBehavior, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanFixedDeliveryPolicy", returnType: "SellingPlanFixedDeliveryPolicy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the pricing policy of a subscription or deferred purchase option selling plan.
 * The selling plan fixed pricing policy works with the billing and delivery policy
 * to determine the final price. Discounts are divided among fulfillments.
 * For example, a subscription with a $10 discount and two deliveries will have a $5
 * discount applied to each delivery.
 */
export type SellingPlanFixedPricingPolicy = {
/**
 * The price adjustment type.
 */
adjustmentType: { baseType: BaseTypes.SellingPlanPricingPolicyAdjustmentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price adjustment value.
 */
adjustmentValue: { members: { MoneyV2: MoneyV2; SellingPlanPricingPolicyPercentageValue: SellingPlanPricingPolicyPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the fixed selling plan pricing policy was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanFixedPricingPolicy", returnType: "SellingPlanFixedPricingPolicy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SellingPlanPricingPolicyBase

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type SellingPlanGroup = {
/**
 * The ID for app, exposed in Liquid and product JSON.
 */
appId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the given product is directly associated to the selling plan group.
 */
appliesToProduct: { baseType: BaseTypes.Boolean, arguments: { productId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the given product variant is directly associated to the selling plan group.
 */
appliesToProductVariant: { baseType: BaseTypes.Boolean, arguments: { productVariantId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether any of the product variants of the given product are associated to the selling plan group.
 */
appliesToProductVariants: { baseType: BaseTypes.Boolean, arguments: { productId: BaseTypes.ID }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the selling plan group was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The merchant-facing description of the selling plan group.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The merchant-facing label of the selling plan group.
 */
merchantCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The buyer-facing label of the selling plan group.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
 */
options: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The relative position of the selling plan group for display.
 */
position: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Product variants associated to the selling plan group.
 */
productVariants: { baseType: ProductVariantConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; productId?: BaseTypes.ID | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A count of product variants associated to the selling plan group.
 */
productVariantsCount: { baseType: Count, arguments: { productId?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Products associated to the selling plan group.
 */
products: { baseType: ProductConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A count of products associated to the selling plan group.
 */
productsCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Selling plans associated to the selling plan group.
 */
sellingPlans: { baseType: SellingPlanConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A summary of the policies associated to the selling plan group.
 */
summary: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SellingPlanGroup", returnType: "SellingPlanGroup", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasPublishedTranslations & Node

/**
 * Return type for `sellingPlanGroupAddProductVariants` mutation.
 */
export type SellingPlanGroupAddProductVariantsPayload = {
/**
 * The updated selling plan group.
 */
sellingPlanGroup: { baseType: SellingPlanGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SellingPlanGroupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SellingPlanGroupAddProductVariantsPayload", returnType: "SellingPlanGroupAddProductVariantsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `sellingPlanGroupAddProducts` mutation.
 */
export type SellingPlanGroupAddProductsPayload = {
/**
 * The updated selling plan group.
 */
sellingPlanGroup: { baseType: SellingPlanGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SellingPlanGroupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SellingPlanGroupAddProductsPayload", returnType: "SellingPlanGroupAddProductsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple SellingPlanGroups.
 */
export type SellingPlanGroupConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SellingPlanGroupEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SellingPlanGroupEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: SellingPlanGroup, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanGroupConnection", returnType: "SellingPlanGroupConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `sellingPlanGroupCreate` mutation.
 */
export type SellingPlanGroupCreatePayload = {
/**
 * The created selling plan group object.
 */
sellingPlanGroup: { baseType: SellingPlanGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SellingPlanGroupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SellingPlanGroupCreatePayload", returnType: "SellingPlanGroupCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `sellingPlanGroupDelete` mutation.
 */
export type SellingPlanGroupDeletePayload = {
/**
 * The ID of the deleted selling plan group object.
 */
deletedSellingPlanGroupId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SellingPlanGroupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SellingPlanGroupDeletePayload", returnType: "SellingPlanGroupDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
 */
export type SellingPlanGroupEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SellingPlanGroupEdge.
 */
node: { baseType: SellingPlanGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanGroupEdge", returnType: "SellingPlanGroupEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `sellingPlanGroupRemoveProductVariants` mutation.
 */
export type SellingPlanGroupRemoveProductVariantsPayload = {
/**
 * The removed product variant ids.
 */
removedProductVariantIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SellingPlanGroupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SellingPlanGroupRemoveProductVariantsPayload", returnType: "SellingPlanGroupRemoveProductVariantsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `sellingPlanGroupRemoveProducts` mutation.
 */
export type SellingPlanGroupRemoveProductsPayload = {
/**
 * The removed product ids.
 */
removedProductIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SellingPlanGroupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SellingPlanGroupRemoveProductsPayload", returnType: "SellingPlanGroupRemoveProductsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `sellingPlanGroupUpdate` mutation.
 */
export type SellingPlanGroupUpdatePayload = {
/**
 * The IDs of the deleted Subscription Plans.
 */
deletedSellingPlanIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The updated Selling Plan Group.
 */
sellingPlanGroup: { baseType: SellingPlanGroup, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SellingPlanGroupUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SellingPlanGroupUpdatePayload", returnType: "SellingPlanGroupUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a selling plan group custom error.
 */
export type SellingPlanGroupUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.SellingPlanGroupUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanGroupUserError", returnType: "SellingPlanGroupUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The selling plan inventory policy.
 */
export type SellingPlanInventoryPolicy = {
/**
 * When to reserve inventory for the order.
 */
reserve: { baseType: BaseTypes.SellingPlanReserve, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanInventoryPolicy", returnType: "SellingPlanInventoryPolicy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
 * for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
 * associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
 * hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
 * to restore them later.
 */
export type SellingPlanPricingPolicy = SellingPlanFixedPricingPolicy | SellingPlanRecurringPricingPolicy

/**
 * Represents a selling plan pricing policy adjustment value type.
 */
export type SellingPlanPricingPolicyAdjustmentValue = MoneyV2 | SellingPlanPricingPolicyPercentageValue

/**
 * Represents selling plan pricing policy common fields.
 */
export type SellingPlanPricingPolicyBase = {
/**
 * The price adjustment type.
 */
adjustmentType: { baseType: BaseTypes.SellingPlanPricingPolicyAdjustmentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price adjustment value.
 */
adjustmentValue: { members: { MoneyV2: MoneyV2; SellingPlanPricingPolicyPercentageValue: SellingPlanPricingPolicyPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The percentage value of a selling plan pricing policy percentage type.
 */
export type SellingPlanPricingPolicyPercentageValue = {
/**
 * The percentage value.
 */
percentage: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanPricingPolicyPercentageValue", returnType: "SellingPlanPricingPolicyPercentageValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a recurring selling plan billing policy.
 */
export type SellingPlanRecurringBillingPolicy = {
/**
 * Specific anchor dates upon which the billing interval calculations should be made.
 */
anchors: { baseType: SellingPlanAnchor, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The date and time when the selling plan billing policy was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The billing frequency, it can be either: day, week, month or year.
 */
interval: { baseType: BaseTypes.SellingPlanInterval, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of intervals between billings.
 */
intervalCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Maximum number of billing iterations.
 */
maxCycles: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Minimum number of billing iterations.
 */
minCycles: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SellingPlanRecurringBillingPolicy", returnType: "SellingPlanRecurringBillingPolicy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a recurring selling plan delivery policy.
 */
export type SellingPlanRecurringDeliveryPolicy = {
/**
 * The specific anchor dates upon which the delivery interval calculations should be made.
 */
anchors: { baseType: SellingPlanAnchor, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The date and time when the selling plan delivery policy was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Number of days which represent a buffer period for orders to be included in a cycle.
 */
cutoff: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the delivery policy is merchant or buyer-centric.
 * Buyer-centric delivery policies state the time when the buyer will receive the goods.
 * Merchant-centric delivery policies state the time when the fulfillment should be started.
 * Currently, only merchant-centric delivery policies are supported.
 */
intent: { baseType: BaseTypes.SellingPlanRecurringDeliveryPolicyIntent, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The delivery frequency, it can be either: day, week, month or year.
 */
interval: { baseType: BaseTypes.SellingPlanInterval, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of intervals between deliveries.
 */
intervalCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
 */
preAnchorBehavior: { baseType: BaseTypes.SellingPlanRecurringDeliveryPolicyPreAnchorBehavior, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanRecurringDeliveryPolicy", returnType: "SellingPlanRecurringDeliveryPolicy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a recurring selling plan pricing policy. It applies after the fixed pricing policy. By using the afterCycle parameter, you can specify the cycle when the recurring pricing policy comes into effect. Recurring pricing policies are not available for deferred purchase options.
 */
export type SellingPlanRecurringPricingPolicy = {
/**
 * The price adjustment type.
 */
adjustmentType: { baseType: BaseTypes.SellingPlanPricingPolicyAdjustmentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The price adjustment value.
 */
adjustmentValue: { members: { MoneyV2: MoneyV2; SellingPlanPricingPolicyPercentageValue: SellingPlanPricingPolicyPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Cycle after which this pricing policy applies.
 */
afterCycle: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the recurring selling plan pricing policy was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SellingPlanRecurringPricingPolicy", returnType: "SellingPlanRecurringPricingPolicy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SellingPlanPricingPolicyBase

/**
 * A server pixel stores configuration for streaming customer interactions to an EventBridge or PubSub endpoint.
 */
export type ServerPixel = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The current state of this server pixel.
 */
status: { baseType: BaseTypes.ServerPixelStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Address of the EventBridge or PubSub endpoint.
 */
webhookEndpointAddress: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ServerPixel", returnType: "ServerPixel", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `serverPixelCreate` mutation.
 */
export type ServerPixelCreatePayload = {
/**
 * The new server pixel.
 */
serverPixel: { baseType: ServerPixel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ErrorsServerPixelUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ServerPixelCreatePayload", returnType: "ServerPixelCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `serverPixelDelete` mutation.
 */
export type ServerPixelDeletePayload = {
/**
 * The ID of the server pixel that was deleted, if one was deleted.
 */
deletedServerPixelId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ErrorsServerPixelUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ServerPixelDeletePayload", returnType: "ServerPixelDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the shipping details that the customer chose for their order.
 */
export type ShippingLine = {
/**
 * A reference to the carrier service that provided the rate.
 * Present when the rate was computed by a third-party carrier service.
 */
carrierIdentifier: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A reference to the shipping method.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the shipping line is custom or not.
 */
custom: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The general classification of the delivery method.
 */
deliveryCategory: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The discounts that have been allocated to the shipping line.
 */
discountAllocations: { baseType: DiscountAllocation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The pre-tax shipping price with discounts applied.
 * As of API version 2024-07, this will be calculated including cart level discounts, such as the free shipping discount.
 */
discountedPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shipping price after applying discounts. If the parent order.taxesIncluded field is true, then this price includes taxes. If not, it's the pre-tax price.
 * As of API version 2024-07, this will be calculated including cart level discounts, such as the free shipping discount.
 */
discountedPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the shipping line has been removed.
 */
isRemoved: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The pre-tax shipping price without any discounts applied.
 */
originalPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The pre-tax shipping price without any discounts applied.
 */
originalPriceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The phone number at the shipping address.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the price of the shipping line.
 */
price: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The fulfillment service requested for the shipping method.
 * Present if the shipping method requires processing by a third party fulfillment service.
 */
requestedFulfillmentService: { baseType: FulfillmentService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A unique identifier for the shipping rate. The format can change without notice and isn't meant to be shown to users.
 */
shippingRateHandle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Returns the rate source for the shipping line.
 */
source: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The TaxLine objects connected to this shipping line.
 */
taxLines: { baseType: TaxLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Returns the title of the shipping line.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShippingLine", returnType: "ShippingLine", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple ShippingLines.
 */
export type ShippingLineConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ShippingLineEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ShippingLineEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ShippingLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShippingLineConnection", returnType: "ShippingLineConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ShippingLine and a cursor during pagination.
 */
export type ShippingLineEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ShippingLineEdge.
 */
node: { baseType: ShippingLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShippingLineEdge", returnType: "ShippingLineEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A sale associated with a shipping charge.
 */
export type ShippingLineSale = {
/**
 * The type of order action that the sale represents.
 */
actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the sale.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line type assocated with the sale.
 */
lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units either ordered or intended to be returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return.
 */
shippingLine: { baseType: ShippingLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All individual taxes associated with the sale.
 */
taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total sale amount after taxes and discounts.
 */
totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale after taxes.
 */
totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale before taxes.
 */
totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of taxes for the sale.
 */
totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShippingLineSale", returnType: "ShippingLineSale", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Sale

/**
 * The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout.
 */
export type ShippingMethod = {
/**
 * A unique code associated with the rate. For example: `expedited_mail`
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A description of the rate, which customers will see at checkout.
 * For example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.
 */
label: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShippingMethod", returnType: "ShippingMethod", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `shippingPackageDelete` mutation.
 */
export type ShippingPackageDeletePayload = {
/**
 * The ID of the deleted shipping package.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ShippingPackageDeletePayload", returnType: "ShippingPackageDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `shippingPackageMakeDefault` mutation.
 */
export type ShippingPackageMakeDefaultPayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ShippingPackageMakeDefaultPayload", returnType: "ShippingPackageMakeDefaultPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `shippingPackageUpdate` mutation.
 */
export type ShippingPackageUpdatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ShippingPackageUpdatePayload", returnType: "ShippingPackageUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A shipping rate is an additional cost added to the cost of the products that were ordered.
 */
export type ShippingRate = {
/**
 * Human-readable unique identifier for this shipping rate.
 */
handle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The cost associated with the shipping rate.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the shipping rate.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShippingRate", returnType: "ShippingRate", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the shipping costs refunded on the Refund.
 */
export type ShippingRefund = {
/**
 * The monetary value of the shipping fees to be refunded.
 */
amount: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The monetary value of the shipping fees to be refunded in shop and presentment currencies.
 */
amountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum amount of shipping fees currently refundable.
 */
maximumRefundable: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum amount of shipping fees currently refundable in shop and presentment currencies.
 */
maximumRefundableSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The monetary value of the tax allocated to shipping fees to be refunded.
 */
tax: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.
 */
taxSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShippingRefund", returnType: "ShippingRefund", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a collection of general settings and information about the shop.
 */
export type Shop = {
/**
 * A list of the shop's active alert messages that appear in the Shopify admin.
 */
alerts: { baseType: ShopAlert, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of the shop's product categories. Limit: 1000 product categories.
 */
allProductCategories: { baseType: ProductCategory, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of the shop's product categories. Limit: 1000 product categories.
 */
allProductCategoriesList: { baseType: TaxonomyCategory, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The token required to query the shop's reports or dashboards.
 */
analyticsToken: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The paginated list of fulfillment orders assigned to the shop locations owned by the app.
 *
 * Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations
 * managed by
 * [fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * that are registered by the app.
 * One app (api_client) can host multiple fulfillment services on a shop.
 * Each fulfillment service manages a dedicated location on a shop.
 * Assigned fulfillment orders can have associated
 * [fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),
 * or might currently not be requested to be fulfilled.
 *
 * The app must have `read_assigned_fulfillment_orders`
 * [access scope](https://shopify.dev/docs/api/usage/access-scopes)
 * to be able to retrieve fulfillment orders assigned to its locations.
 *
 * All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.
 * Perform filtering with the `assignmentStatus` argument
 * to receive only fulfillment orders that have been requested to be fulfilled.
 */
assignedFulfillmentOrders: { baseType: FulfillmentOrderConnection, arguments: { after?: BaseTypes.String | null; assignmentStatus?: BaseTypes.FulfillmentOrderAssignmentStatus | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; locationIds?: Array<BaseTypes.ID> | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.FulfillmentOrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of sales channels not currently installed on the shop.
 */
availableChannelApps: { baseType: AppConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's billing address information.
 */
billingAddress: { baseType: ShopAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of all channel definitions associated with a shop.
 */
channelDefinitionsForInstalledChannels: { baseType: AvailableChannelDefinitionsByChannel, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * List of the shop's active sales channels.
 */
channels: { baseType: ChannelConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Specifies whether the shop supports checkouts via Checkout API.
 */
checkoutApiSupported: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Return a collection by its handle.
 */
collectionByHandle: { baseType: Collection, arguments: { handle: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of the shop's collection saved searches.
 */
collectionSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop's collections.
 */
collections: { baseType: CollectionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.CollectionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The public-facing contact email address for the shop.
 * Customers will use this email to communicate with the shop owner.
 */
contactEmail: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Countries that have been defined in shipping zones for the shop.
 */
countriesInShippingZones: { baseType: CountriesInShippingZones, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the shop was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The three letter code for the currency that the shop sells in.
 */
currencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * How currencies are displayed on your store.
 */
currencyFormats: { baseType: CurrencyFormats, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The presentment currency settings for the shop excluding the shop's own currency.
 */
currencySettings: { baseType: CurrencySettingConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether customer accounts are required, optional, or disabled for the shop.
 */
customerAccounts: { baseType: BaseTypes.ShopCustomerAccountsSetting, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Information about the shop's customer accounts.
 */
customerAccountsV2: { baseType: CustomerAccountsV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop's customer saved searches.
 */
customerSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CustomerSavedSearchSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of tags that have been added to customer accounts.
 */
customerTags: { baseType: StringConnection, arguments: { first: BaseTypes.Int }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Customer accounts associated to the shop.
 */
customers: { baseType: CustomerConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.CustomerSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's meta description used in search engine results.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The domains configured for the shop.
 */
domains: { baseType: Domain, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * List of the shop's draft order saved searches.
 */
draftOrderSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of tags that have been added to draft orders.
 */
draftOrderTags: { baseType: StringConnection, arguments: { first: BaseTypes.Int }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of saved draft orders on the shop.
 */
draftOrders: { baseType: DraftOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.DraftOrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop owner's email address.
 * Shopify will use this email address to communicate with the shop owner.
 */
email: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The presentment currencies enabled for the shop.
 */
enabledPresentmentCurrencies: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The set of features enabled for the shop.
 */
features: { baseType: ShopFeatures, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The paginated list of merchant-managed and third-party fulfillment orders.
 */
fulfillmentOrders: { baseType: FulfillmentOrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; includeClosed?: BaseTypes.Boolean | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.FulfillmentOrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop's installed fulfillment services.
 */
fulfillmentServices: { baseType: FulfillmentService, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The shop's time zone as defined by the IANA.
 */
ianaTimezone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop's inventory items.
 */
inventoryItems: { baseType: InventoryItemConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of pendings orders on the shop.
 * Limited to a maximum of 10000.
 */
limitedPendingOrderCount: { baseType: LimitedPendingOrderCount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of active locations of the shop.
 */
locations: { baseType: LocationConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; includeInactive?: BaseTypes.Boolean | null; includeLegacy?: BaseTypes.Boolean | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.LocationSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of a shop's marketing events.
 */
marketingEvents: { baseType: MarketingEventConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MarketingEventSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether SMS marketing has been enabled on the shop's checkout configuration settings.
 */
marketingSmsConsentEnabledAtCheckout: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The approval signals for a shop to support onboarding to channel apps.
 */
merchantApprovalSignals: { baseType: MerchantApprovalSignals, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's .myshopify.com domain name.
 */
myshopifyDomain: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's settings related to navigation.
 */
navigationSettings: { baseType: NavigationItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The prefix that appears before order numbers.
 */
orderNumberFormatPrefix: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The suffix that appears after order numbers.
 */
orderNumberFormatSuffix: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop's order saved searches.
 */
orderSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of tags that have been added to orders.
 */
orderTags: { baseType: StringConnection, arguments: { first: BaseTypes.Int; sort?: BaseTypes.ShopTagSort | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the shop's orders.
 */
orders: { baseType: OrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.OrderSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's settings related to payments.
 */
paymentSettings: { baseType: PaymentSettings, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's billing plan.
 */
plan: { baseType: ShopPlan, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop's price rule saved searches.
 */
priceRuleSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop’s price rules.
 */
priceRules: { baseType: PriceRuleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.PriceRuleSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The primary domain of the shop's online store.
 */
primaryDomain: { baseType: Domain, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Return a product by its handle.
 */
productByHandle: { baseType: Product, arguments: { handle: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of all images of all products for the shop.
 */
productImages: { baseType: ImageConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.ProductImageSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop's product saved searches.
 */
productSavedSearches: { baseType: SavedSearchConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of tags that have been added to products.
 */
productTags: { baseType: StringConnection, arguments: { first: BaseTypes.Int }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of types added to products.
 */
productTypes: { baseType: StringConnection, arguments: { first: BaseTypes.Int }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop's product variants.
 */
productVariants: { baseType: ProductVariantConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.ProductVariantSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of vendors added to products.
 */
productVendors: { baseType: StringConnection, arguments: { first: BaseTypes.Int }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of the shop's products.
 */
products: { baseType: ProductConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.ProductSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of publications for the shop.
 */
publicationCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's limits for specific resources. For example, the maximum number ofvariants allowed per product, or the maximum number of locations allowed.
 */
resourceLimits: { baseType: ShopResourceLimits, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL of the rich text editor that can be used for mobile devices.
 */
richTextEditorUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Fetches a list of admin search results by a specified query.
 */
search: { baseType: SearchResultConnection, arguments: { after?: BaseTypes.String | null; first: BaseTypes.Int; query: BaseTypes.String; types?: Array<BaseTypes.SearchResultType> | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of search filter options for the shop. These can be used to filter productvisibility for the shop.
 */
searchFilters: { baseType: SearchFilterOptions, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the shop has outstanding setup steps.
 */
setupRequired: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of countries that the shop ships to.
 */
shipsToCountries: { baseType: BaseTypes.CountryCode, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of all legal policies associated with a shop.
 */
shopPolicies: { baseType: ShopPolicy, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The paginated list of the shop's staff members.
 */
staffMembers: { baseType: StaffMemberConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The storefront access token of a private application. These are scoped per-application.
 */
storefrontAccessTokens: { baseType: StorefrontAccessTokenConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL of the shop's storefront.
 */
storefrontUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the shop charges taxes for shipping.
 */
taxShipping: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether applicable taxes are included in the shop's product prices.
 */
taxesIncluded: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's time zone abbreviation.
 */
timezoneAbbreviation: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's time zone offset.
 */
timezoneOffset: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's time zone offset expressed as a number of minutes.
 */
timezoneOffsetMinutes: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether transactional SMS sent by Shopify have been disabled for a shop.
 */
transactionalSmsDisabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The shop's unit system for weights and measures.
 */
unitSystem: { baseType: BaseTypes.UnitSystem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the shop was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Fetches a list of images uploaded to the shop by their IDs.
 */
uploadedImagesByIds: { baseType: Image, arguments: { imageIds: Array<BaseTypes.ID> }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The URL of the shop's online store.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shop's primary unit of weight for products and shipping.
 */
weightUnit: { baseType: BaseTypes.WeightUnit, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Shop", returnType: "Shop", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafields & HasPublishedTranslations & Node

/**
 * An address for a shop.
 */
export type ShopAddress = {
/**
 * The first line of the address. Typically the street address or PO Box number.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The second line of the address. Typically the number of the apartment, suite, or unit.
 */
address2: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the city, district, village, or town.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the company or organization.
 */
company: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the address coordinates are valid.
 */
coordinatesValidated: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the country.
 */
country: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The two-letter code for the country of the address.
 *
 * For example, US.
 */
countryCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The two-letter code for the country of the address.
 *
 * For example, US.
 */
countryCodeV2: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The first name.
 */
firstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A formatted version of the address, customized by the provided arguments.
 */
formatted: { baseType: BaseTypes.String, arguments: { withCompany?: BaseTypes.Boolean | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A comma-separated list of the values for city, province, and country.
 */
formattedArea: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The last name.
 */
lastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The latitude coordinate of the address.
 */
latitude: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The longitude coordinate of the address.
 */
longitude: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The full name, based on firstName and lastName.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A phone number associated with the address.
 *
 * Formatted using E.164 standard. For example, _+16135551111_.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The region of the address, such as the province, state, or district.
 */
province: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The alphanumeric code for the region.
 *
 * For example, ON.
 */
provinceCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The zip or postal code of the address.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ShopAddress", returnType: "ShopAddress", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An alert message that appears in the Shopify admin about a problem with a store setting, with an action to take. For example, you could show an alert to ask the merchant to enter their billing information to activate Shopify Plus.
 */
export type ShopAlert = {
/**
 * The text for the button in the alert that links to related information. For example, _Add credit card_.
 */
action: { baseType: ShopAlertAction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A description of the alert and further information, such as whether the merchant will be charged.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopAlert", returnType: "ShopAlert", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An action associated to a shop alert, such as adding a credit card.
 */
export type ShopAlertAction = {
/**
 * The text for the button in the alert. For example, _Add credit card_.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The target URL that the button links to.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopAlertAction", returnType: "ShopAlertAction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Billing preferences for the shop.
 */
export type ShopBillingPreferences = {
/**
 * The currency the shop uses to pay for apps and services.
 */
currency: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopBillingPreferences", returnType: "ShopBillingPreferences", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the feature set available to the shop.
 * Most fields specify whether a feature is enabled for a shop, and some fields return information
 * related to specific features.
 */
export type ShopFeatures = {
/**
 * Whether a shop has access to Avalara AvaTax.
 */
avalaraAvatax: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The branding of the shop, which influences its look and feel in the Shopify admin.
 */
branding: { baseType: BaseTypes.ShopBranding, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Represents the Bundles feature configuration for the shop.
 */
bundles: { baseType: BundlesFeature, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop's online store can have CAPTCHA protection.
 */
captcha: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify.
 */
captchaExternalDomains: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Represents the cart transform feature configuration for the shop.
 */
cartTransform: { baseType: CartTransformFeature, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the delivery profiles functionality is enabled for this shop.
 */
deliveryProfiles: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop has access to the Google Analytics dynamic remarketing feature.
 */
dynamicRemarketing: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop can be migrated to use Shopify subscriptions.
 */
eligibleForSubscriptionMigration: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop is configured properly to sell subscriptions.
 */
eligibleForSubscriptions: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop can create gift cards.
 */
giftCards: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop displays Harmonized System codes on products. This is used for customs when shipping
 * internationally.
 */
harmonizedSystemCode: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop can enable international domains.
 */
internationalDomains: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop can enable international price overrides.
 */
internationalPriceOverrides: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop can enable international price rules.
 */
internationalPriceRules: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.
 */
legacySubscriptionGatewayEnabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial
 * or don't have a storefront.
 */
liveView: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop has multi-location functionality.
 */
multiLocation: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop has access to the onboarding visual.
 */
onboardingVisual: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop is configured to sell subscriptions with PayPal Express.
 */
paypalExpressSubscriptionGatewayStatus: { baseType: BaseTypes.PaypalExpressSubscriptionsGatewayStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop has access to all reporting features.
 */
reports: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop has ever had subscription products.
 */
sellsSubscriptions: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the shop has a Shopify Plus subscription.
 */
shopifyPlus: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful.
 */
showMetrics: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop has an online store.
 */
storefront: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a shop is using Shopify Balance.
 */
usingShopifyBalance: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopFeatures", returnType: "ShopFeatures", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A locale that's been enabled on a shop.
 */
export type ShopLocale = {
/**
 * The locale ISO code.
 */
locale: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The market web presences that use the locale.
 */
marketWebPresences: { baseType: MarketWebPresence, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The human-readable locale name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the locale is the default locale for the shop.
 */
primary: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the locale is visible to buyers.
 */
published: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopLocale", returnType: "ShopLocale", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `shopLocaleDisable` mutation.
 */
export type ShopLocaleDisablePayload = {
/**
 * ISO code of the locale that was deleted.
 */
locale: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ShopLocaleDisablePayload", returnType: "ShopLocaleDisablePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `shopLocaleEnable` mutation.
 */
export type ShopLocaleEnablePayload = {
/**
 * ISO code of the locale that was enabled.
 */
shopLocale: { baseType: ShopLocale, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ShopLocaleEnablePayload", returnType: "ShopLocaleEnablePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `shopLocaleUpdate` mutation.
 */
export type ShopLocaleUpdatePayload = {
/**
 * The locale that was updated.
 */
shopLocale: { baseType: ShopLocale, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ShopLocaleUpdatePayload", returnType: "ShopLocaleUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Shop Pay Installments payment details related to a transaction.
 */
export type ShopPayInstallmentsPaymentDetails = {
/**
 * The name of payment method used by the buyer.
 */
paymentMethodName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ShopPayInstallmentsPaymentDetails", returnType: "ShopPayInstallmentsPaymentDetails", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & BasePaymentDetails

/**
 * The billing plan of the shop.
 */
export type ShopPlan = {
/**
 * The name of the shop's billing plan.
 */
displayName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the shop is a partner development shop for testing purposes.
 */
partnerDevelopment: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the shop has a Shopify Plus subscription.
 */
shopifyPlus: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopPlan", returnType: "ShopPlan", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Policy that a merchant has configured for their store, such as their refund or privacy policy.
 */
export type ShopPolicy = {
/**
 * The text of the policy. The maximum size is 512kb.
 */
body: { baseType: BaseTypes.HTML, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the policy was created.
 */
createdAt: { baseType: BaseTypes.Date, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The translated title of the policy. For example, Refund Policy or Politique de remboursement.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The published translations associated with the resource.
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null }, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The shop policy type.
 */
type: { baseType: BaseTypes.ShopPolicyType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the policy was last modified.
 */
updatedAt: { baseType: BaseTypes.Date, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The public URL of the policy.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopPolicy", returnType: "ShopPolicy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasPublishedTranslations & Node

/**
 * Return type for `shopPolicyUpdate` mutation.
 */
export type ShopPolicyUpdatePayload = {
/**
 * The shop policy that has been updated.
 */
shopPolicy: { baseType: ShopPolicy, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ShopPolicyUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ShopPolicyUpdatePayload", returnType: "ShopPolicyUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of a shop policy mutation.
 */
export type ShopPolicyUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ShopPolicyErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopPolicyUserError", returnType: "ShopPolicyUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `shopResourceFeedbackCreate` mutation.
 */
export type ShopResourceFeedbackCreatePayload = {
/**
 * The shop feedback that's created.
 */
feedback: { baseType: AppFeedback, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ShopResourceFeedbackCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ShopResourceFeedbackCreatePayload", returnType: "ShopResourceFeedbackCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `ShopResourceFeedbackCreate`.
 */
export type ShopResourceFeedbackCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ShopResourceFeedbackCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopResourceFeedbackCreateUserError", returnType: "ShopResourceFeedbackCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Resource limits of a shop.
 */
export type ShopResourceLimits = {
/**
 * Maximum number of locations allowed.
 */
locationLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Maximum number of product options allowed.
 */
maxProductOptions: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum number of variants allowed per product.
 */
maxProductVariants: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the shop has reached the limit of the number of URL redirects it can make for resources.
 */
redirectLimitReached: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopResourceLimits", returnType: "ShopResourceLimits", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A Shopify Function.
 */
export type ShopifyFunction = {
/**
 * The API type of the Shopify Function.
 */
apiType: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The API version of the Shopify Function.
 */
apiVersion: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The app that owns the Shopify Function.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The App Bridge information for the Shopify Function.
 */
appBridge: { baseType: FunctionsAppBridge, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The client ID of the app that owns the Shopify Function.
 */
appKey: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of the Shopify Function.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the Shopify Function.
 */
id: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The input query of the Shopify Function.
 */
inputQuery: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The title of the Shopify Function.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * If the Shopify Function uses the creation UI in the Admin.
 */
useCreationUi: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyFunction", returnType: "ShopifyFunction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple ShopifyFunctions.
 */
export type ShopifyFunctionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ShopifyFunctionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ShopifyFunctionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ShopifyFunction, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyFunctionConnection", returnType: "ShopifyFunctionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ShopifyFunction and a cursor during pagination.
 */
export type ShopifyFunctionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ShopifyFunctionEdge.
 */
node: { baseType: ShopifyFunction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyFunctionEdge", returnType: "ShopifyFunctionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Balance and payout information for a
 * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
 * account. Balance includes all balances for the currencies supported by the shop.
 * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
 */
export type ShopifyPaymentsAccount = {
/**
 * Whether the Shopify Payments setup is completed.
 */
activated: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Current balances in all currencies for the account.
 */
balance: { baseType: MoneyV2, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of balance transactions associated with the shop.
 */
balanceTransactions: { baseType: ShopifyPaymentsBalanceTransactionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; hideTransfers?: BaseTypes.Boolean | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.BalanceTransactionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * All bank accounts configured for the Shopify Payments account.
 */
bankAccounts: { baseType: ShopifyPaymentsBankAccountConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The statement descriptor used for charges.
 *
 * The statement descriptor appears on a customer's credit card or bank statement when they make a purchase.
 */
chargeStatementDescriptor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The statement descriptors used for charges.
 *
 * These descriptors appear on a customer's credit card or bank statement when they make a purchase.
 */
chargeStatementDescriptors: { members: { ShopifyPaymentsDefaultChargeStatementDescriptor: ShopifyPaymentsDefaultChargeStatementDescriptor; ShopifyPaymentsJpChargeStatementDescriptor: ShopifyPaymentsJpChargeStatementDescriptor }, fields: { default: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }; prefix: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The Shopify Payments account country.
 */
country: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The default payout currency for the Shopify Payments account.
 */
defaultCurrency: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * All disputes that originated from a transaction made with the Shopify Payments account.
 */
disputes: { baseType: ShopifyPaymentsDisputeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The fraud settings of the Shopify Payments account.
 */
fraudSettings: { baseType: ShopifyPaymentsFraudSettings, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The notifications settings for the account.
 */
notificationSettings: { baseType: ShopifyPaymentsNotificationSettings, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the Shopify Payments account can be onboarded.
 */
onboardable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The payout schedule for the account.
 */
payoutSchedule: { baseType: ShopifyPaymentsPayoutSchedule, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The descriptor used for payouts.
 *
 * The descriptor appears on a merchant's bank statement when they receive a payout.
 */
payoutStatementDescriptor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All current and previous payouts made between the account and the bank account.
 */
payouts: { baseType: ShopifyPaymentsPayoutConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.PayoutSortKeys | null; transactionType?: BaseTypes.ShopifyPaymentsPayoutTransactionType | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The permitted documents for identity verification.
 */
permittedVerificationDocuments: { baseType: ShopifyPaymentsVerificationDocument, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The verifications necessary for this account.
 */
verifications: { baseType: ShopifyPaymentsVerification, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ShopifyPaymentsAccount", returnType: "ShopifyPaymentsAccount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The adjustment order object.
 */
export type ShopifyPaymentsAdjustmentOrder = {
/**
 * The amount of the adjustment order.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The link to the adjustment order.
 */
link: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the adjustment order.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the order transaction.
 */
orderTransactionId: { baseType: BaseTypes.BigInt, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsAdjustmentOrder", returnType: "ShopifyPaymentsAdjustmentOrder", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The order associated to the balance transaction.
 */
export type ShopifyPaymentsAssociatedOrder = {
/**
 * The ID of the associated order.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the associated order.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsAssociatedOrder", returnType: "ShopifyPaymentsAssociatedOrder", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A transaction that contributes to a Shopify Payments account balance.
 */
export type ShopifyPaymentsBalanceTransaction = {
/**
 * The reason for the adjustment that's associated with the transaction.
 * If the source_type isn't an adjustment, the value will be null.
 */
adjustmentReason: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The adjustment orders associated to the transaction.
 */
adjustmentsOrders: { baseType: ShopifyPaymentsAdjustmentOrder, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The amount contributing to the balance transaction.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The associated order for the balance transaction.
 */
associatedOrder: { baseType: ShopifyPaymentsAssociatedOrder, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Payout assoicated with the transaction.
 */
associatedPayout: { baseType: ShopifyPaymentsBalanceTransactionAssociatedPayout, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The fee amount contributing to the balance transaction.
 */
fee: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The net amount contributing to the merchant's balance.
 */
net: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the resource leading to the transaction.
 */
sourceId: { baseType: BaseTypes.BigInt, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The id of the
 * [Order Transaction](https://shopify.dev/docs/admin-api/rest/reference/orders/transaction)
 *
 * that resulted in this balance transaction.
 */
sourceOrderTransactionId: { baseType: BaseTypes.BigInt, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The source type of the balance transaction.
 */
sourceType: { baseType: BaseTypes.ShopifyPaymentsSourceType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Wether the tranaction was created in test mode.
 */
test: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the balance transaction was processed.
 */
transactionDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of transaction.
 */
type: { baseType: BaseTypes.ShopifyPaymentsTransactionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsBalanceTransaction", returnType: "ShopifyPaymentsBalanceTransaction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The payout associated with a balance transaction.
 */
export type ShopifyPaymentsBalanceTransactionAssociatedPayout = {
/**
 * The ID of the payout associated with the balance transaction.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The status of the payout associated with the balance transaction.
 */
status: { baseType: BaseTypes.ShopifyPaymentsBalanceTransactionPayoutStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ShopifyPaymentsBalanceTransactionAssociatedPayout", returnType: "ShopifyPaymentsBalanceTransactionAssociatedPayout", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple ShopifyPaymentsBalanceTransactions.
 */
export type ShopifyPaymentsBalanceTransactionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ShopifyPaymentsBalanceTransactionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ShopifyPaymentsBalanceTransactionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ShopifyPaymentsBalanceTransaction, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsBalanceTransactionConnection", returnType: "ShopifyPaymentsBalanceTransactionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ShopifyPaymentsBalanceTransaction and a cursor during pagination.
 */
export type ShopifyPaymentsBalanceTransactionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ShopifyPaymentsBalanceTransactionEdge.
 */
node: { baseType: ShopifyPaymentsBalanceTransaction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsBalanceTransactionEdge", returnType: "ShopifyPaymentsBalanceTransactionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A bank account that can receive payouts.
 */
export type ShopifyPaymentsBankAccount = {
/**
 * The account number of the bank account.
 */
accountNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The last digits of the account number (the rest is redacted).
 */
accountNumberLastDigits: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the bank.
 */
bankName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The country of the bank.
 */
country: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date that the bank account was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The currency of the bank account.
 */
currency: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * All current and previous payouts made between the account and the bank account.
 */
payouts: { baseType: ShopifyPaymentsPayoutConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; savedSearchId?: BaseTypes.ID | null; sortKey?: BaseTypes.PayoutSortKeys | null; transactionType?: BaseTypes.ShopifyPaymentsPayoutTransactionType | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The routing number of the bank account.
 */
routingNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the bank account.
 */
status: { baseType: BaseTypes.ShopifyPaymentsBankAccountStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsBankAccount", returnType: "ShopifyPaymentsBankAccount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts.
 */
export type ShopifyPaymentsBankAccountConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ShopifyPaymentsBankAccountEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ShopifyPaymentsBankAccountEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ShopifyPaymentsBankAccount, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsBankAccountConnection", returnType: "ShopifyPaymentsBankAccountConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.
 */
export type ShopifyPaymentsBankAccountEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ShopifyPaymentsBankAccountEdge.
 */
node: { baseType: ShopifyPaymentsBankAccount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsBankAccountEdge", returnType: "ShopifyPaymentsBankAccountEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The charge descriptors for a payments account.
 */
export type ShopifyPaymentsChargeStatementDescriptor = {
/**
 * The default charge statement descriptor.
 */
default: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The prefix of the statement descriptor.
 */
prefix: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The charge descriptors for a payments account.
 */
export type ShopifyPaymentsDefaultChargeStatementDescriptor = {
/**
 * The default charge statement descriptor.
 */
default: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The prefix of the statement descriptor.
 */
prefix: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsDefaultChargeStatementDescriptor", returnType: "ShopifyPaymentsDefaultChargeStatementDescriptor", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & ShopifyPaymentsChargeStatementDescriptor

/**
 * A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.
 */
export type ShopifyPaymentsDispute = {
/**
 * The total amount disputed by the cardholder.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The deadline for evidence submission.
 */
evidenceDueBy: { baseType: BaseTypes.Date, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date when evidence was sent. Returns null if evidence hasn't yet been sent.
 */
evidenceSentOn: { baseType: BaseTypes.Date, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date when this dispute was resolved. Returns null if the dispute isn't yet resolved.
 */
finalizedOn: { baseType: BaseTypes.Date, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date when this dispute was initiated.
 */
initiatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order that contains the charge that's under dispute.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The reason of the dispute.
 */
reasonDetails: { baseType: ShopifyPaymentsDisputeReasonDetails, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The current state of the dispute.
 */
status: { baseType: BaseTypes.DisputeStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Indicates if this dispute is still in the inquiry phase or has turned into a chargeback.
 */
type: { baseType: BaseTypes.DisputeType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsDispute", returnType: "ShopifyPaymentsDispute", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & LegacyInteroperability & Node

/**
 * An auto-generated type for paginating through multiple ShopifyPaymentsDisputes.
 */
export type ShopifyPaymentsDisputeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ShopifyPaymentsDisputeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ShopifyPaymentsDisputeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ShopifyPaymentsDispute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsDisputeConnection", returnType: "ShopifyPaymentsDisputeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.
 */
export type ShopifyPaymentsDisputeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ShopifyPaymentsDisputeEdge.
 */
node: { baseType: ShopifyPaymentsDispute, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsDisputeEdge", returnType: "ShopifyPaymentsDisputeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The evidence associated with the dispute.
 */
export type ShopifyPaymentsDisputeEvidence = {
/**
 * The activity logs associated with the dispute evidence.
 */
accessActivityLog: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The billing address that's provided by the customer.
 */
billingAddress: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The cancellation policy disclosure associated with the dispute evidence.
 */
cancellationPolicyDisclosure: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The cancellation policy file associated with the dispute evidence.
 */
cancellationPolicyFile: { baseType: ShopifyPaymentsDisputeFileUpload, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The cancellation rebuttal associated with the dispute evidence.
 */
cancellationRebuttal: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer communication file associated with the dispute evidence.
 */
customerCommunicationFile: { baseType: ShopifyPaymentsDisputeFileUpload, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer's email address.
 */
customerEmailAddress: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer's first name.
 */
customerFirstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer's last name.
 */
customerLastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer purchase ip for this dispute evidence.
 */
customerPurchaseIp: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The dispute associated with the evidence.
 */
dispute: { baseType: ShopifyPaymentsDispute, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The file uploads associated with the dispute evidence.
 */
disputeFileUploads: { baseType: ShopifyPaymentsDisputeFileUpload, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The fulfillments associated with the dispute evidence.
 */
fulfillments: { baseType: ShopifyPaymentsDisputeFulfillment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product description for this dispute evidence.
 */
productDescription: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The refund policy disclosure associated with the dispute evidence.
 */
refundPolicyDisclosure: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The refund policy file associated with the dispute evidence.
 */
refundPolicyFile: { baseType: ShopifyPaymentsDisputeFileUpload, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The refund refusal explanation associated with dispute evidence.
 */
refundRefusalExplanation: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The service documentation file associated with the dispute evidence.
 */
serviceDocumentationFile: { baseType: ShopifyPaymentsDisputeFileUpload, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The mailing address for shipping that's provided by the customer.
 */
shippingAddress: { baseType: MailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shipping documentation file associated with the dispute evidence.
 */
shippingDocumentationFile: { baseType: ShopifyPaymentsDisputeFileUpload, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the dispute evidence is submitted.
 */
submitted: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The uncategorized file associated with the dispute evidence.
 */
uncategorizedFile: { baseType: ShopifyPaymentsDisputeFileUpload, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The uncategorized text for the dispute evidence.
 */
uncategorizedText: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ShopifyPaymentsDisputeEvidence", returnType: "ShopifyPaymentsDisputeEvidence", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The file upload associated with the dispute evidence.
 */
export type ShopifyPaymentsDisputeFileUpload = {
/**
 * The type of the file for the dispute evidence.
 */
disputeEvidenceType: { baseType: BaseTypes.ShopifyPaymentsDisputeEvidenceFileType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The file size.
 */
fileSize: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The file type.
 */
fileType: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The original file name.
 */
originalFileName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL for accessing the file.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsDisputeFileUpload", returnType: "ShopifyPaymentsDisputeFileUpload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The fulfillment associated with dispute evidence.
 */
export type ShopifyPaymentsDisputeFulfillment = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The shipping carrier for this fulfillment.
 */
shippingCarrier: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shipping date for this fulfillment.
 */
shippingDate: { baseType: BaseTypes.Date, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The shipping tracking number for this fulfillment.
 */
shippingTrackingNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ShopifyPaymentsDisputeFulfillment", returnType: "ShopifyPaymentsDisputeFulfillment", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Details regarding a dispute reason.
 */
export type ShopifyPaymentsDisputeReasonDetails = {
/**
 * The raw code provided by the payment network.
 */
networkReasonCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The reason for the dispute provided by the cardholder's banks.
 */
reason: { baseType: BaseTypes.ShopifyPaymentsDisputeReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsDisputeReasonDetails", returnType: "ShopifyPaymentsDisputeReasonDetails", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Presents all Shopify Payments information related to an extended authorization.
 */
export type ShopifyPaymentsExtendedAuthorization = {
/**
 * The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.
 */
extendedAuthorizationExpiresAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The time after which capture will incur an additional fee.
 */
standardAuthorizationExpiresAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsExtendedAuthorization", returnType: "ShopifyPaymentsExtendedAuthorization", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The fraud settings of a payments account.
 */
export type ShopifyPaymentsFraudSettings = {
/**
 * Decline a charge if there's an AVS failure.
 */
declineChargeOnAvsFailure: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Decline a charge if there's an CVC failure.
 */
declineChargeOnCvcFailure: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsFraudSettings", returnType: "ShopifyPaymentsFraudSettings", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The charge descriptors for a Japanese payments account.
 */
export type ShopifyPaymentsJpChargeStatementDescriptor = {
/**
 * The default charge statement descriptor.
 */
default: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The charge statement descriptor in kana.
 */
kana: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The charge statement descriptor in kanji.
 */
kanji: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The prefix of the statement descriptor.
 */
prefix: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsJpChargeStatementDescriptor", returnType: "ShopifyPaymentsJpChargeStatementDescriptor", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & ShopifyPaymentsChargeStatementDescriptor

/**
 * The notification settings for the account.
 */
export type ShopifyPaymentsNotificationSettings = {
/**
 * Receive email notifications when new payouts are sent or payouts fail.
 */
payouts: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsNotificationSettings", returnType: "ShopifyPaymentsNotificationSettings", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Payouts represent the movement of money between a merchant's Shopify
 * Payments balance and their bank account.
 */
export type ShopifyPaymentsPayout = {
/**
 * The bank account for the payout.
 */
bankAccount: { baseType: ShopifyPaymentsBankAccount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The total amount and currency of the payout.
 */
gross: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The exact time when the payout was issued. The payout only contains
 * balance transactions that were available at this time.
 */
issuedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount and currency of the payout.
 */
net: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The transfer status of the payout.
 */
status: { baseType: BaseTypes.ShopifyPaymentsPayoutStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The summary of the payout.
 */
summary: { baseType: ShopifyPaymentsPayoutSummary, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The direction of the payout.
 */
transactionType: { baseType: BaseTypes.ShopifyPaymentsPayoutTransactionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsPayout", returnType: "ShopifyPaymentsPayout", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & LegacyInteroperability & Node

/**
 * Return type for `shopifyPaymentsPayoutAlternateCurrencyCreate` mutation.
 */
export type ShopifyPaymentsPayoutAlternateCurrencyCreatePayload = {
/**
 * The resulting alternate currency payout created.
 */
payout: { baseType: ShopifyPaymentsToolingProviderPayout, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the alternate currency payout was created successfully.
 */
success: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ShopifyPaymentsPayoutAlternateCurrencyCreateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ShopifyPaymentsPayoutAlternateCurrencyCreatePayload", returnType: "ShopifyPaymentsPayoutAlternateCurrencyCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `ShopifyPaymentsPayoutAlternateCurrencyCreate`.
 */
export type ShopifyPaymentsPayoutAlternateCurrencyCreateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ShopifyPaymentsPayoutAlternateCurrencyCreateUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsPayoutAlternateCurrencyCreateUserError", returnType: "ShopifyPaymentsPayoutAlternateCurrencyCreateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An auto-generated type for paginating through multiple ShopifyPaymentsPayouts.
 */
export type ShopifyPaymentsPayoutConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ShopifyPaymentsPayoutEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ShopifyPaymentsPayoutEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: ShopifyPaymentsPayout, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsPayoutConnection", returnType: "ShopifyPaymentsPayoutConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.
 */
export type ShopifyPaymentsPayoutEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ShopifyPaymentsPayoutEdge.
 */
node: { baseType: ShopifyPaymentsPayout, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsPayoutEdge", returnType: "ShopifyPaymentsPayoutEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The payment schedule for a payments account.
 */
export type ShopifyPaymentsPayoutSchedule = {
/**
 * The interval at which payouts are sent to the connected bank account.
 */
interval: { baseType: BaseTypes.ShopifyPaymentsPayoutInterval, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The day of the month funds will be paid out.
 *
 * The value can be any day of the month from the 1st to the 31st.
 * If the payment interval is set to monthly, this value will be used.
 * Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
 */
monthlyAnchor: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The day of the week funds will be paid out.
 *
 * The value can be any weekday from Monday to Friday.
 * If the payment interval is set to weekly, this value will be used.
 */
weeklyAnchor: { baseType: BaseTypes.DayOfTheWeek, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ShopifyPaymentsPayoutSchedule", returnType: "ShopifyPaymentsPayoutSchedule", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Breakdown of the total fees and gross of each of the different types of transactions associated
 * with the payout.
 */
export type ShopifyPaymentsPayoutSummary = {
/**
 * Total fees for all adjustments including disputes.
 */
adjustmentsFee: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total gross amount for all adjustments including disputes.
 */
adjustmentsGross: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total fees for all charges.
 */
chargesFee: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total gross amount for all charges.
 */
chargesGross: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total fees for all refunds.
 */
refundsFee: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total gross amount for all refunds.
 */
refundsFeeGross: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total fees for all reserved funds.
 */
reservedFundsFee: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total gross amount for all reserved funds.
 */
reservedFundsGross: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total fees for all retried payouts.
 */
retriedPayoutsFee: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total gross amount for all retried payouts.
 */
retriedPayoutsGross: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsPayoutSummary", returnType: "ShopifyPaymentsPayoutSummary", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Presents all Shopify Payments specific information related to an order refund.
 */
export type ShopifyPaymentsRefundSet = {
/**
 * The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.
 */
acquirerReferenceNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ShopifyPaymentsRefundSet", returnType: "ShopifyPaymentsRefundSet", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Relevant reference information for an alternate currency payout.
 */
export type ShopifyPaymentsToolingProviderPayout = {
/**
 * The balance amount the alternate currency payout was created for.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A timestamp for the arrival of the alternate currency payout.
 */
arrivalDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A timestamp for the creation of the alternate currency payout.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The currency alternate currency payout was created in.
 */
currency: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The remote ID for the alternate currency payout.
 */
remoteId: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsToolingProviderPayout", returnType: "ShopifyPaymentsToolingProviderPayout", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Presents all Shopify Payments specific information related to an order transaction.
 */
export type ShopifyPaymentsTransactionSet = {
/**
 * Contains all fields related to an extended authorization.
 */
extendedAuthorizationSet: { baseType: ShopifyPaymentsExtendedAuthorization, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Contains all fields related to a refund.
 */
refundSet: { baseType: ShopifyPaymentsRefundSet, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ShopifyPaymentsTransactionSet", returnType: "ShopifyPaymentsTransactionSet", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Each subject (individual) of an account has a verification object giving
 * information about the verification state.
 */
export type ShopifyPaymentsVerification = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the verification.
 */
status: { baseType: BaseTypes.ShopifyPaymentsVerificationStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subject/individual who has to be verified.
 */
subject: { baseType: ShopifyPaymentsVerificationSubject, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsVerification", returnType: "ShopifyPaymentsVerification", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A document which can be used to verify an individual.
 */
export type ShopifyPaymentsVerificationDocument = {
/**
 * True if the back side of the document is required.
 */
backRequired: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * True if the front side of the document is required.
 */
frontRequired: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The type of the document which can be used for verification.
 */
type: { baseType: BaseTypes.ShopifyPaymentsVerificationDocumentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsVerificationDocument", returnType: "ShopifyPaymentsVerificationDocument", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The verification subject represents an individual that has to be verified.
 */
export type ShopifyPaymentsVerificationSubject = {
/**
 * The family name of the individual to verify.
 */
familyName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The given name of the individual to verify.
 */
givenName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyPaymentsVerificationSubject", returnType: "ShopifyPaymentsVerificationSubject", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The eligibility details of an order's protection against fraudulent chargebacks by Shopify Protect.
 */
export type ShopifyProtectOrderEligibility = {
/**
 * The status of whether an order is eligible for protection against fraudulent chargebacks.
 */
status: { baseType: BaseTypes.ShopifyProtectEligibilityStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyProtectOrderEligibility", returnType: "ShopifyProtectOrderEligibility", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A summary of Shopify Protect details for an order.
 */
export type ShopifyProtectOrderSummary = {
/**
 * The eligibility details of an order's protection against fraudulent chargebacks.
 */
eligibility: { baseType: ShopifyProtectOrderEligibility, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the order's protection against fraudulent chargebacks.
 */
status: { baseType: BaseTypes.ShopifyProtectStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ShopifyProtectOrderSummary", returnType: "ShopifyProtectOrderSummary", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store.
 */
export type StaffMember = {
/**
 * Whether the staff member is active.
 */
active: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The image used as the staff member's avatar in the Shopify admin.
 */
avatar: { baseType: Image, arguments: { fallback?: BaseTypes.StaffMemberDefaultImage | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member's email address.
 */
email: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the staff member's account exists.
 */
exists: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member's first name.
 */
firstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member's initials, if available.
 */
initials: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * Whether the staff member is the shop owner.
 */
isShopOwner: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member's last name.
 */
lastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The staff member's preferred locale. Locale values use the format `language` or `language-COUNTRY`, where `language` is a two-letter language code, and `COUNTRY` is a two-letter country code. For example: `en` or `en-US`
 */
locale: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member's full name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The staff member's phone number.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The data used to customize the Shopify admin experience for the staff member.
 */
privateData: { baseType: StaffMemberPrivateData, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StaffMember", returnType: "StaffMember", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple StaffMembers.
 */
export type StaffMemberConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: StaffMemberEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in StaffMemberEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: StaffMember, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StaffMemberConnection", returnType: "StaffMemberConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one StaffMember and a cursor during pagination.
 */
export type StaffMemberEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of StaffMemberEdge.
 */
node: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StaffMemberEdge", returnType: "StaffMemberEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the data used to customize the Shopify admin experience for a logged-in staff member.
 */
export type StaffMemberPrivateData = {
/**
 * The URL to the staff member's account settings page.
 */
accountSettingsUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the staff member was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Access permissions for the staff member.
 */
permissions: { baseType: BaseTypes.StaffMemberPermission, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "StaffMemberPrivateData", returnType: "StaffMemberPrivateData", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Information about a staged upload target, which should be used to send a request to upload
 * the file.
 *
 * For more information on the upload process, refer to
 * [Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
 */
export type StagedMediaUploadTarget = {
/**
 * Parameters needed to authenticate a request to upload the file.
 */
parameters: { baseType: StagedUploadParameter, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The URL to be passed as `originalSource` in
 * [CreateMediaInput](https://shopify.dev/api/admin-graphql/latest/input-objects/CreateMediaInput)
 * and [FileCreateInput](https://shopify.dev/api/admin-graphql/2022-04/input-objects/FileCreateInput)
 * for the [productCreateMedia](https://shopify.dev/api/admin-graphql/2022-04/mutations/productCreateMedia)
 * and [fileCreate](https://shopify.dev/api/admin-graphql/2022-04/mutations/fileCreate)
 * mutations.
 */
resourceUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL to use when sending an request to upload the file. Should be used in conjunction with
 * the parameters field.
 */
url: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "StagedMediaUploadTarget", returnType: "StagedMediaUploadTarget", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The parameters required to authenticate a file upload request using a
 * [StagedMediaUploadTarget's url field](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-stagedmediauploadtarget-url).
 *
 * For more information on the upload process, refer to
 * [Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
 */
export type StagedUploadParameter = {
/**
 * The parameter's name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The parameter's value.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StagedUploadParameter", returnType: "StagedUploadParameter", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Information about the staged target.
 *
 * Deprecated in favor of
 * [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget),
 * which is returned by the
 * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
 */
export type StagedUploadTarget = {
/**
 * The parameters of an image to be uploaded.
 */
parameters: { baseType: ImageUploadParameter, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The image URL.
 */
url: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StagedUploadTarget", returnType: "StagedUploadTarget", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `stagedUploadTargetGenerate` mutation.
 */
export type StagedUploadTargetGeneratePayload = {
/**
 * The signed parameters that can be used to upload the asset.
 */
parameters: { baseType: MutationsStagedUploadTargetGenerateUploadParameter, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The signed URL where the asset can be uploaded.
 */
url: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "StagedUploadTargetGeneratePayload", returnType: "StagedUploadTargetGeneratePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `stagedUploadTargetsGenerate` mutation.
 */
export type StagedUploadTargetsGeneratePayload = {
/**
 * The staged upload targets that were generated.
 */
urls: { baseType: StagedUploadTarget, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "StagedUploadTargetsGeneratePayload", returnType: "StagedUploadTargetsGeneratePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `stagedUploadsCreate` mutation.
 */
export type StagedUploadsCreatePayload = {
/**
 * The staged upload targets that were generated.
 */
stagedTargets: { baseType: StagedMediaUploadTarget, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "StagedUploadsCreatePayload", returnType: "StagedUploadsCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `standardMetafieldDefinitionEnable` mutation.
 */
export type StandardMetafieldDefinitionEnablePayload = {
/**
 * The metafield definition that was created.
 */
createdDefinition: { baseType: MetafieldDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: StandardMetafieldDefinitionEnableUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "StandardMetafieldDefinitionEnablePayload", returnType: "StandardMetafieldDefinitionEnablePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `StandardMetafieldDefinitionEnable`.
 */
export type StandardMetafieldDefinitionEnableUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.StandardMetafieldDefinitionEnableUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StandardMetafieldDefinitionEnableUserError", returnType: "StandardMetafieldDefinitionEnableUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Standard metafield definition templates provide preset configurations to create metafield definitions.
 * Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.
 *
 * Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
 */
export type StandardMetafieldDefinitionTemplate = {
/**
 * The description of the standard metafield definition.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The key owned by the definition after the definition has been activated.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The human-readable name for the standard metafield definition.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The namespace owned by the definition after the definition has been activated.
 */
namespace: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of resource types that the standard metafield definition can be applied to.
 */
ownerTypes: { baseType: BaseTypes.MetafieldOwnerType, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores.
 */
type: { baseType: MetafieldDefinitionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The configured validations for the standard metafield definition.
 */
validations: { baseType: MetafieldDefinitionValidation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Whether metafields for the definition are by default visible using the Storefront API.
 */
visibleToStorefrontApi: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StandardMetafieldDefinitionTemplate", returnType: "StandardMetafieldDefinitionTemplate", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple StandardMetafieldDefinitionTemplates.
 */
export type StandardMetafieldDefinitionTemplateConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: StandardMetafieldDefinitionTemplateEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in StandardMetafieldDefinitionTemplateEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: StandardMetafieldDefinitionTemplate, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StandardMetafieldDefinitionTemplateConnection", returnType: "StandardMetafieldDefinitionTemplateConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one StandardMetafieldDefinitionTemplate and a cursor during pagination.
 */
export type StandardMetafieldDefinitionTemplateEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of StandardMetafieldDefinitionTemplateEdge.
 */
node: { baseType: StandardMetafieldDefinitionTemplate, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StandardMetafieldDefinitionTemplateEdge", returnType: "StandardMetafieldDefinitionTemplateEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `standardMetaobjectDefinitionEnable` mutation.
 */
export type StandardMetaobjectDefinitionEnablePayload = {
/**
 * The metaobject definition that was enabled using the standard template.
 */
metaobjectDefinition: { baseType: MetaobjectDefinition, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: MetaobjectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "StandardMetaobjectDefinitionEnablePayload", returnType: "StandardMetaobjectDefinitionEnablePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the details of a specific type of product within the [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
 */
export type StandardizedProductType = {
/**
 * The product taxonomy node associated with the standardized product type.
 */
productTaxonomyNode: { baseType: ProductTaxonomyNode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "StandardizedProductType", returnType: "StandardizedProductType", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A store credit account contains a monetary balance that can be redeemed at checkout for purchases in the shop.
 * The account is held in the specified currency and has an owner that cannot be transferred.
 *
 * The account balance is redeemable at checkout only when the owner is authenticated via [new customer accounts authentication](https://shopify.dev/docs/api/customer).
 */
export type StoreCreditAccount = {
/**
 * The current balance of the store credit account.
 */
balance: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The owner of the store credit account.
 */
owner: { members: { Customer: Customer }, fields: { storeCreditAccounts: { baseType: StoreCreditAccountConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The transaction history of the store credit account.
 */
transactions: { baseType: StoreCreditAccountTransactionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.TransactionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StoreCreditAccount", returnType: "StoreCreditAccount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple StoreCreditAccounts.
 */
export type StoreCreditAccountConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: StoreCreditAccountEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in StoreCreditAccountEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: StoreCreditAccount, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StoreCreditAccountConnection", returnType: "StoreCreditAccountConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `storeCreditAccountCredit` mutation.
 */
export type StoreCreditAccountCreditPayload = {
/**
 * The store credit account transaction that was created.
 */
storeCreditAccountTransaction: { baseType: StoreCreditAccountCreditTransaction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: StoreCreditAccountCreditUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "StoreCreditAccountCreditPayload", returnType: "StoreCreditAccountCreditPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A credit transaction which increases the store credit account balance.
 */
export type StoreCreditAccountCreditTransaction = {
/**
 * The store credit account that the transaction belongs to.
 */
account: { baseType: StoreCreditAccount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of the transaction.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The balance of the account after the transaction.
 */
balanceAfterTransaction: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the transaction was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The time at which the transaction expires.
 * Debit transactions will always spend the soonest expiring credit first.
 */
expiresAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The remaining amount of the credit.
 * The remaining amount will decrease when a debit spends this credit. It may also increase if that debit is subsequently reverted.
 * In the event that the credit expires, the remaining amount will represent the amount that remained as the expiry ocurred.
 */
remainingAmount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StoreCreditAccountCreditTransaction", returnType: "StoreCreditAccountCreditTransaction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node & StoreCreditAccountTransaction

/**
 * An error that occurs during the execution of `StoreCreditAccountCredit`.
 */
export type StoreCreditAccountCreditUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.StoreCreditAccountCreditUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StoreCreditAccountCreditUserError", returnType: "StoreCreditAccountCreditUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `storeCreditAccountDebit` mutation.
 */
export type StoreCreditAccountDebitPayload = {
/**
 * The store credit account transaction that was created.
 */
storeCreditAccountTransaction: { baseType: StoreCreditAccountDebitTransaction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: StoreCreditAccountDebitUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "StoreCreditAccountDebitPayload", returnType: "StoreCreditAccountDebitPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A debit revert transaction which increases the store credit account balance.
 * Debit revert transactions are created automatically when a [store credit account debit transaction](https://shopify.dev/api/admin-graphql/latest/objects/StoreCreditAccountDebitTransaction) is reverted.
 *
 * Store credit account debit transactions are reverted when an order is cancelled, refunded or in the event of a payment failure at checkout.
 * The amount added to the balance is equal to the amount reverted on the original credit.
 */
export type StoreCreditAccountDebitRevertTransaction = {
/**
 * The store credit account that the transaction belongs to.
 */
account: { baseType: StoreCreditAccount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of the transaction.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The balance of the account after the transaction.
 */
balanceAfterTransaction: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the transaction was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reverted debit transaction.
 */
debitTransaction: { baseType: StoreCreditAccountDebitTransaction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StoreCreditAccountDebitRevertTransaction", returnType: "StoreCreditAccountDebitRevertTransaction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node & StoreCreditAccountTransaction

/**
 * A debit transaction which decreases the store credit account balance.
 */
export type StoreCreditAccountDebitTransaction = {
/**
 * The store credit account that the transaction belongs to.
 */
account: { baseType: StoreCreditAccount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of the transaction.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The balance of the account after the transaction.
 */
balanceAfterTransaction: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the transaction was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StoreCreditAccountDebitTransaction", returnType: "StoreCreditAccountDebitTransaction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node & StoreCreditAccountTransaction

/**
 * An error that occurs during the execution of `StoreCreditAccountDebit`.
 */
export type StoreCreditAccountDebitUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.StoreCreditAccountDebitUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StoreCreditAccountDebitUserError", returnType: "StoreCreditAccountDebitUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An auto-generated type which holds one StoreCreditAccount and a cursor during pagination.
 */
export type StoreCreditAccountEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of StoreCreditAccountEdge.
 */
node: { baseType: StoreCreditAccount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StoreCreditAccountEdge", returnType: "StoreCreditAccountEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An expiration transaction which decreases the store credit account balance.
 * Expiration transactions are created automatically when a [store credit account credit transaction](https://shopify.dev/api/admin-graphql/latest/objects/StoreCreditAccountCreditTransaction) expires.
 *
 * The amount subtracted from the balance is equal to the remaining amount of the credit transaction.
 */
export type StoreCreditAccountExpirationTransaction = {
/**
 * The store credit account that the transaction belongs to.
 */
account: { baseType: StoreCreditAccount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of the transaction.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The balance of the account after the transaction.
 */
balanceAfterTransaction: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the transaction was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The credit transaction which expired.
 */
creditTransaction: { baseType: StoreCreditAccountCreditTransaction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StoreCreditAccountExpirationTransaction", returnType: "StoreCreditAccountExpirationTransaction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & StoreCreditAccountTransaction

/**
 * Interface for a store credit account transaction.
 */
export type StoreCreditAccountTransaction = {
/**
 * The store credit account that the transaction belongs to.
 */
account: { baseType: StoreCreditAccount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of the transaction.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The balance of the account after the transaction.
 */
balanceAfterTransaction: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the transaction was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple StoreCreditAccountTransactions.
 */
export type StoreCreditAccountTransactionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: StoreCreditAccountTransactionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in StoreCreditAccountTransactionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { StoreCreditAccountCreditTransaction: StoreCreditAccountCreditTransaction; StoreCreditAccountDebitRevertTransaction: StoreCreditAccountDebitRevertTransaction; StoreCreditAccountDebitTransaction: StoreCreditAccountDebitTransaction; StoreCreditAccountExpirationTransaction: StoreCreditAccountExpirationTransaction }, fields: { account: { baseType: StoreCreditAccount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; balanceAfterTransaction: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StoreCreditAccountTransactionConnection", returnType: "StoreCreditAccountTransactionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one StoreCreditAccountTransaction and a cursor during pagination.
 */
export type StoreCreditAccountTransactionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of StoreCreditAccountTransactionEdge.
 */
node: { members: { StoreCreditAccountCreditTransaction: StoreCreditAccountCreditTransaction; StoreCreditAccountDebitRevertTransaction: StoreCreditAccountDebitRevertTransaction; StoreCreditAccountDebitTransaction: StoreCreditAccountDebitTransaction; StoreCreditAccountExpirationTransaction: StoreCreditAccountExpirationTransaction }, fields: { account: { baseType: StoreCreditAccount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; balanceAfterTransaction: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }; createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StoreCreditAccountTransactionEdge", returnType: "StoreCreditAccountTransactionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A token that's used to delegate unauthenticated access scopes to clients that need to access
 * the unauthenticated [Storefront API](https://shopify.dev/docs/api/storefront).
 *
 * An app can have a maximum of 100 active storefront access
 * tokens for each shop.
 *
 * [Get started with the Storefront API](https://shopify.dev/docs/storefronts/headless/building-with-the-storefront-api/getting-started).
 */
export type StorefrontAccessToken = {
/**
 * List of permissions associated with the token.
 */
accessScopes: { baseType: AccessScope, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The issued public access token.
 */
accessToken: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the public access token was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * An arbitrary title for each token determined by the developer, used for reference         purposes.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the storefront access token was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StorefrontAccessToken", returnType: "StorefrontAccessToken", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple StorefrontAccessTokens.
 */
export type StorefrontAccessTokenConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: StorefrontAccessTokenEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in StorefrontAccessTokenEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: StorefrontAccessToken, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StorefrontAccessTokenConnection", returnType: "StorefrontAccessTokenConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `storefrontAccessTokenCreate` mutation.
 */
export type StorefrontAccessTokenCreatePayload = {
/**
 * The user's shop.
 */
shop: { baseType: Shop, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The storefront access token.
 */
storefrontAccessToken: { baseType: StorefrontAccessToken, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "StorefrontAccessTokenCreatePayload", returnType: "StorefrontAccessTokenCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `storefrontAccessTokenDelete` mutation.
 */
export type StorefrontAccessTokenDeletePayload = {
/**
 * The ID of the deleted storefront access token.
 */
deletedStorefrontAccessTokenId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "StorefrontAccessTokenDeletePayload", returnType: "StorefrontAccessTokenDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.
 */
export type StorefrontAccessTokenEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of StorefrontAccessTokenEdge.
 */
node: { baseType: StorefrontAccessToken, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StorefrontAccessTokenEdge", returnType: "StorefrontAccessTokenEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple Strings.
 */
export type StringConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: StringEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StringConnection", returnType: "StringConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one String and a cursor during pagination.
 */
export type StringEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of StringEdge.
 */
node: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "StringEdge", returnType: "StringEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an applied code discount.
 */
export type SubscriptionAppliedCodeDiscount = {
/**
 * The unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The redeem code of the discount that applies on the subscription.
 */
redeemCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason that the discount on the subscription draft is rejected.
 */
rejectionReason: { baseType: BaseTypes.SubscriptionDiscountRejectionReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SubscriptionAppliedCodeDiscount", returnType: "SubscriptionAppliedCodeDiscount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A record of an execution of the subscription billing process. Billing attempts use
 * idempotency keys to avoid duplicate order creation. A successful billing attempt
 * will create an order.
 */
export type SubscriptionBillingAttempt = {
/**
 * The date and time when the billing attempt was completed.
 */
completedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time when the billing attempt was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A code corresponding to a payment error during processing.
 */
errorCode: { baseType: BaseTypes.SubscriptionBillingAttemptErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A message describing a payment error during processing.
 */
errorMessage: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A unique key generated by the client to avoid duplicate payments.
 */
idempotencyKey: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
 */
nextActionUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The result of this billing attempt if completed successfully.
 */
order: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time used to calculate fulfillment intervals for a billing attempt that
 * successfully completed after the current anchor date. To prevent fulfillment from being
 * pushed to the next anchor date, this field can override the billing attempt date.
 */
originTime: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the billing attempt is still processing.
 */
ready: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subscription contract.
 */
subscriptionContract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionBillingAttempt", returnType: "SubscriptionBillingAttempt", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple SubscriptionBillingAttempts.
 */
export type SubscriptionBillingAttemptConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SubscriptionBillingAttemptEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SubscriptionBillingAttemptEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: SubscriptionBillingAttempt, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionBillingAttemptConnection", returnType: "SubscriptionBillingAttemptConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionBillingAttemptCreate` mutation.
 */
export type SubscriptionBillingAttemptCreatePayload = {
/**
 * The subscription billing attempt.
 */
subscriptionBillingAttempt: { baseType: SubscriptionBillingAttempt, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BillingAttemptUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingAttemptCreatePayload", returnType: "SubscriptionBillingAttemptCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.
 */
export type SubscriptionBillingAttemptEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SubscriptionBillingAttemptEdge.
 */
node: { baseType: SubscriptionBillingAttempt, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionBillingAttemptEdge", returnType: "SubscriptionBillingAttemptEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A subscription billing cycle.
 */
export type SubscriptionBillingCycle = {
/**
 * The date on which the billing attempt is expected to be made.
 */
billingAttemptExpectedDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of billing attempts associated with the billing cycle.
 */
billingAttempts: { baseType: SubscriptionBillingAttemptConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The end date of the billing cycle.
 */
cycleEndAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The index of the billing cycle.
 */
cycleIndex: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The start date of the billing cycle.
 */
cycleStartAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether this billing cycle was edited.
 */
edited: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The active edited contract for the billing cycle.
 */
editedContract: { baseType: SubscriptionBillingCycleEditedContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether this billing cycle was skipped.
 */
skipped: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The subscription contract that the billing cycle belongs to.
 */
sourceContract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The status of the billing cycle.
 */
status: { baseType: BaseTypes.SubscriptionBillingCycleBillingCycleStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycle", returnType: "SubscriptionBillingCycle", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionBillingCycleBulkCharge` mutation.
 */
export type SubscriptionBillingCycleBulkChargePayload = {
/**
 * The asynchronous job that performs the action on the targeted billing cycles.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionBillingCycleBulkUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleBulkChargePayload", returnType: "SubscriptionBillingCycleBulkChargePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionBillingCycleBulkSearch` mutation.
 */
export type SubscriptionBillingCycleBulkSearchPayload = {
/**
 * The asynchronous job that performs the action on the targeted billing cycles.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionBillingCycleBulkUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleBulkSearchPayload", returnType: "SubscriptionBillingCycleBulkSearchPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an error that happens during the execution of subscriptionBillingCycles mutations.
 */
export type SubscriptionBillingCycleBulkUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.SubscriptionBillingCycleBulkUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleBulkUserError", returnType: "SubscriptionBillingCycleBulkUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `subscriptionBillingCycleCharge` mutation.
 */
export type SubscriptionBillingCycleChargePayload = {
/**
 * The subscription billing attempt.
 */
subscriptionBillingAttempt: { baseType: SubscriptionBillingAttempt, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: BillingAttemptUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleChargePayload", returnType: "SubscriptionBillingCycleChargePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple SubscriptionBillingCycles.
 */
export type SubscriptionBillingCycleConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SubscriptionBillingCycleEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SubscriptionBillingCycleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: SubscriptionBillingCycle, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleConnection", returnType: "SubscriptionBillingCycleConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionBillingCycleContractDraftCommit` mutation.
 */
export type SubscriptionBillingCycleContractDraftCommitPayload = {
/**
 * The committed Subscription Billing Cycle Edited Contract object.
 */
contract: { baseType: SubscriptionBillingCycleEditedContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleContractDraftCommitPayload", returnType: "SubscriptionBillingCycleContractDraftCommitPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionBillingCycleContractDraftConcatenate` mutation.
 */
export type SubscriptionBillingCycleContractDraftConcatenatePayload = {
/**
 * The Subscription Draft object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleContractDraftConcatenatePayload", returnType: "SubscriptionBillingCycleContractDraftConcatenatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionBillingCycleContractEdit` mutation.
 */
export type SubscriptionBillingCycleContractEditPayload = {
/**
 * The draft subscription contract object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleContractEditPayload", returnType: "SubscriptionBillingCycleContractEditPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SubscriptionBillingCycle and a cursor during pagination.
 */
export type SubscriptionBillingCycleEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SubscriptionBillingCycleEdge.
 */
node: { baseType: SubscriptionBillingCycle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleEdge", returnType: "SubscriptionBillingCycleEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionBillingCycleEditDelete` mutation.
 */
export type SubscriptionBillingCycleEditDeletePayload = {
/**
 * The list of updated billing cycles.
 */
billingCycles: { baseType: SubscriptionBillingCycle, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionBillingCycleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleEditDeletePayload", returnType: "SubscriptionBillingCycleEditDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a subscription contract with billing cycles.
 */
export type SubscriptionBillingCycleEditedContract = {
/**
 * The subscription app that the subscription contract is registered to.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL of the subscription contract page on the subscription app.
 */
appAdminUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The billing cycles that the edited contract belongs to.
 */
billingCycles: { baseType: SubscriptionBillingCycleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.SubscriptionBillingCyclesSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the subscription contract was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The currency that's used for the subscription contract.
 */
currencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the custom attributes to be added to the generated orders.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The customer to whom the subscription contract belongs.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer payment method that's used for the subscription contract.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: { showRevoked?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The delivery method for each billing of the subscription contract.
 */
deliveryMethod: { members: { SubscriptionDeliveryMethodLocalDelivery: SubscriptionDeliveryMethodLocalDelivery; SubscriptionDeliveryMethodPickup: SubscriptionDeliveryMethodPickup; SubscriptionDeliveryMethodShipping: SubscriptionDeliveryMethodShipping }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The delivery price for each billing of the subscription contract.
 */
deliveryPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription discounts associated with the subscription contract.
 */
discounts: { baseType: SubscriptionManualDiscountConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of lines associated with the subscription contract.
 */
lineCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription lines associated with the subscription contract.
 */
lines: { baseType: SubscriptionLineConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of lines associated with the subscription contract.
 */
linesCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The note field that will be applied to the generated orders.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of the subscription contract's orders.
 */
orders: { baseType: OrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the subscription contract was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleEditedContract", returnType: "SubscriptionBillingCycleEditedContract", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & SubscriptionContractBase

/**
 * Return type for `subscriptionBillingCycleEditsDelete` mutation.
 */
export type SubscriptionBillingCycleEditsDeletePayload = {
/**
 * The list of updated billing cycles.
 */
billingCycles: { baseType: SubscriptionBillingCycle, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionBillingCycleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleEditsDeletePayload", returnType: "SubscriptionBillingCycleEditsDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionBillingCycleScheduleEdit` mutation.
 */
export type SubscriptionBillingCycleScheduleEditPayload = {
/**
 * The updated billing cycle.
 */
billingCycle: { baseType: SubscriptionBillingCycle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionBillingCycleUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleScheduleEditPayload", returnType: "SubscriptionBillingCycleScheduleEditPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionBillingCycleSkip` mutation.
 */
export type SubscriptionBillingCycleSkipPayload = {
/**
 * The updated billing cycle.
 */
billingCycle: { baseType: SubscriptionBillingCycle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionBillingCycleSkipUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleSkipPayload", returnType: "SubscriptionBillingCycleSkipPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `SubscriptionBillingCycleSkip`.
 */
export type SubscriptionBillingCycleSkipUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.SubscriptionBillingCycleSkipUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleSkipUserError", returnType: "SubscriptionBillingCycleSkipUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `subscriptionBillingCycleUnskip` mutation.
 */
export type SubscriptionBillingCycleUnskipPayload = {
/**
 * The updated billing cycle.
 */
billingCycle: { baseType: SubscriptionBillingCycle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionBillingCycleUnskipUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleUnskipPayload", returnType: "SubscriptionBillingCycleUnskipPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `SubscriptionBillingCycleUnskip`.
 */
export type SubscriptionBillingCycleUnskipUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.SubscriptionBillingCycleUnskipUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleUnskipUserError", returnType: "SubscriptionBillingCycleUnskipUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * The possible errors for a subscription billing cycle.
 */
export type SubscriptionBillingCycleUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.SubscriptionBillingCycleErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionBillingCycleUserError", returnType: "SubscriptionBillingCycleUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a Subscription Billing Policy.
 */
export type SubscriptionBillingPolicy = {
/**
 * Specific anchor dates upon which the billing interval calculations should be made.
 */
anchors: { baseType: SellingPlanAnchor, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).
 */
interval: { baseType: BaseTypes.SellingPlanInterval, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of billing intervals between invoices.
 */
intervalCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Maximum amount of cycles after which the subscription ends.
 */
maxCycles: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Minimum amount of cycles required in the subscription.
 */
minCycles: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SubscriptionBillingPolicy", returnType: "SubscriptionBillingPolicy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a Subscription Contract.
 */
export type SubscriptionContract = {
/**
 * The subscription app that the subscription contract is registered to.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL of the subscription contract page on the subscription app.
 */
appAdminUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of billing attempts associated with the subscription contract.
 */
billingAttempts: { baseType: SubscriptionBillingAttemptConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The billing policy associated with the subscription contract.
 */
billingPolicy: { baseType: SubscriptionBillingPolicy, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the subscription contract was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The currency that's used for the subscription contract.
 */
currencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the custom attributes to be added to the generated orders.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The customer to whom the subscription contract belongs.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer payment method that's used for the subscription contract.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: { showRevoked?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The delivery method for each billing of the subscription contract.
 */
deliveryMethod: { members: { SubscriptionDeliveryMethodLocalDelivery: SubscriptionDeliveryMethodLocalDelivery; SubscriptionDeliveryMethodPickup: SubscriptionDeliveryMethodPickup; SubscriptionDeliveryMethodShipping: SubscriptionDeliveryMethodShipping }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The delivery policy associated with the subscription contract.
 */
deliveryPolicy: { baseType: SubscriptionDeliveryPolicy, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The delivery price for each billing of the subscription contract.
 */
deliveryPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription discounts associated with the subscription contract.
 */
discounts: { baseType: SubscriptionManualDiscountConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The current status of the last payment.
 */
lastPaymentStatus: { baseType: BaseTypes.SubscriptionContractLastPaymentStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of lines associated with the subscription contract.
 */
lineCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription lines associated with the subscription contract.
 */
lines: { baseType: SubscriptionLineConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of lines associated with the subscription contract.
 */
linesCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The next billing date for the subscription contract. This field is managed by the apps.
 * Alternatively you can utilize our
 * [Billing Cycles APIs](https://shopify.dev/docs/apps/selling-strategies/subscriptions/billing-cycles),
 * which provide auto-computed billing dates and additional functionalities.
 */
nextBillingDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The note field that will be applied to the generated orders.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of the subscription contract's orders.
 */
orders: { baseType: OrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The order from which this contract originated.
 */
originOrder: { baseType: Order, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The revision id of the contract.
 */
revisionId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The current status of the subscription contract.
 */
status: { baseType: BaseTypes.SubscriptionContractSubscriptionStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the subscription contract was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionContract", returnType: "SubscriptionContract", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node & SubscriptionContractBase

/**
 * Return type for `subscriptionContractActivate` mutation.
 */
export type SubscriptionContractActivatePayload = {
/**
 * The new Subscription Contract object.
 */
contract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionContractStatusUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionContractActivatePayload", returnType: "SubscriptionContractActivatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionContractAtomicCreate` mutation.
 */
export type SubscriptionContractAtomicCreatePayload = {
/**
 * The new Subscription Contract object.
 */
contract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionContractAtomicCreatePayload", returnType: "SubscriptionContractAtomicCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents subscription contract common fields.
 */
export type SubscriptionContractBase = {
/**
 * The subscription app that the subscription contract is registered to.
 */
app: { baseType: App, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The URL of the subscription contract page on the subscription app.
 */
appAdminUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The currency that's used for the subscription contract.
 */
currencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the custom attributes to be added to the generated orders.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The customer to whom the subscription contract belongs.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer payment method that's used for the subscription contract.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: { showRevoked?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The delivery method for each billing of the subscription contract.
 */
deliveryMethod: { members: { SubscriptionDeliveryMethodLocalDelivery: SubscriptionDeliveryMethodLocalDelivery; SubscriptionDeliveryMethodPickup: SubscriptionDeliveryMethodPickup; SubscriptionDeliveryMethodShipping: SubscriptionDeliveryMethodShipping }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The delivery price for each billing of the subscription contract.
 */
deliveryPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription discounts associated with the subscription contract.
 */
discounts: { baseType: SubscriptionManualDiscountConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of lines associated with the subscription contract.
 */
lineCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription lines associated with the subscription contract.
 */
lines: { baseType: SubscriptionLineConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of lines associated with the subscription contract.
 */
linesCount: { baseType: Count, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The note field that will be applied to the generated orders.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A list of the subscription contract's orders.
 */
orders: { baseType: OrderConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the subscription contract was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionContractCancel` mutation.
 */
export type SubscriptionContractCancelPayload = {
/**
 * The new Subscription Contract object.
 */
contract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionContractStatusUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionContractCancelPayload", returnType: "SubscriptionContractCancelPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple SubscriptionContracts.
 */
export type SubscriptionContractConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SubscriptionContractEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SubscriptionContractEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: SubscriptionContract, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionContractConnection", returnType: "SubscriptionContractConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionContractCreate` mutation.
 */
export type SubscriptionContractCreatePayload = {
/**
 * The Subscription Contract object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionContractCreatePayload", returnType: "SubscriptionContractCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SubscriptionContract and a cursor during pagination.
 */
export type SubscriptionContractEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SubscriptionContractEdge.
 */
node: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionContractEdge", returnType: "SubscriptionContractEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionContractExpire` mutation.
 */
export type SubscriptionContractExpirePayload = {
/**
 * The new Subscription Contract object.
 */
contract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionContractStatusUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionContractExpirePayload", returnType: "SubscriptionContractExpirePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionContractFail` mutation.
 */
export type SubscriptionContractFailPayload = {
/**
 * The new Subscription Contract object.
 */
contract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionContractStatusUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionContractFailPayload", returnType: "SubscriptionContractFailPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionContractPause` mutation.
 */
export type SubscriptionContractPausePayload = {
/**
 * The new Subscription Contract object.
 */
contract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionContractStatusUpdateUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionContractPausePayload", returnType: "SubscriptionContractPausePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionContractProductChange` mutation.
 */
export type SubscriptionContractProductChangePayload = {
/**
 * The new Subscription Contract object.
 */
contract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The updated Subscription Line.
 */
lineUpdated: { baseType: SubscriptionLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionContractProductChangePayload", returnType: "SubscriptionContractProductChangePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionContractSetNextBillingDate` mutation.
 */
export type SubscriptionContractSetNextBillingDatePayload = {
/**
 * The updated Subscription Contract object.
 */
contract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionContractUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionContractSetNextBillingDatePayload", returnType: "SubscriptionContractSetNextBillingDatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a subscription contract status update error.
 */
export type SubscriptionContractStatusUpdateUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.SubscriptionContractStatusUpdateErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionContractStatusUpdateUserError", returnType: "SubscriptionContractStatusUpdateUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `subscriptionContractUpdate` mutation.
 */
export type SubscriptionContractUpdatePayload = {
/**
 * The Subscription Contract object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionContractUpdatePayload", returnType: "SubscriptionContractUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a Subscription Contract error.
 */
export type SubscriptionContractUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.SubscriptionContractErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionContractUserError", returnType: "SubscriptionContractUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a Subscription Line Pricing Cycle Adjustment.
 */
export type SubscriptionCyclePriceAdjustment = {
/**
 * Price adjustment type.
 */
adjustmentType: { baseType: BaseTypes.SellingPlanPricingPolicyAdjustmentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Price adjustment value.
 */
adjustmentValue: { members: { MoneyV2: MoneyV2; SellingPlanPricingPolicyPercentageValue: SellingPlanPricingPolicyPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of cycles required before this pricing policy applies.
 */
afterCycle: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The computed price after the adjustments applied.
 */
computedPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionCyclePriceAdjustment", returnType: "SubscriptionCyclePriceAdjustment", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Describes the delivery method to use to get the physical goods to the customer.
 */
export type SubscriptionDeliveryMethod = SubscriptionDeliveryMethodLocalDelivery | SubscriptionDeliveryMethodPickup | SubscriptionDeliveryMethodShipping

/**
 * A subscription delivery method for local delivery.
 * The other subscription delivery methods can be found in the `SubscriptionDeliveryMethod` union type.
 */
export type SubscriptionDeliveryMethodLocalDelivery = {
/**
 * The address to deliver to.
 */
address: { baseType: SubscriptionMailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The details of the local delivery method to use.
 */
localDeliveryOption: { baseType: SubscriptionDeliveryMethodLocalDeliveryOption, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionDeliveryMethodLocalDelivery", returnType: "SubscriptionDeliveryMethodLocalDelivery", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The selected delivery option on a subscription contract.
 */
export type SubscriptionDeliveryMethodLocalDeliveryOption = {
/**
 * A custom reference to the delivery method for use with automations.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The details displayed to the customer to describe the local delivery option.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The delivery instructions that the customer can provide to the merchant.
 */
instructions: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The phone number that the customer provided to the merchant.
 * Formatted using E.164 standard. For example, `+16135551111`.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The presentment title of the local delivery option.
 */
presentmentTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The title of the local delivery option.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SubscriptionDeliveryMethodLocalDeliveryOption", returnType: "SubscriptionDeliveryMethodLocalDeliveryOption", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A delivery method with a pickup option.
 */
export type SubscriptionDeliveryMethodPickup = {
/**
 * The details of the pickup delivery method to use.
 */
pickupOption: { baseType: SubscriptionDeliveryMethodPickupOption, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionDeliveryMethodPickup", returnType: "SubscriptionDeliveryMethodPickup", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the selected pickup option on a subscription contract.
 */
export type SubscriptionDeliveryMethodPickupOption = {
/**
 * A custom reference to the delivery method for use with automations.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The details displayed to the customer to describe the pickup option.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The location where the customer will pick up the merchandise.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The presentment title of the pickup option.
 */
presentmentTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The title of the pickup option.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SubscriptionDeliveryMethodPickupOption", returnType: "SubscriptionDeliveryMethodPickupOption", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a shipping delivery method: a mailing address and a shipping option.
 */
export type SubscriptionDeliveryMethodShipping = {
/**
 * The address to ship to.
 */
address: { baseType: SubscriptionMailingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The details of the shipping method to use.
 */
shippingOption: { baseType: SubscriptionDeliveryMethodShippingOption, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionDeliveryMethodShipping", returnType: "SubscriptionDeliveryMethodShipping", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the selected shipping option on a subscription contract.
 */
export type SubscriptionDeliveryMethodShippingOption = {
/**
 * The carrier service that's providing this shipping option.
 * This field isn't currently supported and returns null.
 */
carrierService: { baseType: DeliveryCarrierService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The code of the shipping option.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The description of the shipping option.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The presentment title of the shipping option.
 */
presentmentTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The title of the shipping option.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SubscriptionDeliveryMethodShippingOption", returnType: "SubscriptionDeliveryMethodShippingOption", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The delivery option for a subscription contract.
 */
export type SubscriptionDeliveryOption = SubscriptionLocalDeliveryOption | SubscriptionPickupOption | SubscriptionShippingOption

/**
 * The result of the query to fetch delivery options for the subscription contract.
 */
export type SubscriptionDeliveryOptionResult = SubscriptionDeliveryOptionResultFailure | SubscriptionDeliveryOptionResultSuccess

/**
 * A failure to find the available delivery options for a subscription contract.
 */
export type SubscriptionDeliveryOptionResultFailure = {
/**
 * The reason for the failure.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SubscriptionDeliveryOptionResultFailure", returnType: "SubscriptionDeliveryOptionResultFailure", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The delivery option for a subscription contract.
 */
export type SubscriptionDeliveryOptionResultSuccess = {
/**
 * The available delivery options.
 */
deliveryOptions: { members: { SubscriptionLocalDeliveryOption: SubscriptionLocalDeliveryOption; SubscriptionPickupOption: SubscriptionPickupOption; SubscriptionShippingOption: SubscriptionShippingOption }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDeliveryOptionResultSuccess", returnType: "SubscriptionDeliveryOptionResultSuccess", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a Subscription Delivery Policy.
 */
export type SubscriptionDeliveryPolicy = {
/**
 * The specific anchor dates upon which the delivery interval calculations should be made.
 */
anchors: { baseType: SellingPlanAnchor, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).
 */
interval: { baseType: BaseTypes.SellingPlanInterval, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of delivery intervals between deliveries.
 */
intervalCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionDeliveryPolicy", returnType: "SubscriptionDeliveryPolicy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Subscription draft discount types.
 */
export type SubscriptionDiscount = SubscriptionAppliedCodeDiscount | SubscriptionManualDiscount

/**
 * Represents what a particular discount reduces from a line price.
 */
export type SubscriptionDiscountAllocation = {
/**
 * Allocation amount.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Discount that created the allocation.
 */
discount: { members: { SubscriptionAppliedCodeDiscount: SubscriptionAppliedCodeDiscount; SubscriptionManualDiscount: SubscriptionManualDiscount }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionDiscountAllocation", returnType: "SubscriptionDiscountAllocation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple SubscriptionDiscounts.
 */
export type SubscriptionDiscountConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SubscriptionDiscountEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SubscriptionDiscountEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { SubscriptionAppliedCodeDiscount: SubscriptionAppliedCodeDiscount; SubscriptionManualDiscount: SubscriptionManualDiscount }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionDiscountConnection", returnType: "SubscriptionDiscountConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.
 */
export type SubscriptionDiscountEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SubscriptionDiscountEdge.
 */
node: { members: { SubscriptionAppliedCodeDiscount: SubscriptionAppliedCodeDiscount; SubscriptionManualDiscount: SubscriptionManualDiscount }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionDiscountEdge", returnType: "SubscriptionDiscountEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents the subscription lines the discount applies on.
 */
export type SubscriptionDiscountEntitledLines = {
/**
 * Specify whether the subscription discount will apply on all subscription lines.
 */
all: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription lines associated with the subscription discount.
 */
lines: { baseType: SubscriptionLineConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionDiscountEntitledLines", returnType: "SubscriptionDiscountEntitledLines", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The value of the discount and how it will be applied.
 */
export type SubscriptionDiscountFixedAmountValue = {
/**
 * The fixed amount value of the discount.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the amount is applied per item.
 */
appliesOnEachItem: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionDiscountFixedAmountValue", returnType: "SubscriptionDiscountFixedAmountValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The percentage value of the discount.
 */
export type SubscriptionDiscountPercentageValue = {
/**
 * The percentage value of the discount.
 */
percentage: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionDiscountPercentageValue", returnType: "SubscriptionDiscountPercentageValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The value of the discount and how it will be applied.
 */
export type SubscriptionDiscountValue = SubscriptionDiscountFixedAmountValue | SubscriptionDiscountPercentageValue

/**
 * Represents a Subscription Draft.
 */
export type SubscriptionDraft = {
/**
 * The billing cycle that the subscription contract will be associated with.
 */
billingCycle: { baseType: SubscriptionBillingCycle, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The billing policy for the subscription contract.
 */
billingPolicy: { baseType: SubscriptionBillingPolicy, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The billing cycles of the contracts that will be concatenated to the subscription contract.
 */
concatenatedBillingCycles: { baseType: SubscriptionBillingCycleConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.SubscriptionBillingCyclesSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The currency used for the subscription contract.
 */
currencyCode: { baseType: BaseTypes.CurrencyCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of the custom attributes to be added to the generated orders.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The customer to whom the subscription contract belongs.
 */
customer: { baseType: Customer, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The customer payment method used for the subscription contract.
 */
customerPaymentMethod: { baseType: CustomerPaymentMethod, arguments: { showRevoked?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The delivery method for each billing of the subscription contract.
 */
deliveryMethod: { members: { SubscriptionDeliveryMethodLocalDelivery: SubscriptionDeliveryMethodLocalDelivery; SubscriptionDeliveryMethodPickup: SubscriptionDeliveryMethodPickup; SubscriptionDeliveryMethodShipping: SubscriptionDeliveryMethodShipping }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The available delivery options for a given delivery address. Returns `null` for pending requests.
 */
deliveryOptions: { members: { SubscriptionDeliveryOptionResultFailure: SubscriptionDeliveryOptionResultFailure; SubscriptionDeliveryOptionResultSuccess: SubscriptionDeliveryOptionResultSuccess }, arguments: { deliveryAddress?: InputTypes.MailingAddressInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The delivery policy for the subscription contract.
 */
deliveryPolicy: { baseType: SubscriptionDeliveryPolicy, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The delivery price for each billing the subscription contract.
 */
deliveryPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of subscription discounts which will be associated with the subscription contract.
 */
discounts: { baseType: SubscriptionDiscountConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription discounts to be added to the subscription contract.
 */
discountsAdded: { baseType: SubscriptionDiscountConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription discounts to be removed from the subscription contract.
 */
discountsRemoved: { baseType: SubscriptionDiscountConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription discounts to be updated on the subscription contract.
 */
discountsUpdated: { baseType: SubscriptionDiscountConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription lines which will be associated with the subscription contract.
 */
lines: { baseType: SubscriptionLineConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription lines to be added to the subscription contract.
 */
linesAdded: { baseType: SubscriptionLineConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of subscription lines to be removed from the subscription contract.
 */
linesRemoved: { baseType: SubscriptionLineConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The next billing date for the subscription contract.
 */
nextBillingDate: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The note field that will be applied to the generated orders.
 */
note: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The original subscription contract.
 */
originalContract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Available Shipping Options for a given delivery address. Returns NULL for pending requests.
 */
shippingOptions: { members: { SubscriptionShippingOptionResultFailure: SubscriptionShippingOptionResultFailure; SubscriptionShippingOptionResultSuccess: SubscriptionShippingOptionResultSuccess }, arguments: { deliveryAddress?: InputTypes.MailingAddressInput | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The current status of the subscription contract.
 */
status: { baseType: BaseTypes.SubscriptionContractSubscriptionStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SubscriptionDraft", returnType: "SubscriptionDraft", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `subscriptionDraftCommit` mutation.
 */
export type SubscriptionDraftCommitPayload = {
/**
 * The updated Subscription Contract object.
 */
contract: { baseType: SubscriptionContract, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDraftCommitPayload", returnType: "SubscriptionDraftCommitPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionDraftDiscountAdd` mutation.
 */
export type SubscriptionDraftDiscountAddPayload = {
/**
 * The added Subscription Discount.
 */
discountAdded: { baseType: SubscriptionManualDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The Subscription Contract draft object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDraftDiscountAddPayload", returnType: "SubscriptionDraftDiscountAddPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionDraftDiscountCodeApply` mutation.
 */
export type SubscriptionDraftDiscountCodeApplyPayload = {
/**
 * The added subscription discount.
 */
appliedDiscount: { baseType: SubscriptionAppliedCodeDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The subscription contract draft object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDraftDiscountCodeApplyPayload", returnType: "SubscriptionDraftDiscountCodeApplyPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionDraftDiscountRemove` mutation.
 */
export type SubscriptionDraftDiscountRemovePayload = {
/**
 * The removed subscription draft discount.
 */
discountRemoved: { members: { SubscriptionAppliedCodeDiscount: SubscriptionAppliedCodeDiscount; SubscriptionManualDiscount: SubscriptionManualDiscount }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The subscription contract draft object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDraftDiscountRemovePayload", returnType: "SubscriptionDraftDiscountRemovePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionDraftDiscountUpdate` mutation.
 */
export type SubscriptionDraftDiscountUpdatePayload = {
/**
 * The updated Subscription Discount.
 */
discountUpdated: { baseType: SubscriptionManualDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The Subscription Contract draft object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDraftDiscountUpdatePayload", returnType: "SubscriptionDraftDiscountUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionDraftFreeShippingDiscountAdd` mutation.
 */
export type SubscriptionDraftFreeShippingDiscountAddPayload = {
/**
 * The added subscription free shipping discount.
 */
discountAdded: { baseType: SubscriptionManualDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The subscription contract draft object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDraftFreeShippingDiscountAddPayload", returnType: "SubscriptionDraftFreeShippingDiscountAddPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionDraftFreeShippingDiscountUpdate` mutation.
 */
export type SubscriptionDraftFreeShippingDiscountUpdatePayload = {
/**
 * The updated Subscription Discount.
 */
discountUpdated: { baseType: SubscriptionManualDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The Subscription Contract draft object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDraftFreeShippingDiscountUpdatePayload", returnType: "SubscriptionDraftFreeShippingDiscountUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionDraftLineAdd` mutation.
 */
export type SubscriptionDraftLineAddPayload = {
/**
 * The Subscription Contract draft object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The added Subscription Line.
 */
lineAdded: { baseType: SubscriptionLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDraftLineAddPayload", returnType: "SubscriptionDraftLineAddPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionDraftLineRemove` mutation.
 */
export type SubscriptionDraftLineRemovePayload = {
/**
 * The list of updated subscription discounts impacted by the removed line.
 */
discountsUpdated: { baseType: SubscriptionManualDiscount, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The Subscription Contract draft object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The removed Subscription Line.
 */
lineRemoved: { baseType: SubscriptionLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDraftLineRemovePayload", returnType: "SubscriptionDraftLineRemovePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionDraftLineUpdate` mutation.
 */
export type SubscriptionDraftLineUpdatePayload = {
/**
 * The Subscription Contract draft object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The updated Subscription Line.
 */
lineUpdated: { baseType: SubscriptionLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDraftLineUpdatePayload", returnType: "SubscriptionDraftLineUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `subscriptionDraftUpdate` mutation.
 */
export type SubscriptionDraftUpdatePayload = {
/**
 * The Subscription Draft object.
 */
draft: { baseType: SubscriptionDraft, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: SubscriptionDraftUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionDraftUpdatePayload", returnType: "SubscriptionDraftUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a Subscription Draft error.
 */
export type SubscriptionDraftUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.SubscriptionDraftErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionDraftUserError", returnType: "SubscriptionDraftUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a Subscription Line.
 */
export type SubscriptionLine = {
/**
 * The price per unit for the subscription line in the contract's currency.
 */
currentPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * List of custom attributes associated to the line item.
 */
customAttributes: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Discount allocations.
 */
discountAllocations: { baseType: SubscriptionDiscountAllocation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Total line price including all discounts.
 */
lineDiscountedPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Describe the price changes of the line over time.
 */
pricingPolicy: { baseType: SubscriptionPricingPolicy, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The product ID associated with the subscription line.
 */
productId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The quantity of the unit selected for the subscription line.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether physical shipping is required for the variant.
 */
requiresShipping: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The selling plan ID associated to the line.
 *
 * Indicates which selling plan was used to create this
 * contract line initially. The selling plan ID is also used to
 * find the associated delivery profile.
 *
 * The subscription contract, subscription line, or selling plan might have
 * changed. As a result, the selling plan's attributes might not
 * match the information on the contract.
 */
sellingPlanId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The selling plan name associated to the line. This name describes
 * the order line items created from this subscription line
 * for both merchants and customers.
 *
 * The value can be different from the selling plan's name, because both
 * the selling plan's name and the subscription line's selling_plan_name
 * attribute can be updated independently.
 */
sellingPlanName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Variant SKU number of the item associated with the subscription line.
 */
sku: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the variant is taxable.
 */
taxable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Product title of the item associated with the subscription line.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product variant ID associated with the subscription line.
 */
variantId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The image associated with the line item's variant or product.
 */
variantImage: { baseType: Image, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Product variant title of the item associated with the subscription line.
 */
variantTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SubscriptionLine", returnType: "SubscriptionLine", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple SubscriptionLines.
 */
export type SubscriptionLineConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SubscriptionLineEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SubscriptionLineEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: SubscriptionLine, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionLineConnection", returnType: "SubscriptionLineConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SubscriptionLine and a cursor during pagination.
 */
export type SubscriptionLineEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SubscriptionLineEdge.
 */
node: { baseType: SubscriptionLine, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionLineEdge", returnType: "SubscriptionLineEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A local delivery option for a subscription contract.
 */
export type SubscriptionLocalDeliveryOption = {
/**
 * The code of the local delivery option.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of the local delivery option.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether a phone number is required for the local delivery option.
 */
phoneRequired: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The presentment title of the local delivery option.
 */
presentmentTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The price of the local delivery option.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The title of the local delivery option.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionLocalDeliveryOption", returnType: "SubscriptionLocalDeliveryOption", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a Mailing Address on a Subscription.
 */
export type SubscriptionMailingAddress = {
/**
 * The first line of the address. Typically the street address or PO Box number.
 */
address1: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The second line of the address. Typically the number of the apartment, suite, or unit.
 */
address2: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the city, district, village, or town.
 */
city: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the customer's company or organization.
 */
company: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the country.
 */
country: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The two-letter code for the country of the address.
 *
 * For example, US.
 */
countryCode: { baseType: BaseTypes.CountryCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The first name of the customer.
 */
firstName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The last name of the customer.
 */
lastName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The full name of the customer, based on firstName and lastName.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
 */
phone: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The region of the address, such as the province, state, or district.
 */
province: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The alphanumeric code for the region.
 *
 * For example, ON.
 */
provinceCode: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The zip or postal code of the address.
 */
zip: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SubscriptionMailingAddress", returnType: "SubscriptionMailingAddress", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Custom subscription discount.
 */
export type SubscriptionManualDiscount = {
/**
 * Entitled line items used to apply the subscription discount on.
 */
entitledLines: { baseType: SubscriptionDiscountEntitledLines, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The maximum number of times the subscription discount will be applied on orders.
 */
recurringCycleLimit: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The reason that the discount on the subscription draft is rejected.
 */
rejectionReason: { baseType: BaseTypes.SubscriptionDiscountRejectionReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Type of line the discount applies on.
 */
targetType: { baseType: BaseTypes.DiscountTargetType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The title associated with the subscription discount.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The type of the subscription discount.
 */
type: { baseType: BaseTypes.DiscountType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of times the discount was applied.
 */
usageCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The value of the subscription discount.
 */
value: { members: { SubscriptionDiscountFixedAmountValue: SubscriptionDiscountFixedAmountValue; SubscriptionDiscountPercentageValue: SubscriptionDiscountPercentageValue }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionManualDiscount", returnType: "SubscriptionManualDiscount", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple SubscriptionManualDiscounts.
 */
export type SubscriptionManualDiscountConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: SubscriptionManualDiscountEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in SubscriptionManualDiscountEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: SubscriptionManualDiscount, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionManualDiscountConnection", returnType: "SubscriptionManualDiscountConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.
 */
export type SubscriptionManualDiscountEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of SubscriptionManualDiscountEdge.
 */
node: { baseType: SubscriptionManualDiscount, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionManualDiscountEdge", returnType: "SubscriptionManualDiscountEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A pickup option to deliver a subscription contract.
 */
export type SubscriptionPickupOption = {
/**
 * The code of the pickup option.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of the pickup option.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The pickup location.
 */
location: { baseType: Location, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether a phone number is required for the pickup option.
 */
phoneRequired: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The estimated amount of time it takes for the pickup to be ready. For example, "Usually ready in 24 hours".).
 */
pickupTime: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The presentment title of the pickup option.
 */
presentmentTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The price of the pickup option.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The title of the pickup option.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionPickupOption", returnType: "SubscriptionPickupOption", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a Subscription Line Pricing Policy.
 */
export type SubscriptionPricingPolicy = {
/**
 * The base price per unit for the subscription line in the contract's currency.
 */
basePrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The adjustments per cycle for the subscription line.
 */
cycleDiscounts: { baseType: SubscriptionCyclePriceAdjustment, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionPricingPolicy", returnType: "SubscriptionPricingPolicy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A shipping option to deliver a subscription contract.
 */
export type SubscriptionShippingOption = {
/**
 * The carrier service that's providing this shipping option.
 * This field isn't currently supported and returns null.
 */
carrierService: { baseType: DeliveryCarrierService, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The code of the shipping option.
 */
code: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The description of the shipping option.
 */
description: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * If a phone number is required for the shipping option.
 */
phoneRequired: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The presentment title of the shipping option.
 */
presentmentTitle: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The price of the shipping option.
 */
price: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The title of the shipping option.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SubscriptionShippingOption", returnType: "SubscriptionShippingOption", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The result of the query to fetch shipping options for the subscription contract.
 */
export type SubscriptionShippingOptionResult = SubscriptionShippingOptionResultFailure | SubscriptionShippingOptionResultSuccess

/**
 * Failure determining available shipping options for delivery of a subscription contract.
 */
export type SubscriptionShippingOptionResultFailure = {
/**
 * Failure reason.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SubscriptionShippingOptionResultFailure", returnType: "SubscriptionShippingOptionResultFailure", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A shipping option for delivery of a subscription contract.
 */
export type SubscriptionShippingOptionResultSuccess = {
/**
 * Available shipping options.
 */
shippingOptions: { baseType: SubscriptionShippingOption, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "SubscriptionShippingOptionResultSuccess", returnType: "SubscriptionShippingOptionResultSuccess", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A suggested transaction. Suggested transaction are usually used in the context of refunds
 * and exchanges.
 */
export type SuggestedOrderTransaction = {
/**
 * The masked account number associated with the payment method.
 */
accountNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The amount of the transaction.
 */
amount: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount and currency of the suggested order transaction in shop and presentment currencies.
 */
amountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The human-readable payment gateway name suggested to process the transaction.
 */
formattedGateway: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The suggested payment gateway used to process the transaction.
 */
gateway: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Specifies the kind of the suggested order transaction.
 */
kind: { baseType: BaseTypes.SuggestedOrderTransactionKind, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
 */
maximumRefundable: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund.
 */
maximumRefundableSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The associated parent transaction, for example the authorization of a capture.
 */
parentTransaction: { baseType: OrderTransaction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The associated payment details related to the transaction.
 */
paymentDetails: { members: { CardPaymentDetails: CardPaymentDetails; ShopPayInstallmentsPaymentDetails: ShopPayInstallmentsPaymentDetails }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "SuggestedOrderTransaction", returnType: "SuggestedOrderTransaction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund.
 */
export type SuggestedRefund = {
/**
 * The total monetary value to be refunded.
 */
amount: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total monetary value to be refunded in shop and presentment currencies.
 */
amountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of all the discounted prices of the line items being refunded.
 */
discountedSubtotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total monetary value available to refund.
 */
maximumRefundable: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total monetary value available to refund in shop and presentment currencies.
 */
maximumRefundableSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of duties to be refunded from the order.
 */
refundDuties: { baseType: RefundDuty, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of line items to be refunded, along with restock instructions.
 */
refundLineItems: { baseType: RefundLineItem, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The shipping costs to be refunded from the order.
 */
shipping: { baseType: ShippingRefund, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of all the prices of the line items being refunded.
 */
subtotal: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of all the prices of the line items being refunded in shop and presentment currencies.
 */
subtotalSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of suggested order transactions.
 */
suggestedTransactions: { baseType: SuggestedOrderTransaction, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total cart discount amount that was applied to all line items in this refund.
 */
totalCartDiscountAmountSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
 */
totalDutiesSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.
 */
totalTaxSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of the taxes being refunded from the order. The value must be positive.
 */
totalTaxes: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SuggestedRefund", returnType: "SuggestedRefund", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a return refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund for the return.
 */
export type SuggestedReturnRefund = {
/**
 * The total monetary value to be refunded in shop and presentment currencies.
 */
amount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of all the discounted prices of the line items being refunded.
 */
discountedSubtotal: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total monetary value available to refund in shop and presentment currencies.
 */
maximumRefundable: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of duties to be refunded from the order.
 */
refundDuties: { baseType: RefundDuty, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The shipping costs to be refunded from the order.
 */
shipping: { baseType: ShippingRefund, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of all the prices of the line items being refunded in shop and presentment currencies.
 */
subtotal: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of suggested order transactions.
 */
suggestedTransactions: { baseType: SuggestedOrderTransaction, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total cart discount amount that was applied to all line items in this refund.
 */
totalCartDiscountAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
 */
totalDuties: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The sum of the taxes being refunded in shop and presentment currencies. The value must be positive.
 */
totalTax: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "SuggestedReturnRefund", returnType: "SuggestedReturnRefund", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `tagsAdd` mutation.
 */
export type TagsAddPayload = {
/**
 * The object that was updated.
 */
node: { members: { AbandonedCheckout: AbandonedCheckout; AbandonedCheckoutLineItem: AbandonedCheckoutLineItem; Abandonment: Abandonment; AddAllProductsOperation: AddAllProductsOperation; AdditionalFee: AdditionalFee; App: App; AppCatalog: AppCatalog; AppCredit: AppCredit; AppInstallation: AppInstallation; AppPurchaseOneTime: AppPurchaseOneTime; AppRevenueAttributionRecord: AppRevenueAttributionRecord; AppSubscription: AppSubscription; AppUsageRecord: AppUsageRecord; BasicEvent: BasicEvent; BulkOperation: BulkOperation; CalculatedOrder: CalculatedOrder; CartTransform: CartTransform; CashTrackingAdjustment: CashTrackingAdjustment; CashTrackingSession: CashTrackingSession; CatalogCsvOperation: CatalogCsvOperation; Channel: Channel; ChannelDefinition: ChannelDefinition; ChannelInformation: ChannelInformation; CheckoutProfile: CheckoutProfile; Collection: Collection; CommentEvent: CommentEvent; Company: Company; CompanyAddress: CompanyAddress; CompanyContact: CompanyContact; CompanyContactRole: CompanyContactRole; CompanyContactRoleAssignment: CompanyContactRoleAssignment; CompanyLocation: CompanyLocation; CompanyLocationCatalog: CompanyLocationCatalog; Customer: Customer; CustomerPaymentMethod: CustomerPaymentMethod; CustomerSegmentMembersQuery: CustomerSegmentMembersQuery; CustomerVisit: CustomerVisit; DeliveryCarrierService: DeliveryCarrierService; DeliveryCondition: DeliveryCondition; DeliveryCountry: DeliveryCountry; DeliveryCustomization: DeliveryCustomization; DeliveryLocationGroup: DeliveryLocationGroup; DeliveryMethod: DeliveryMethod; DeliveryMethodDefinition: DeliveryMethodDefinition; DeliveryParticipant: DeliveryParticipant; DeliveryProfile: DeliveryProfile; DeliveryProfileItem: DeliveryProfileItem; DeliveryPromiseProvider: DeliveryPromiseProvider; DeliveryProvince: DeliveryProvince; DeliveryRateDefinition: DeliveryRateDefinition; DeliveryZone: DeliveryZone; DiscountAutomaticBxgy: DiscountAutomaticBxgy; DiscountAutomaticNode: DiscountAutomaticNode; DiscountCodeNode: DiscountCodeNode; DiscountNode: DiscountNode; DiscountRedeemCodeBulkCreation: DiscountRedeemCodeBulkCreation; Domain: Domain; DraftOrder: DraftOrder; DraftOrderLineItem: DraftOrderLineItem; DraftOrderTag: DraftOrderTag; Duty: Duty; ExchangeLineItem: ExchangeLineItem; ExchangeV2: ExchangeV2; ExternalVideo: ExternalVideo; Fulfillment: Fulfillment; FulfillmentConstraintRule: FulfillmentConstraintRule; FulfillmentEvent: FulfillmentEvent; FulfillmentLineItem: FulfillmentLineItem; FulfillmentOrder: FulfillmentOrder; FulfillmentOrderDestination: FulfillmentOrderDestination; FulfillmentOrderLineItem: FulfillmentOrderLineItem; FulfillmentOrderMerchantRequest: FulfillmentOrderMerchantRequest; GenericFile: GenericFile; GiftCard: GiftCard; InventoryAdjustmentGroup: InventoryAdjustmentGroup; InventoryItem: InventoryItem; InventoryItemMeasurement: InventoryItemMeasurement; InventoryLevel: InventoryLevel; InventoryQuantity: InventoryQuantity; LineItem: LineItem; LineItemGroup: LineItemGroup; LineItemMutable: LineItemMutable; Location: Location; MailingAddress: MailingAddress; Market: Market; MarketCatalog: MarketCatalog; MarketRegionCountry: MarketRegionCountry; MarketWebPresence: MarketWebPresence; MarketingActivity: MarketingActivity; MarketingEvent: MarketingEvent; MediaImage: MediaImage; Menu: Menu; Metafield: Metafield; MetafieldDefinition: MetafieldDefinition; MetafieldStorefrontVisibility: MetafieldStorefrontVisibility; Metaobject: Metaobject; MetaobjectDefinition: MetaobjectDefinition; Model3d: Model3d; OnlineStoreArticle: OnlineStoreArticle; OnlineStoreBlog: OnlineStoreBlog; OnlineStorePage: OnlineStorePage; Order: Order; OrderDisputeSummary: OrderDisputeSummary; OrderTransaction: OrderTransaction; PaymentCustomization: PaymentCustomization; PaymentMandate: PaymentMandate; PaymentSchedule: PaymentSchedule; PaymentTerms: PaymentTerms; PaymentTermsTemplate: PaymentTermsTemplate; PriceList: PriceList; PriceRule: PriceRule; PriceRuleDiscountCode: PriceRuleDiscountCode; PrivateMetafield: PrivateMetafield; Product: Product; ProductBundleOperation: ProductBundleOperation; ProductFeed: ProductFeed; ProductOption: ProductOption; ProductOptionValue: ProductOptionValue; ProductSetOperation: ProductSetOperation; ProductTaxonomyNode: ProductTaxonomyNode; ProductVariant: ProductVariant; ProductVariantComponent: ProductVariantComponent; Publication: Publication; PublicationResourceOperation: PublicationResourceOperation; QuantityPriceBreak: QuantityPriceBreak; Refund: Refund; RefundShippingLine: RefundShippingLine; Return: Return; ReturnLineItem: ReturnLineItem; ReturnableFulfillment: ReturnableFulfillment; ReverseDelivery: ReverseDelivery; ReverseDeliveryLineItem: ReverseDeliveryLineItem; ReverseFulfillmentOrder: ReverseFulfillmentOrder; ReverseFulfillmentOrderDisposition: ReverseFulfillmentOrderDisposition; ReverseFulfillmentOrderLineItem: ReverseFulfillmentOrderLineItem; SaleAdditionalFee: SaleAdditionalFee; SavedSearch: SavedSearch; ScriptTag: ScriptTag; Segment: Segment; SellingPlan: SellingPlan; SellingPlanGroup: SellingPlanGroup; ServerPixel: ServerPixel; Shop: Shop; ShopAddress: ShopAddress; ShopPolicy: ShopPolicy; ShopifyPaymentsAccount: ShopifyPaymentsAccount; ShopifyPaymentsBalanceTransaction: ShopifyPaymentsBalanceTransaction; ShopifyPaymentsBankAccount: ShopifyPaymentsBankAccount; ShopifyPaymentsDispute: ShopifyPaymentsDispute; ShopifyPaymentsDisputeEvidence: ShopifyPaymentsDisputeEvidence; ShopifyPaymentsDisputeFileUpload: ShopifyPaymentsDisputeFileUpload; ShopifyPaymentsDisputeFulfillment: ShopifyPaymentsDisputeFulfillment; ShopifyPaymentsPayout: ShopifyPaymentsPayout; ShopifyPaymentsVerification: ShopifyPaymentsVerification; StaffMember: StaffMember; StandardMetafieldDefinitionTemplate: StandardMetafieldDefinitionTemplate; StoreCreditAccount: StoreCreditAccount; StoreCreditAccountCreditTransaction: StoreCreditAccountCreditTransaction; StoreCreditAccountDebitRevertTransaction: StoreCreditAccountDebitRevertTransaction; StoreCreditAccountDebitTransaction: StoreCreditAccountDebitTransaction; StorefrontAccessToken: StorefrontAccessToken; SubscriptionBillingAttempt: SubscriptionBillingAttempt; SubscriptionContract: SubscriptionContract; SubscriptionDraft: SubscriptionDraft; TaxonomyAttribute: TaxonomyAttribute; TaxonomyCategory: TaxonomyCategory; TaxonomyChoiceListAttribute: TaxonomyChoiceListAttribute; TaxonomyMeasurementAttribute: TaxonomyMeasurementAttribute; TaxonomyValue: TaxonomyValue; TenderTransaction: TenderTransaction; TransactionFee: TransactionFee; UnverifiedReturnLineItem: UnverifiedReturnLineItem; UrlRedirect: UrlRedirect; UrlRedirectImport: UrlRedirectImport; Validation: Validation; Video: Video; WebPixel: WebPixel; WebhookSubscription: WebhookSubscription }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "TagsAddPayload", returnType: "TagsAddPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `tagsRemove` mutation.
 */
export type TagsRemovePayload = {
/**
 * The object that was updated.
 */
node: { members: { AbandonedCheckout: AbandonedCheckout; AbandonedCheckoutLineItem: AbandonedCheckoutLineItem; Abandonment: Abandonment; AddAllProductsOperation: AddAllProductsOperation; AdditionalFee: AdditionalFee; App: App; AppCatalog: AppCatalog; AppCredit: AppCredit; AppInstallation: AppInstallation; AppPurchaseOneTime: AppPurchaseOneTime; AppRevenueAttributionRecord: AppRevenueAttributionRecord; AppSubscription: AppSubscription; AppUsageRecord: AppUsageRecord; BasicEvent: BasicEvent; BulkOperation: BulkOperation; CalculatedOrder: CalculatedOrder; CartTransform: CartTransform; CashTrackingAdjustment: CashTrackingAdjustment; CashTrackingSession: CashTrackingSession; CatalogCsvOperation: CatalogCsvOperation; Channel: Channel; ChannelDefinition: ChannelDefinition; ChannelInformation: ChannelInformation; CheckoutProfile: CheckoutProfile; Collection: Collection; CommentEvent: CommentEvent; Company: Company; CompanyAddress: CompanyAddress; CompanyContact: CompanyContact; CompanyContactRole: CompanyContactRole; CompanyContactRoleAssignment: CompanyContactRoleAssignment; CompanyLocation: CompanyLocation; CompanyLocationCatalog: CompanyLocationCatalog; Customer: Customer; CustomerPaymentMethod: CustomerPaymentMethod; CustomerSegmentMembersQuery: CustomerSegmentMembersQuery; CustomerVisit: CustomerVisit; DeliveryCarrierService: DeliveryCarrierService; DeliveryCondition: DeliveryCondition; DeliveryCountry: DeliveryCountry; DeliveryCustomization: DeliveryCustomization; DeliveryLocationGroup: DeliveryLocationGroup; DeliveryMethod: DeliveryMethod; DeliveryMethodDefinition: DeliveryMethodDefinition; DeliveryParticipant: DeliveryParticipant; DeliveryProfile: DeliveryProfile; DeliveryProfileItem: DeliveryProfileItem; DeliveryPromiseProvider: DeliveryPromiseProvider; DeliveryProvince: DeliveryProvince; DeliveryRateDefinition: DeliveryRateDefinition; DeliveryZone: DeliveryZone; DiscountAutomaticBxgy: DiscountAutomaticBxgy; DiscountAutomaticNode: DiscountAutomaticNode; DiscountCodeNode: DiscountCodeNode; DiscountNode: DiscountNode; DiscountRedeemCodeBulkCreation: DiscountRedeemCodeBulkCreation; Domain: Domain; DraftOrder: DraftOrder; DraftOrderLineItem: DraftOrderLineItem; DraftOrderTag: DraftOrderTag; Duty: Duty; ExchangeLineItem: ExchangeLineItem; ExchangeV2: ExchangeV2; ExternalVideo: ExternalVideo; Fulfillment: Fulfillment; FulfillmentConstraintRule: FulfillmentConstraintRule; FulfillmentEvent: FulfillmentEvent; FulfillmentLineItem: FulfillmentLineItem; FulfillmentOrder: FulfillmentOrder; FulfillmentOrderDestination: FulfillmentOrderDestination; FulfillmentOrderLineItem: FulfillmentOrderLineItem; FulfillmentOrderMerchantRequest: FulfillmentOrderMerchantRequest; GenericFile: GenericFile; GiftCard: GiftCard; InventoryAdjustmentGroup: InventoryAdjustmentGroup; InventoryItem: InventoryItem; InventoryItemMeasurement: InventoryItemMeasurement; InventoryLevel: InventoryLevel; InventoryQuantity: InventoryQuantity; LineItem: LineItem; LineItemGroup: LineItemGroup; LineItemMutable: LineItemMutable; Location: Location; MailingAddress: MailingAddress; Market: Market; MarketCatalog: MarketCatalog; MarketRegionCountry: MarketRegionCountry; MarketWebPresence: MarketWebPresence; MarketingActivity: MarketingActivity; MarketingEvent: MarketingEvent; MediaImage: MediaImage; Menu: Menu; Metafield: Metafield; MetafieldDefinition: MetafieldDefinition; MetafieldStorefrontVisibility: MetafieldStorefrontVisibility; Metaobject: Metaobject; MetaobjectDefinition: MetaobjectDefinition; Model3d: Model3d; OnlineStoreArticle: OnlineStoreArticle; OnlineStoreBlog: OnlineStoreBlog; OnlineStorePage: OnlineStorePage; Order: Order; OrderDisputeSummary: OrderDisputeSummary; OrderTransaction: OrderTransaction; PaymentCustomization: PaymentCustomization; PaymentMandate: PaymentMandate; PaymentSchedule: PaymentSchedule; PaymentTerms: PaymentTerms; PaymentTermsTemplate: PaymentTermsTemplate; PriceList: PriceList; PriceRule: PriceRule; PriceRuleDiscountCode: PriceRuleDiscountCode; PrivateMetafield: PrivateMetafield; Product: Product; ProductBundleOperation: ProductBundleOperation; ProductFeed: ProductFeed; ProductOption: ProductOption; ProductOptionValue: ProductOptionValue; ProductSetOperation: ProductSetOperation; ProductTaxonomyNode: ProductTaxonomyNode; ProductVariant: ProductVariant; ProductVariantComponent: ProductVariantComponent; Publication: Publication; PublicationResourceOperation: PublicationResourceOperation; QuantityPriceBreak: QuantityPriceBreak; Refund: Refund; RefundShippingLine: RefundShippingLine; Return: Return; ReturnLineItem: ReturnLineItem; ReturnableFulfillment: ReturnableFulfillment; ReverseDelivery: ReverseDelivery; ReverseDeliveryLineItem: ReverseDeliveryLineItem; ReverseFulfillmentOrder: ReverseFulfillmentOrder; ReverseFulfillmentOrderDisposition: ReverseFulfillmentOrderDisposition; ReverseFulfillmentOrderLineItem: ReverseFulfillmentOrderLineItem; SaleAdditionalFee: SaleAdditionalFee; SavedSearch: SavedSearch; ScriptTag: ScriptTag; Segment: Segment; SellingPlan: SellingPlan; SellingPlanGroup: SellingPlanGroup; ServerPixel: ServerPixel; Shop: Shop; ShopAddress: ShopAddress; ShopPolicy: ShopPolicy; ShopifyPaymentsAccount: ShopifyPaymentsAccount; ShopifyPaymentsBalanceTransaction: ShopifyPaymentsBalanceTransaction; ShopifyPaymentsBankAccount: ShopifyPaymentsBankAccount; ShopifyPaymentsDispute: ShopifyPaymentsDispute; ShopifyPaymentsDisputeEvidence: ShopifyPaymentsDisputeEvidence; ShopifyPaymentsDisputeFileUpload: ShopifyPaymentsDisputeFileUpload; ShopifyPaymentsDisputeFulfillment: ShopifyPaymentsDisputeFulfillment; ShopifyPaymentsPayout: ShopifyPaymentsPayout; ShopifyPaymentsVerification: ShopifyPaymentsVerification; StaffMember: StaffMember; StandardMetafieldDefinitionTemplate: StandardMetafieldDefinitionTemplate; StoreCreditAccount: StoreCreditAccount; StoreCreditAccountCreditTransaction: StoreCreditAccountCreditTransaction; StoreCreditAccountDebitRevertTransaction: StoreCreditAccountDebitRevertTransaction; StoreCreditAccountDebitTransaction: StoreCreditAccountDebitTransaction; StorefrontAccessToken: StorefrontAccessToken; SubscriptionBillingAttempt: SubscriptionBillingAttempt; SubscriptionContract: SubscriptionContract; SubscriptionDraft: SubscriptionDraft; TaxonomyAttribute: TaxonomyAttribute; TaxonomyCategory: TaxonomyCategory; TaxonomyChoiceListAttribute: TaxonomyChoiceListAttribute; TaxonomyMeasurementAttribute: TaxonomyMeasurementAttribute; TaxonomyValue: TaxonomyValue; TenderTransaction: TenderTransaction; TransactionFee: TransactionFee; UnverifiedReturnLineItem: UnverifiedReturnLineItem; UrlRedirect: UrlRedirect; UrlRedirectImport: UrlRedirectImport; Validation: Validation; Video: Video; WebPixel: WebPixel; WebhookSubscription: WebhookSubscription }, fields: { id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false } }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "TagsRemovePayload", returnType: "TagsRemovePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Tax app configuration of a merchant.
 */
export type TaxAppConfiguration = {
/**
 * State of the tax app configuration.
 */
state: { baseType: BaseTypes.TaxPartnerState, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxAppConfiguration", returnType: "TaxAppConfiguration", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `taxAppConfigure` mutation.
 */
export type TaxAppConfigurePayload = {
/**
 * The updated tax app configuration.
 */
taxAppConfiguration: { baseType: TaxAppConfiguration, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: TaxAppConfigureUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "TaxAppConfigurePayload", returnType: "TaxAppConfigurePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `TaxAppConfigure`.
 */
export type TaxAppConfigureUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.TaxAppConfigureUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxAppConfigureUserError", returnType: "TaxAppConfigureUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a single tax applied to the associated line item.
 */
export type TaxLine = {
/**
 * Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line.
 */
channelLiable: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The amount of tax, in shop currency, after discounts and before returns.
 */
price: { baseType: BaseTypes.Money, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The amount of tax, in shop and presentment currencies, after discounts and before returns.
 */
priceSet: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The proportion of the line item price that the tax represents as a decimal.
 */
rate: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The proportion of the line item price that the tax represents as a percentage.
 */
ratePercentage: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The name of the tax.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxLine", returnType: "TaxLine", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The Taxonomy resource lets you access the categories, attributes and values of a taxonomy tree.
 */
export type Taxonomy = {
/**
 * Returns the categories of the product taxonomy based on the arguments provided.
 * If a `search` argument is provided, then all categories that match the search query globally are returned.
 * If a `children_of` argument is provided, then all children of the specified category are returned.
 * If a `siblings_of` argument is provided, then all siblings of the specified category are returned.
 * If a `decendents_of` argument is provided, then all descendents of the specified category are returned.
 * If no arguments are provided, then all the top-level categories of the taxonomy are returned.
 */
categories: { baseType: TaxonomyCategoryConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; childrenOf?: BaseTypes.ID | null; descendantsOf?: BaseTypes.ID | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; search?: BaseTypes.String | null; siblingsOf?: BaseTypes.ID | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Taxonomy", returnType: "Taxonomy", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A Shopify product taxonomy attribute.
 */
export type TaxonomyAttribute = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxonomyAttribute", returnType: "TaxonomyAttribute", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * The details of a specific product category within the [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
 */
export type TaxonomyCategory = {
/**
 * The IDs of the category's ancestor categories.
 */
ancestorIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The attributes of the taxonomy category.
 */
attributes: { baseType: TaxonomyCategoryAttributeConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The IDs of the category's child categories.
 */
childrenIds: { baseType: BaseTypes.ID, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The full name of the taxonomy category. For example, Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
 */
fullName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The globally-unique ID of the TaxonomyCategory.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the category is archived. The default value is `false`.
 */
isArchived: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the category is a leaf category. A leaf category doesn't have any subcategories beneath it. For example, in Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Treadmills, Dog Treadmills is a leaf category. The value is `true` when there are no `childrenIds` specified.
 */
isLeaf: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the category is a root category. A root category is at the top level of the category hierarchy and doesn't have a parent category. For example, Animals & Pet Supplies. The value is `true` when there's no `parentId` specified.
 */
isRoot: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The level of the category in the taxonomy tree. Levels indicate the depth of the category from the root. For example, in Animals & Pet Supplies > Pet Supplies > Dog Supplies, Animals & Pet Supplies is at level 1, Animals & Pet Supplies > Pet Supplies is at level 2, and Animals & Pet Supplies > Pet Supplies > Dog Supplies is at level 3.
 */
level: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the taxonomy category. For example, Dog Beds.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The ID of the category's parent category.
 */
parentId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "TaxonomyCategory", returnType: "TaxonomyCategory", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A product taxonomy attribute interface.
 */
export type TaxonomyCategoryAttribute = TaxonomyAttribute | TaxonomyChoiceListAttribute | TaxonomyMeasurementAttribute

/**
 * An auto-generated type for paginating through multiple TaxonomyCategoryAttributes.
 */
export type TaxonomyCategoryAttributeConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: TaxonomyCategoryAttributeEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in TaxonomyCategoryAttributeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { members: { TaxonomyAttribute: TaxonomyAttribute; TaxonomyChoiceListAttribute: TaxonomyChoiceListAttribute; TaxonomyMeasurementAttribute: TaxonomyMeasurementAttribute }, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxonomyCategoryAttributeConnection", returnType: "TaxonomyCategoryAttributeConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one TaxonomyCategoryAttribute and a cursor during pagination.
 */
export type TaxonomyCategoryAttributeEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of TaxonomyCategoryAttributeEdge.
 */
node: { members: { TaxonomyAttribute: TaxonomyAttribute; TaxonomyChoiceListAttribute: TaxonomyChoiceListAttribute; TaxonomyMeasurementAttribute: TaxonomyMeasurementAttribute }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxonomyCategoryAttributeEdge", returnType: "TaxonomyCategoryAttributeEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple TaxonomyCategories.
 */
export type TaxonomyCategoryConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: TaxonomyCategoryEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in TaxonomyCategoryEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: TaxonomyCategory, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxonomyCategoryConnection", returnType: "TaxonomyCategoryConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one TaxonomyCategory and a cursor during pagination.
 */
export type TaxonomyCategoryEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of TaxonomyCategoryEdge.
 */
node: { baseType: TaxonomyCategory, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxonomyCategoryEdge", returnType: "TaxonomyCategoryEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A Shopify product taxonomy choice list attribute.
 */
export type TaxonomyChoiceListAttribute = {
/**
 * The unique ID of the TaxonomyAttribute.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the product taxonomy attribute. For example, Color.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of values on the choice list attribute.
 */
values: { baseType: TaxonomyValueConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null }, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxonomyChoiceListAttribute", returnType: "TaxonomyChoiceListAttribute", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * A Shopify product taxonomy measurement attribute.
 */
export type TaxonomyMeasurementAttribute = {
/**
 * The unique ID of the TaxonomyAttribute.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the product taxonomy attribute. For example, Color.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The product taxonomy attribute options.
 */
options: { baseType: Attribute, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "TaxonomyMeasurementAttribute", returnType: "TaxonomyMeasurementAttribute", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Represents a Shopify product taxonomy value.
 */
export type TaxonomyValue = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the product taxonomy value. For example, Red.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxonomyValue", returnType: "TaxonomyValue", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple TaxonomyValues.
 */
export type TaxonomyValueConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: TaxonomyValueEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in TaxonomyValueEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: TaxonomyValue, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxonomyValueConnection", returnType: "TaxonomyValueConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one TaxonomyValue and a cursor during pagination.
 */
export type TaxonomyValueEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of TaxonomyValueEdge.
 */
node: { baseType: TaxonomyValue, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TaxonomyValueEdge", returnType: "TaxonomyValueEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always
 * represents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions
 * for reconciling a shop's cash flow. A TenderTransaction is immutable once created.
 */
export type TenderTransaction = {
/**
 * The amount and currency of the tender transaction.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Information about the payment method used for the transaction.
 */
paymentMethod: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Date and time when the transaction was processed.
 */
processedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The remote gateway reference associated with the tender transaction.
 */
remoteReference: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the transaction is a test transaction.
 */
test: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Information about the payment instrument used for the transaction.
 */
transactionDetails: { members: { TenderTransactionCreditCardDetails: TenderTransactionCreditCardDetails }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The staff member who performed the transaction.
 */
user: { baseType: StaffMember, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "TenderTransaction", returnType: "TenderTransaction", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * An auto-generated type for paginating through multiple TenderTransactions.
 */
export type TenderTransactionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: TenderTransactionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in TenderTransactionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: TenderTransaction, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TenderTransactionConnection", returnType: "TenderTransactionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Information about the credit card used for this transaction.
 */
export type TenderTransactionCreditCardDetails = {
/**
 * The name of the company that issued the customer's credit card. Example: `Visa`.
 */
creditCardCompany: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234`
 */
creditCardNumber: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "TenderTransactionCreditCardDetails", returnType: "TenderTransactionCreditCardDetails", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Information about the payment instrument used for this transaction.
 */
export type TenderTransactionDetails = TenderTransactionCreditCardDetails

/**
 * An auto-generated type which holds one TenderTransaction and a cursor during pagination.
 */
export type TenderTransactionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of TenderTransactionEdge.
 */
node: { baseType: TenderTransaction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TenderTransactionEdge", returnType: "TenderTransactionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A sale associated with a tip.
 */
export type TipSale = {
/**
 * The type of order action that the sale represents.
 */
actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the sale.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line item for the associated sale.
 */
lineItem: { baseType: LineItem, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line type assocated with the sale.
 */
lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units either ordered or intended to be returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All individual taxes associated with the sale.
 */
taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total sale amount after taxes and discounts.
 */
totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale after taxes.
 */
totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale before taxes.
 */
totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of taxes for the sale.
 */
totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TipSale", returnType: "TipSale", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Sale

/**
 * Transaction fee related to an order transaction.
 */
export type TransactionFee = {
/**
 * Amount of the fee.
 */
amount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Flat rate charge for a transaction.
 */
flatFee: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Name of the credit card flat fee.
 */
flatFeeName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Percentage charge.
 */
rate: { baseType: BaseTypes.Decimal, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Name of the credit card rate.
 */
rateName: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Tax amount charged on the fee.
 */
taxAmount: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Name of the type of fee.
 */
type: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TransactionFee", returnType: "TransactionFee", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `transactionVoid` mutation.
 */
export type TransactionVoidPayload = {
/**
 * The created void transaction.
 */
transaction: { baseType: OrderTransaction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: TransactionVoidUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "TransactionVoidPayload", returnType: "TransactionVoidPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `TransactionVoid`.
 */
export type TransactionVoidUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.TransactionVoidUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TransactionVoidUserError", returnType: "TransactionVoidUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Translatable content of a resource's field.
 */
export type TranslatableContent = {
/**
 * Hash digest representation of the content value.
 */
digest: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The resource field that's being translated.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Locale of the content.
 */
locale: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Type of the translatable content.
 */
type: { baseType: BaseTypes.LocalizableContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Content value.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "TranslatableContent", returnType: "TranslatableContent", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A resource that has translatable fields.
 */
export type TranslatableResource = {
/**
 * GID of the resource.
 */
resourceId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Translatable content.
 */
translatableContent: { baseType: TranslatableContent, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Translatable content translations (includes unpublished locales).
 */
translations: { baseType: Translation, arguments: { locale: BaseTypes.String; marketId?: BaseTypes.ID | null; outdated?: BaseTypes.Boolean | null }, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "TranslatableResource", returnType: "TranslatableResource", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type for paginating through multiple TranslatableResources.
 */
export type TranslatableResourceConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: TranslatableResourceEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in TranslatableResourceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: TranslatableResource, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TranslatableResourceConnection", returnType: "TranslatableResourceConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one TranslatableResource and a cursor during pagination.
 */
export type TranslatableResourceEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of TranslatableResourceEdge.
 */
node: { baseType: TranslatableResource, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TranslatableResourceEdge", returnType: "TranslatableResourceEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Translation of a field of a resource.
 */
export type Translation = {
/**
 * On the resource that this translation belongs to, the reference to the value being translated.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * ISO code of the translation locale.
 */
locale: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The market that the translation is specific to. Null value means the translation is available in all markets.
 */
market: { baseType: Market, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the original content has changed since this translation was updated.
 */
outdated: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the translation was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Translation value.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "Translation", returnType: "Translation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an error that happens during the execution of a translation mutation.
 */
export type TranslationUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.TranslationErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TranslationUserError", returnType: "TranslationUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `translationsRegister` mutation.
 */
export type TranslationsRegisterPayload = {
/**
 * The translations that were created or updated.
 */
translations: { baseType: Translation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: TranslationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "TranslationsRegisterPayload", returnType: "TranslationsRegisterPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `translationsRemove` mutation.
 */
export type TranslationsRemovePayload = {
/**
 * The translations that were deleted.
 */
translations: { baseType: Translation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: TranslationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "TranslationsRemovePayload", returnType: "TranslationsRemovePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a typed custom attribute.
 */
export type TypedAttribute = {
/**
 * Key or name of the attribute.
 */
key: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Value of the attribute.
 */
value: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "TypedAttribute", returnType: "TypedAttribute", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a set of UTM parameters.
 */
export type UTMParameters = {
/**
 * The name of a marketing campaign.
 */
campaign: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective.
 */
content: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The medium of a marketing campaign, such as a banner or email newsletter.
 */
medium: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The source of traffic to the merchant's store, such as Google or an email newsletter.
 */
source: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Paid search terms used by a marketing campaign.
 */
term: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "UTMParameters", returnType: "UTMParameters", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * This is represents new sale types that have been added in future API versions. You may update to a more recent API version to receive additional details about this sale.
 */
export type UnknownSale = {
/**
 * The type of order action that the sale represents.
 */
actionType: { baseType: BaseTypes.SaleActionType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unique ID for the sale.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The line type assocated with the sale.
 */
lineType: { baseType: BaseTypes.SaleLineType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The number of units either ordered or intended to be returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * All individual taxes associated with the sale.
 */
taxes: { baseType: SaleTax, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The total sale amount after taxes and discounts.
 */
totalAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale after taxes.
 */
totalDiscountAmountAfterTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total discounts allocated to the sale before taxes.
 */
totalDiscountAmountBeforeTaxes: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The total amount of taxes for the sale.
 */
totalTaxAmount: { baseType: MoneyBag, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UnknownSale", returnType: "UnknownSale", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Sale

/**
 * An unverified return line item.
 */
export type UnverifiedReturnLineItem = {
/**
 * A note from the customer that describes the item to be returned. Maximum length: 300 characters.
 */
customerNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity being returned.
 */
quantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity that can be refunded.
 */
refundableQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The quantity that was refunded.
 */
refundedQuantity: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The reason for returning the item.
 */
returnReason: { baseType: BaseTypes.ReturnReason, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Additional information about the reason for the return. Maximum length: 255 characters.
 */
returnReasonNote: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The unit price of the unverified return line item.
 */
unitPrice: { baseType: MoneyV2, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UnverifiedReturnLineItem", returnType: "UnverifiedReturnLineItem", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node & ReturnLineItemType

/**
 * The URL redirect for the online store.
 */
export type UrlRedirect = {
/**
 * The ID of the URL redirect.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
 */
path: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The target location where the user will be redirected to.
 */
target: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UrlRedirect", returnType: "UrlRedirect", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `urlRedirectBulkDeleteAll` mutation.
 */
export type UrlRedirectBulkDeleteAllPayload = {
/**
 * The asynchronous job removing the redirects.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "UrlRedirectBulkDeleteAllPayload", returnType: "UrlRedirectBulkDeleteAllPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `urlRedirectBulkDeleteByIds` mutation.
 */
export type UrlRedirectBulkDeleteByIdsPayload = {
/**
 * The asynchronous job removing the redirects.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UrlRedirectBulkDeleteByIdsUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "UrlRedirectBulkDeleteByIdsPayload", returnType: "UrlRedirectBulkDeleteByIdsPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `UrlRedirectBulkDeleteByIds`.
 */
export type UrlRedirectBulkDeleteByIdsUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.UrlRedirectBulkDeleteByIdsUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UrlRedirectBulkDeleteByIdsUserError", returnType: "UrlRedirectBulkDeleteByIdsUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `urlRedirectBulkDeleteBySavedSearch` mutation.
 */
export type UrlRedirectBulkDeleteBySavedSearchPayload = {
/**
 * The asynchronous job removing the redirects.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UrlRedirectBulkDeleteBySavedSearchUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "UrlRedirectBulkDeleteBySavedSearchPayload", returnType: "UrlRedirectBulkDeleteBySavedSearchPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `UrlRedirectBulkDeleteBySavedSearch`.
 */
export type UrlRedirectBulkDeleteBySavedSearchUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.UrlRedirectBulkDeleteBySavedSearchUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UrlRedirectBulkDeleteBySavedSearchUserError", returnType: "UrlRedirectBulkDeleteBySavedSearchUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `urlRedirectBulkDeleteBySearch` mutation.
 */
export type UrlRedirectBulkDeleteBySearchPayload = {
/**
 * The asynchronous job removing the redirects.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UrlRedirectBulkDeleteBySearchUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "UrlRedirectBulkDeleteBySearchPayload", returnType: "UrlRedirectBulkDeleteBySearchPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of `UrlRedirectBulkDeleteBySearch`.
 */
export type UrlRedirectBulkDeleteBySearchUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.UrlRedirectBulkDeleteBySearchUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UrlRedirectBulkDeleteBySearchUserError", returnType: "UrlRedirectBulkDeleteBySearchUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * An auto-generated type for paginating through multiple UrlRedirects.
 */
export type UrlRedirectConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: UrlRedirectEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in UrlRedirectEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: UrlRedirect, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UrlRedirectConnection", returnType: "UrlRedirectConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `urlRedirectCreate` mutation.
 */
export type UrlRedirectCreatePayload = {
/**
 * The created redirect.
 */
urlRedirect: { baseType: UrlRedirect, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UrlRedirectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "UrlRedirectCreatePayload", returnType: "UrlRedirectCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `urlRedirectDelete` mutation.
 */
export type UrlRedirectDeletePayload = {
/**
 * The ID of the deleted redirect.
 */
deletedUrlRedirectId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UrlRedirectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "UrlRedirectDeletePayload", returnType: "UrlRedirectDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one UrlRedirect and a cursor during pagination.
 */
export type UrlRedirectEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of UrlRedirectEdge.
 */
node: { baseType: UrlRedirect, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UrlRedirectEdge", returnType: "UrlRedirectEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object
 * into the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.
 *
 * For more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.
 */
export type UrlRedirectImport = {
/**
 * The number of rows in the file.
 */
count: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of redirects created from the import.
 */
createdCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The number of redirects that failed to be imported.
 */
failedCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Whether the import is finished.
 */
finished: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the import finished.
 */
finishedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The ID of the `UrlRedirectImport` object.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of up to three previews of the URL redirects to be imported.
 */
previewRedirects: { baseType: UrlRedirectImportPreview, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The number of redirects updated during the import.
 */
updatedCount: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "UrlRedirectImport", returnType: "UrlRedirectImport", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `urlRedirectImportCreate` mutation.
 */
export type UrlRedirectImportCreatePayload = {
/**
 * The created `URLRedirectImport` object.
 */
urlRedirectImport: { baseType: UrlRedirectImport, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UrlRedirectImportUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "UrlRedirectImportCreatePayload", returnType: "UrlRedirectImportCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A preview of a URL redirect import row.
 */
export type UrlRedirectImportPreview = {
/**
 * The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
 */
path: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The target location where the user will be redirected to.
 */
target: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UrlRedirectImportPreview", returnType: "UrlRedirectImportPreview", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `urlRedirectImportSubmit` mutation.
 */
export type UrlRedirectImportSubmitPayload = {
/**
 * The asynchronous job importing the redirects.
 */
job: { baseType: Job, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UrlRedirectImportUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "UrlRedirectImportSubmitPayload", returnType: "UrlRedirectImportSubmitPayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an error that happens during execution of a redirect import mutation.
 */
export type UrlRedirectImportUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.UrlRedirectImportErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UrlRedirectImportUserError", returnType: "UrlRedirectImportUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Return type for `urlRedirectUpdate` mutation.
 */
export type UrlRedirectUpdatePayload = {
/**
 * Returns the updated URL redirect.
 */
urlRedirect: { baseType: UrlRedirect, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UrlRedirectUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "UrlRedirectUpdatePayload", returnType: "UrlRedirectUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents an error that happens during execution of a redirect mutation.
 */
export type UrlRedirectUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.UrlRedirectErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UrlRedirectUserError", returnType: "UrlRedirectUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents an error in the input of a mutation.
 */
export type UserError = {
/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "UserError", returnType: "UserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * A checkout server side validation installed on the shop.
 */
export type Validation = {
/**
 * Whether the validation should block on failures other than expected violations.
 */
blockOnFailure: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the validation is enabled on the merchant checkout.
 */
enabled: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The error history on the most recent version of the validation function.
 */
errorHistory: { baseType: FunctionsErrorHistory, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Global ID for the validation.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
 * including its `namespace` and `key`, that's associated with a Shopify resource
 * for the purposes of adding and storing additional information.
 */
metafield: { baseType: Metafield, arguments: { key: BaseTypes.String; namespace?: BaseTypes.String | null }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of metafield definitions.
 */
metafieldDefinitions: { baseType: MetafieldDefinitionConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; pinnedStatus?: BaseTypes.MetafieldDefinitionPinnedStatus | null; query?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null; sortKey?: BaseTypes.MetafieldDefinitionSortKeys | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
 * that a merchant associates with a Shopify resource.
 */
metafields: { baseType: MetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; keys?: Array<BaseTypes.String> | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Returns a private metafield by namespace and key that belongs to the resource.
 */
privateMetafield: { baseType: PrivateMetafield, arguments: { key: BaseTypes.String; namespace: BaseTypes.String }, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * List of private metafields that belong to the resource.
 */
privateMetafields: { baseType: PrivateMetafieldConnection, arguments: { after?: BaseTypes.String | null; before?: BaseTypes.String | null; first?: BaseTypes.Int | null; last?: BaseTypes.Int | null; namespace?: BaseTypes.String | null; reverse?: BaseTypes.Boolean | null }, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Shopify Function implementing the validation.
 */
shopifyFunction: { baseType: ShopifyFunction, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The merchant-facing validation name.
 */
title: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Validation", returnType: "Validation", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & HasMetafieldDefinitions & HasMetafields & Node

/**
 * An auto-generated type for paginating through multiple Validations.
 */
export type ValidationConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: ValidationEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in ValidationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: Validation, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ValidationConnection", returnType: "ValidationConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `validationCreate` mutation.
 */
export type ValidationCreatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ValidationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The created validation.
 */
validation: { baseType: Validation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ValidationCreatePayload", returnType: "ValidationCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `validationDelete` mutation.
 */
export type ValidationDeletePayload = {
/**
 * Returns the deleted validation ID.
 */
deletedId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ValidationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "ValidationDeletePayload", returnType: "ValidationDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one Validation and a cursor during pagination.
 */
export type ValidationEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of ValidationEdge.
 */
node: { baseType: Validation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ValidationEdge", returnType: "ValidationEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `validationUpdate` mutation.
 */
export type ValidationUpdatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ValidationUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The updated validation.
 */
validation: { baseType: Validation, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "ValidationUpdatePayload", returnType: "ValidationUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An error that occurs during the execution of a validation mutation.
 */
export type ValidationUserError = {
/**
 * The error code.
 */
code: { baseType: BaseTypes.ValidationUserErrorCode, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The path to the input field that caused the error.
 */
field: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: true }

/**
 * The error message.
 */
message: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "ValidationUserError", returnType: "ValidationUserError", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & DisplayableError

/**
 * Represents a credit card payment instrument.
 */
export type VaultCreditCard = {
/**
 * The billing address of the card.
 */
billingAddress: { baseType: CustomerCreditCardBillingAddress, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The brand for the card.
 */
brand: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Whether the card has been expired.
 */
expired: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The expiry month of the card.
 */
expiryMonth: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The expiry year of the card.
 */
expiryYear: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The last four digits for the card.
 */
lastDigits: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The name of the card holder.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "VaultCreditCard", returnType: "VaultCreditCard", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a paypal billing agreement payment instrument.
 */
export type VaultPaypalBillingAgreement = {
/**
 * Whether the paypal billing agreement is inactive.
 */
inactive: { baseType: BaseTypes.Boolean, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The paypal account name.
 */
name: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The paypal account email address.
 */
paypalAccountEmail: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "VaultPaypalBillingAgreement", returnType: "VaultPaypalBillingAgreement", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Representation of 3d vectors and points. It can represent
 * either the coordinates of a point in space, a direction, or
 * size. Presented as an object with three floating-point values.
 */
export type Vector3 = {
/**
 * The x coordinate of Vector3.
 */
x: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The y coordinate of Vector3.
 */
y: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The z coordinate of Vector3.
 */
z: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Vector3", returnType: "Vector3", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Represents a Shopify hosted video.
 */
export type Video = {
/**
 * A word or phrase to share the nature or contents of a media.
 */
alt: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The video's duration in milliseconds. This value is `null` unless the video's status field is
 * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
 */
duration: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * Any errors that have occurred on the file.
 */
fileErrors: { baseType: FileError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The status of the file.
 */
fileStatus: { baseType: BaseTypes.FileStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The video's filename.
 */
filename: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The media content type.
 */
mediaContentType: { baseType: BaseTypes.MediaContentType, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * Any errors which have occurred on the media.
 */
mediaErrors: { baseType: MediaError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The warnings attached to the media.
 */
mediaWarnings: { baseType: MediaWarning, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The video's original source. This value is `null` unless the video's status field is
 * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
 */
originalSource: { baseType: VideoSource, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The preview image for the media.
 */
preview: { baseType: MediaPreviewImage, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The video's sources. This value is empty unless the video's status field is
 * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
 */
sources: { baseType: VideoSource, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * Current status of the media.
 */
status: { baseType: BaseTypes.MediaStatus, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Video", returnType: "Video", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & File & Media & Node

/**
 * Represents a source for a Shopify hosted video.
 *
 * Types of sources include the original video, lower resolution versions of the original video,
 * and an m3u8 playlist file.
 *
 * Only [videos](https://shopify.dev/api/admin-graphql/latest/objects/video) with a status field
 * of [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready) have sources.
 */
export type VideoSource = {
/**
 * The video source's file size in bytes.
 */
fileSize: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The video source's file format extension.
 */
format: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The video source's height.
 */
height: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The video source's MIME type.
 */
mimeType: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The video source's URL.
 */
url: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The video source's width.
 */
width: { baseType: BaseTypes.Int, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "VideoSource", returnType: "VideoSource", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * The `WebPixel` object enables you to manage JavaScript code snippets
 * that run on an online store and collect
 * [behavioral data](https://shopify.dev/docs/api/web-pixels-api/standard-events)
 * for marketing campaign optimization and analytics.
 *
 * Learn how to create a
 * [web pixel extension](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)
 * to subscribe your app to events that are emitted by Shopify.
 */
export type WebPixel = {
/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The
 * [settings object](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels#step-2-define-your-web-pixel-settings)
 * for the web pixel. This object specifies configuration options that control the web pixel's functionality and behavior. You can find the settings for a web pixel in
 * `extensions/<your_extension_name>/shopify.extension.toml`.
 */
settings: { baseType: BaseTypes.JSON, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "WebPixel", returnType: "WebPixel", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & Node

/**
 * Return type for `webPixelCreate` mutation.
 */
export type WebPixelCreatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ErrorsWebPixelUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The created web pixel settings.
 */
webPixel: { baseType: WebPixel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "WebPixelCreatePayload", returnType: "WebPixelCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `webPixelDelete` mutation.
 */
export type WebPixelDeletePayload = {
/**
 * The ID of the web pixel settings that was deleted.
 */
deletedWebPixelId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ErrorsWebPixelUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "WebPixelDeletePayload", returnType: "WebPixelDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `webPixelUpdate` mutation.
 */
export type WebPixelUpdatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: ErrorsWebPixelUserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The updated web pixel settings.
 */
webPixel: { baseType: WebPixel, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "WebPixelUpdatePayload", returnType: "WebPixelUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An Amazon EventBridge partner event source to which webhook subscriptions publish events.
 */
export type WebhookEventBridgeEndpoint = {
/**
 * The ARN of this EventBridge partner event source.
 */
arn: { baseType: BaseTypes.ARN, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "WebhookEventBridgeEndpoint", returnType: "WebhookEventBridgeEndpoint", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An HTTPS endpoint to which webhook subscriptions send POST requests.
 */
export type WebhookHttpEndpoint = {
/**
 * The URL to which the webhooks events are sent.
 */
callbackUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "WebhookHttpEndpoint", returnType: "WebhookHttpEndpoint", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.
 */
export type WebhookPubSubEndpoint = {
/**
 * The Google Cloud Pub/Sub project ID.
 */
pubSubProject: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The Google Cloud Pub/Sub topic ID.
 */
pubSubTopic: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "WebhookPubSubEndpoint", returnType: "WebhookPubSubEndpoint", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.
 * It describes the topic that the app wants to receive, and a destination where Shopify should send webhooks of the specified topic.
 * When an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.
 * Learn more about the [webhooks system](https://shopify.dev/apps/webhooks).
 */
export type WebhookSubscription = {
/**
 * The Admin API version that Shopify uses to serialize webhook events. This value is inherited from the app that created the webhook subscription.
 */
apiVersion: { baseType: ApiVersion, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The destination URI to which the webhook subscription will send a message when an event occurs.
 */
callbackUrl: { baseType: BaseTypes.URL, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the webhook subscription was created.
 */
createdAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The endpoint to which the webhook subscription will send events.
 */
endpoint: { members: { WebhookEventBridgeEndpoint: WebhookEventBridgeEndpoint; WebhookHttpEndpoint: WebhookHttpEndpoint; WebhookPubSubEndpoint: WebhookPubSubEndpoint }, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A constraint specified using search syntax that ensures only webhooks that match the specified filter are emitted. See our [guide on filters](https://shopify.dev/docs/apps/build/webhooks/customize/filters) for more details.
 */
filter: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The format in which the webhook subscription should send the data.
 */
format: { baseType: BaseTypes.WebhookSubscriptionFormat, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * A globally-unique ID.
 */
id: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * An optional array of top-level resource fields that should be serialized and sent in the webhook message. If null, then all fields will be sent.
 */
includeFields: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The ID of the corresponding resource in the REST Admin API.
 */
legacyResourceId: { baseType: BaseTypes.UnsignedInt64, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The list of namespaces for any metafields that should be included in the webhook subscription.
 */
metafieldNamespaces: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The list of namespaces for private metafields that should be included in the webhook subscription.
 */
privateMetafieldNamespaces: { baseType: BaseTypes.String, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The type of event that triggers the webhook. The topic determines when the webhook subscription sends a webhook, as well as what class of data object that webhook contains.
 */
topic: { baseType: BaseTypes.WebhookSubscriptionTopic, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The date and time when the webhook subscription was updated.
 */
updatedAt: { baseType: BaseTypes.DateTime, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "WebhookSubscription", returnType: "WebhookSubscription", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
} & LegacyInteroperability & Node

/**
 * An auto-generated type for paginating through multiple WebhookSubscriptions.
 */
export type WebhookSubscriptionConnection = {
/**
 * The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
 */
edges: { baseType: WebhookSubscriptionEdge, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * A list of nodes that are contained in WebhookSubscriptionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve.
 */
nodes: { baseType: WebhookSubscription, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
 */
pageInfo: { baseType: PageInfo, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "WebhookSubscriptionConnection", returnType: "WebhookSubscriptionConnection", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `webhookSubscriptionCreate` mutation.
 */
export type WebhookSubscriptionCreatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The webhook subscription that was created.
 */
webhookSubscription: { baseType: WebhookSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "WebhookSubscriptionCreatePayload", returnType: "WebhookSubscriptionCreatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * Return type for `webhookSubscriptionDelete` mutation.
 */
export type WebhookSubscriptionDeletePayload = {
/**
 * The ID of the deleted webhook subscription.
 */
deletedWebhookSubscriptionId: { baseType: BaseTypes.ID, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

__typename: { baseType: "WebhookSubscriptionDeletePayload", returnType: "WebhookSubscriptionDeletePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An auto-generated type which holds one WebhookSubscription and a cursor during pagination.
 */
export type WebhookSubscriptionEdge = {
/**
 * The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
 */
cursor: { baseType: BaseTypes.String, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The item at the end of WebhookSubscriptionEdge.
 */
node: { baseType: WebhookSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "WebhookSubscriptionEdge", returnType: "WebhookSubscriptionEdge", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * An endpoint to which webhook subscriptions send webhooks events.
 */
export type WebhookSubscriptionEndpoint = WebhookEventBridgeEndpoint | WebhookHttpEndpoint | WebhookPubSubEndpoint

/**
 * Return type for `webhookSubscriptionUpdate` mutation.
 */
export type WebhookSubscriptionUpdatePayload = {
/**
 * The list of errors that occurred from executing the mutation.
 */
userErrors: { baseType: UserError, arguments: never, isArray: true, itemsAreNullable: false, isNullable: false }

/**
 * The webhook subscription that was updated.
 */
webhookSubscription: { baseType: WebhookSubscription, arguments: never, isArray: false, itemsAreNullable: true, isNullable: true }

__typename: { baseType: "WebhookSubscriptionUpdatePayload", returnType: "WebhookSubscriptionUpdatePayload", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}

/**
 * A weight, which includes a numeric value and a unit of measurement.
 */
export type Weight = {
/**
 * The unit of measurement for `value`.
 */
unit: { baseType: BaseTypes.WeightUnit, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

/**
 * The weight value using the unit system specified with `unit`.
 */
value: { baseType: BaseTypes.Float, arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }

__typename: { baseType: "Weight", returnType: "Weight", arguments: never, isArray: false, itemsAreNullable: true, isNullable: false }
}